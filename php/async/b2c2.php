<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\Precise;

class b2c2 extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'b2c2',
            'name' => 'B2C2',
            'countries' => array( 'GB' ),
            'rateLimit' => 500,
            'has' => array(
                'fetchBalance' => true,
                'fetchCurrencies' => true,
                'fetchMarkets' => true,
                'fetchOrders' => true,
                'fetchLedger' => true,
                'fetchMyTrades' => true,
                'createOrder' => true,
                'fetchOrder' => true,
                'fetchWithdrawals' => true,
                'withdraw' => true,
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/37808081-b87f2d9c-2e59-11e8-894d-c1900b7584fe.jpg',
                'api' => array(
                    'private' => 'https://api.uat.b2c2.net',
                ),
                'test' => array(
                    'private' => 'https://api.uat.b2c2.net',
                ),
                'www' => 'https://b2c2.com',
                'doc' => 'https://docs.b2c2.net',
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => false,
            ),
            'api' => array(
                'private' => array(
                    'get' => array(
                        'account_info',
                        'balance',
                        'currency',
                        'funding_rates',
                        'instruments',
                        'ledger',
                        'order',
                        'order/{order_id_or_client_order_id}',
                        'trade',
                        'trade/{trade_id}',
                        'withdrawal',
                        'withdrawal/{withdrawal_id}',
                    ),
                    'post' => array(
                        'request_for_quote/',
                        'order/',
                        'withdrawal/',
                    ),
                    'delete' => array(
                        'order/{order_id_or_client_order_id}',
                        'withdrawal/{withdrawal_id}',
                    ),
                ),
            ),
            'httpExceptions' => array(
                '400' => '\\ccxt\\BadRequest', // Bad Request –- Incorrect parameters.
                '401' => '\\ccxt\\AuthenticationError', // Unauthorized – Wrong Token.
                '404' => '\\ccxt\\ExchangeNotAvailable', // Not Found – The specified endpoint could not be found.
                '405' => '\\ccxt\\ExchangeNotAvailable', // Method Not Allowed – You tried to access an endpoint with an invalid method.
                '406' => '\\ccxt\\BadRequest', // Not Acceptable – Incorrect request format.
                '429' => '\\ccxt\\RateLimitExceeded', // Too Many Requests – Rate limited, pause requests.
                '500' => '\\ccxt\\ExchangeError', // Internal Server Error – We had a problem with our server. Try again later.
                '503' => '\\ccxt\\OnMaintenance', // Service unavailable
            ),
            'exceptions' => array(
                'exact' => array(
                    '1000' => '\\ccxt\\ExchangeError', // Generic –- Unknown error.
                    '1001' => '\\ccxt\\InvalidOrder', // Instrument not allowed – Instrument does not exist or you are not authorized to trade it.
                    '1002' => '\\ccxt\\PermissionDenied', // The RFQ does not belong to you.
                    '1003' => '\\ccxt\\InvalidOrder', // Different instrument – You tried to post a trade with a different instrument than the related RFQ.
                    '1004' => '\\ccxt\\InvalidOrder', // Different side – You tried to post a trade with a different side than the related RFQ.
                    '1005' => '\\ccxt\\InvalidOrder', // Different price – You tried to post a trade with a different price than the related RFQ.
                    '1006' => '\\ccxt\\InvalidOrder', // Different quantity – You tried to post a trade with a different quantity than the related RFQ.
                    '1007' => '\\ccxt\\InvalidOrder', // Quote is not valid – Quote may have expired.
                    '1009' => '\\ccxt\\InvalidOrder', // Price not valid – The price is not valid anymore. This error can occur during big market moves.
                    '1010' => '\\ccxt\\InvalidOrder', // Quantity too big – Max quantity per trade reached.
                    '1011' => '\\ccxt\\InsufficientFunds', // Not enough balance – Not enough balance.
                    '1012' => '\\ccxt\\InsufficientFunds', // Max risk exposure reached – Please see our FAQ for more information about the risk exposure.
                    '1013' => '\\ccxt\\InsufficientFunds', // Max credit exposure reached – Please see our FAQ for more information about the credit exposure.
                    '1014' => '\\ccxt\\InvalidAddress', // No BTC address associated – You don’t have a BTC address associated to your account.
                    '1015' => '\\ccxt\\InvalidOrder', // Too many decimals – We only allow four decimals in quantities.
                    '1016' => '\\ccxt\\OnMaintenance', // Trading is disabled – May occur after a maintenance or under exceptional circumstances.
                    '1017' => '\\ccxt\\BadRequest', // Illegal parameter – Wrong type or parameter.
                    '1018' => '\\ccxt\\OnMaintenance', // Settlement is disabled at the moment.
                    '1019' => '\\ccxt\\InvalidOrder', // Quantity is too small.
                    '1020' => '\\ccxt\\InvalidOrder', // The field valid_until is malformed.
                    '1021' => '\\ccxt\\OrderNotFound', // Your Order has expired.
                    '1022' => '\\ccxt\\BadSymbol', // Currency not allowed.
                    '1023' => '\\ccxt\\NotSupported', // We only support “FOK” order_type at the moment.
                    '1100' => '\\ccxt\\ExchangeError', // Other error.
                    '1101' => '\\ccxt\\BadRequest', // Field required – Field required.
                    '1102' => '\\ccxt\\BadRequest', // Pagination offset too big – Narrow down the data space using parameters such as ‘created*gte’, ‘created*lt’, ‘since’.
                    '1200' => '\\ccxt\\OnMaintenance', // API Maintenance
                ),
            ),
            'options' => array(
                'fetchMyTrades' => array(
                    'sort' => 'timestamp,asc',
                ),
                'fetchOpenOrders' => array(
                    'sort' => 'createdAt,asc',
                ),
                'fetchClosedOrders' => array(
                    'sort' => 'createdAt,asc',
                ),
                'defaultSort' => 'timestamp,asc',
                'defaultSortOrders' => 'createdAt,asc',
            ),
            'currencies' => array( 'ADA' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '1.0', 'stable_coin' => false, 'currency_type' => 'crypto', 'is_crypto' => true, 'readable_name' => 'Cardano', 'ada_max_qty_per_trade' => 4000000 ), 'id' => 'ADA', 'code' => 'ADA', 'name' => 'Cardano', 'type' => 'crypto', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 1, 'max' => 4000000 ))), 'AUD' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '0.01', 'stable_coin' => false, 'currency_type' => 'fiat', 'is_crypto' => false, 'readable_name' => 'Australian Dollar', 'aud_max_qty_per_trade' => 750000 ), 'id' => 'AUD', 'code' => 'AUD', 'name' => 'Australian Dollar', 'type' => 'fiat', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 0.01, 'max' => 750000 ))), 'BCH' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '0.01', 'stable_coin' => false, 'currency_type' => 'crypto', 'is_crypto' => true, 'readable_name' => 'Bitcoin cash', 'bch_max_qty_per_trade' => 500 ), 'id' => 'BCH', 'code' => 'BCH', 'name' => 'Bitcoin cash', 'type' => 'crypto', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 0.01, 'max' => 500 ))), 'BNB' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '0.01', 'stable_coin' => false, 'currency_type' => 'crypto', 'is_crypto' => true, 'readable_name' => 'Binance Coin', 'bnb_max_qty_per_trade' => 1700 ), 'id' => 'BNB', 'code' => 'BNB', 'name' => 'Binance Coin', 'type' => 'crypto', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 0.01, 'max' => 1700 ))), 'BTC' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '0.0005', 'stable_coin' => false, 'currency_type' => 'crypto', 'is_crypto' => true, 'readable_name' => 'Bitcoin', 'btc_max_qty_per_trade' => 100 ), 'id' => 'BTC', 'code' => 'BTC', 'name' => 'Bitcoin', 'type' => 'crypto', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 0.0005, 'max' => 100 ))), 'CAD' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '0.01', 'stable_coin' => false, 'currency_type' => 'fiat', 'is_crypto' => false, 'readable_name' => 'Canadian Dollar', 'cad_max_qty_per_trade' => 750000 ), 'id' => 'CAD', 'code' => 'CAD', 'name' => 'Canadian Dollar', 'type' => 'fiat', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 0.01, 'max' => 750000 ))), 'CHF' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '0.01', 'stable_coin' => false, 'currency_type' => 'fiat', 'is_crypto' => false, 'readable_name' => 'Swiss Franc', 'chf_max_qty_per_trade' => 550000 ), 'id' => 'CHF', 'code' => 'CHF', 'name' => 'Swiss Franc', 'type' => 'fiat', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 0.01, 'max' => 550000 ))), 'CNH' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '1.0', 'stable_coin' => false, 'currency_type' => 'fiat', 'is_crypto' => false, 'readable_name' => 'Offshore Renminbi', 'cnh_max_qty_per_trade' => 600000 ), 'id' => 'CNH', 'code' => 'CNH', 'name' => 'Offshore Renminbi', 'type' => 'fiat', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 1, 'max' => 600000 ))), 'DOG' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '1.0', 'stable_coin' => false, 'currency_type' => 'crypto', 'is_crypto' => true, 'readable_name' => 'Dogecoin', 'dog_max_qty_per_trade' => 1800000 ), 'id' => 'DOG', 'code' => 'DOG', 'name' => 'Dogecoin', 'type' => 'crypto', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 1, 'max' => 1800000 ))), 'DOT' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '0.5', 'stable_coin' => false, 'currency_type' => 'crypto', 'is_crypto' => true, 'readable_name' => 'Polkadot', 'dot_max_qty_per_trade' => 100000 ), 'id' => 'DOT', 'code' => 'DOT', 'name' => 'Polkadot', 'type' => 'crypto', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 0.5, 'max' => 100000 ))), 'EOS' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '1.0', 'stable_coin' => false, 'currency_type' => 'crypto', 'is_crypto' => true, 'readable_name' => 'EOS', 'eos_max_qty_per_trade' => 20000 ), 'id' => 'EOS', 'code' => 'EOS', 'name' => 'EOS', 'type' => 'crypto', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 1, 'max' => 20000 ))), 'ETH' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '0.005', 'stable_coin' => false, 'currency_type' => 'crypto', 'is_crypto' => true, 'readable_name' => 'Ether', 'eth_max_qty_per_trade' => 1000 ), 'id' => 'ETH', 'code' => 'ETH', 'name' => 'Ether', 'type' => 'crypto', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 0.005, 'max' => 1000 ))), 'EUR' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '0.01', 'stable_coin' => false, 'currency_type' => 'fiat', 'is_crypto' => false, 'readable_name' => 'Euro', 'eur_max_qty_per_trade' => 500000 ), 'id' => 'EUR', 'code' => 'EUR', 'name' => 'Euro', 'type' => 'fiat', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 0.01, 'max' => 500000 ))), 'GBP' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '0.01', 'stable_coin' => false, 'currency_type' => 'fiat', 'is_crypto' => false, 'readable_name' => 'Great British Pound', 'gbp_max_qty_per_trade' => 450000 ), 'id' => 'GBP', 'code' => 'GBP', 'name' => 'Great British Pound', 'type' => 'fiat', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 0.01, 'max' => 450000 ))), 'JPY' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '0.01', 'stable_coin' => false, 'currency_type' => 'fiat', 'is_crypto' => false, 'readable_name' => 'Japanese Yen', 'jpy_max_qty_per_trade' => 65000000 ), 'id' => 'JPY', 'code' => 'JPY', 'name' => 'Japanese Yen', 'type' => 'fiat', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 0.01, 'max' => 65000000 ))), 'LNK' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '0.1', 'stable_coin' => false, 'currency_type' => 'crypto', 'is_crypto' => true, 'readable_name' => 'Chainlink', 'lnk_max_qty_per_trade' => 60000 ), 'id' => 'LNK', 'code' => 'LNK', 'name' => 'Chainlink', 'type' => 'crypto', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 0.1, 'max' => 60000 ))), 'LTC' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '0.1', 'stable_coin' => false, 'currency_type' => 'crypto', 'is_crypto' => true, 'readable_name' => 'Litecoin', 'ltc_max_qty_per_trade' => 4000 ), 'id' => 'LTC', 'code' => 'LTC', 'name' => 'Litecoin', 'type' => 'crypto', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 0.1, 'max' => 4000 ))), 'MXN' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '1.0', 'stable_coin' => false, 'currency_type' => 'fiat', 'is_crypto' => false, 'readable_name' => '', 'mxn_max_qty_per_trade' => 12300000 ), 'id' => 'MXN', 'code' => 'MXN', 'name' => '', 'type' => 'fiat', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 1, 'max' => 12300000 ))), 'NZD' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '0.01', 'stable_coin' => false, 'currency_type' => 'fiat', 'is_crypto' => false, 'readable_name' => '' ), 'id' => 'NZD', 'code' => 'NZD', 'name' => '', 'type' => 'fiat', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 0.01 ))), 'SGD' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '0.01', 'stable_coin' => false, 'currency_type' => 'fiat', 'is_crypto' => false, 'readable_name' => 'Singapore Dollar', 'sgd_max_qty_per_trade' => 800000 ), 'id' => 'SGD', 'code' => 'SGD', 'name' => 'Singapore Dollar', 'type' => 'fiat', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 0.01, 'max' => 800000 ))), 'UNI' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '0.1', 'stable_coin' => false, 'currency_type' => 'crypto', 'is_crypto' => true, 'readable_name' => 'Uniswap', 'uni_max_qty_per_trade' => 25000 ), 'id' => 'UNI', 'code' => 'UNI', 'name' => 'Uniswap', 'type' => 'crypto', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 0.1, 'max' => 25000 ))), 'USC' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '0.01', 'stable_coin' => true, 'currency_type' => 'crypto', 'is_crypto' => true, 'readable_name' => 'USD Coin', 'usc_max_qty_per_trade' => 600000 ), 'id' => 'USC', 'code' => 'USC', 'name' => 'USD Coin', 'type' => 'crypto', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 0.01, 'max' => 600000 ))), 'USD' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '0.01', 'stable_coin' => false, 'currency_type' => 'fiat', 'is_crypto' => false, 'readable_name' => 'US Dollar', 'usd_max_qty_per_trade' => 600000 ), 'id' => 'USD', 'code' => 'USD', 'name' => 'US Dollar', 'type' => 'fiat', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 0.01, 'max' => 600000 ))), 'UST' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '0.01', 'stable_coin' => true, 'currency_type' => 'crypto', 'is_crypto' => true, 'readable_name' => 'Tether', 'ust_max_qty_per_trade' => 600000 ), 'id' => 'UST', 'code' => 'UST', 'name' => 'Tether', 'type' => 'crypto', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 0.01, 'max' => 600000 ))), 'XAU' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '1.0', 'stable_coin' => false, 'currency_type' => 'synthetic', 'is_crypto' => false, 'readable_name' => 'XAU', 'xau_max_qty_per_trade' => 1000 ), 'id' => 'XAU', 'code' => 'XAU', 'name' => 'XAU', 'type' => 'synthetic', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 1, 'max' => 1000 ))), 'XLM' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '100.0', 'stable_coin' => false, 'currency_type' => 'crypto', 'is_crypto' => true, 'readable_name' => 'Stellar', 'xlm_max_qty_per_trade' => 4000000 ), 'id' => 'XLM', 'code' => 'XLM', 'name' => 'Stellar', 'type' => 'crypto', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 100, 'max' => 4000000 ))), 'XMR' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '0.01', 'stable_coin' => false, 'currency_type' => 'crypto', 'is_crypto' => true, 'readable_name' => 'Monero' ), 'id' => 'XMR', 'code' => 'XMR', 'name' => 'Monero', 'type' => 'crypto', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 0.01 ))), 'XRP' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '20.0', 'stable_coin' => false, 'currency_type' => 'crypto', 'is_crypto' => true, 'readable_name' => 'Ripple', 'xrp_max_qty_per_trade' => 200000 ), 'id' => 'XRP', 'code' => 'XRP', 'name' => 'Ripple', 'type' => 'crypto', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 20, 'max' => 200000 ))), 'XTZ' => array( 'info' => array( 'long_only' => false, 'minimum_trade_size' => '1.0', 'stable_coin' => false, 'currency_type' => 'crypto', 'is_crypto' => true, 'readable_name' => 'Tezos', 'xtz_max_qty_per_trade' => 170000 ), 'id' => 'XTZ', 'code' => 'XTZ', 'name' => 'Tezos', 'type' => 'crypto', 'active' => true, 'precision' => 4, 'limits' => array( 'withdraw' => array(), 'amount' => array( 'min' => 1, 'max' => 170000 )))),
            'markets' => array( 'LTC/USD' => array( 'limits' => array( 'amount' => array( 'min' => 0.1, 'max' => 4000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 600000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'LTCUSD.SPOT', 'underlier' => 'LTCUSD', 'type' => 'SPOT' ), 'id' => 'LTCUSD.SPOT', 'symbol' => 'LTC/USD', 'base' => 'LTC', 'quote' => 'USD', 'baseId' => 'LTC', 'quoteId' => 'USD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'BCH/USD' => array( 'limits' => array( 'amount' => array( 'min' => 0.01, 'max' => 500 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 600000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'BCHUSD.SPOT', 'underlier' => 'BCHUSD', 'type' => 'SPOT' ), 'id' => 'BCHUSD.SPOT', 'symbol' => 'BCH/USD', 'base' => 'BCH', 'quote' => 'USD', 'baseId' => 'BCH', 'quoteId' => 'USD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'EOS/AUD' => array( 'limits' => array( 'amount' => array( 'min' => 1, 'max' => 20000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 750000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'EOSAUD.SPOT', 'underlier' => 'EOSAUD', 'type' => 'SPOT' ), 'id' => 'EOSAUD.SPOT', 'symbol' => 'EOS/AUD', 'base' => 'EOS', 'quote' => 'AUD', 'baseId' => 'EOS', 'quoteId' => 'AUD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'UST/AUD' => array( 'limits' => array( 'amount' => array( 'min' => 0.01, 'max' => 600000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 750000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'USTAUD.SPOT', 'underlier' => 'USTAUD', 'type' => 'SPOT' ), 'id' => 'USTAUD.SPOT', 'symbol' => 'UST/AUD', 'base' => 'UST', 'quote' => 'AUD', 'baseId' => 'UST', 'quoteId' => 'AUD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'LNK/ETH' => array( 'limits' => array( 'amount' => array( 'min' => 0.1, 'max' => 60000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.005, 'max' => 1000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'LNKETH.SPOT', 'underlier' => 'LNKETH', 'type' => 'SPOT' ), 'id' => 'LNKETH.SPOT', 'symbol' => 'LNK/ETH', 'base' => 'LNK', 'quote' => 'ETH', 'baseId' => 'LNK', 'quoteId' => 'ETH', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'BTC/USD' => array( 'limits' => array( 'amount' => array( 'min' => 0.0005, 'max' => 100 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 600000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'BTCUSD.SPOT', 'underlier' => 'BTCUSD', 'type' => 'SPOT' ), 'id' => 'BTCUSD.SPOT', 'symbol' => 'BTC/USD', 'base' => 'BTC', 'quote' => 'USD', 'baseId' => 'BTC', 'quoteId' => 'USD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'ETH/BTC' => array( 'limits' => array( 'amount' => array( 'min' => 0.005, 'max' => 1000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.0005, 'max' => 100 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'ETHBTC.SPOT', 'underlier' => 'ETHBTC', 'type' => 'SPOT' ), 'id' => 'ETHBTC.SPOT', 'symbol' => 'ETH/BTC', 'base' => 'ETH', 'quote' => 'BTC', 'baseId' => 'ETH', 'quoteId' => 'BTC', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'ETH/USD' => array( 'limits' => array( 'amount' => array( 'min' => 0.005, 'max' => 1000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 600000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'ETHUSD.SPOT', 'underlier' => 'ETHUSD', 'type' => 'SPOT' ), 'id' => 'ETHUSD.SPOT', 'symbol' => 'ETH/USD', 'base' => 'ETH', 'quote' => 'USD', 'baseId' => 'ETH', 'quoteId' => 'USD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'BCH/AUD' => array( 'limits' => array( 'amount' => array( 'min' => 0.01, 'max' => 500 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 750000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'BCHAUD.SPOT', 'underlier' => 'BCHAUD', 'type' => 'SPOT' ), 'id' => 'BCHAUD.SPOT', 'symbol' => 'BCH/AUD', 'base' => 'BCH', 'quote' => 'AUD', 'baseId' => 'BCH', 'quoteId' => 'AUD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'LTC/AUD' => array( 'limits' => array( 'amount' => array( 'min' => 0.1, 'max' => 4000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 750000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'LTCAUD.SPOT', 'underlier' => 'LTCAUD', 'type' => 'SPOT' ), 'id' => 'LTCAUD.SPOT', 'symbol' => 'LTC/AUD', 'base' => 'LTC', 'quote' => 'AUD', 'baseId' => 'LTC', 'quoteId' => 'AUD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'DOT/BTC' => array( 'limits' => array( 'amount' => array( 'min' => 0.5, 'max' => 100000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.0005, 'max' => 100 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'DOTBTC.SPOT', 'underlier' => 'DOTBTC', 'type' => 'SPOT' ), 'id' => 'DOTBTC.SPOT', 'symbol' => 'DOT/BTC', 'base' => 'DOT', 'quote' => 'BTC', 'baseId' => 'DOT', 'quoteId' => 'BTC', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'DOT/USD' => array( 'limits' => array( 'amount' => array( 'min' => 0.5, 'max' => 100000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 600000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'DOTUSD.SPOT', 'underlier' => 'DOTUSD', 'type' => 'SPOT' ), 'id' => 'DOTUSD.SPOT', 'symbol' => 'DOT/USD', 'base' => 'DOT', 'quote' => 'USD', 'baseId' => 'DOT', 'quoteId' => 'USD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'DOT/ETH' => array( 'limits' => array( 'amount' => array( 'min' => 0.5, 'max' => 100000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.005, 'max' => 1000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'DOTETH.SPOT', 'underlier' => 'DOTETH', 'type' => 'SPOT' ), 'id' => 'DOTETH.SPOT', 'symbol' => 'DOT/ETH', 'base' => 'DOT', 'quote' => 'ETH', 'baseId' => 'DOT', 'quoteId' => 'ETH', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'DOT/AUD' => array( 'limits' => array( 'amount' => array( 'min' => 0.5, 'max' => 100000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 750000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'DOTAUD.SPOT', 'underlier' => 'DOTAUD', 'type' => 'SPOT' ), 'id' => 'DOTAUD.SPOT', 'symbol' => 'DOT/AUD', 'base' => 'DOT', 'quote' => 'AUD', 'baseId' => 'DOT', 'quoteId' => 'AUD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'XTZ/AUD' => array( 'limits' => array( 'amount' => array( 'min' => 1, 'max' => 170000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 750000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'XTZAUD.SPOT', 'underlier' => 'XTZAUD', 'type' => 'SPOT' ), 'id' => 'XTZAUD.SPOT', 'symbol' => 'XTZ/AUD', 'base' => 'XTZ', 'quote' => 'AUD', 'baseId' => 'XTZ', 'quoteId' => 'AUD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'DOG/AUD' => array( 'limits' => array( 'amount' => array( 'min' => 1, 'max' => 1800000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 750000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'DOGAUD.SPOT', 'underlier' => 'DOGAUD', 'type' => 'SPOT' ), 'id' => 'DOGAUD.SPOT', 'symbol' => 'DOG/AUD', 'base' => 'DOG', 'quote' => 'AUD', 'baseId' => 'DOG', 'quoteId' => 'AUD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'BCH/BTC' => array( 'limits' => array( 'amount' => array( 'min' => 0.01, 'max' => 500 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.0005, 'max' => 100 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'BCHBTC.SPOT', 'underlier' => 'BCHBTC', 'type' => 'SPOT' ), 'id' => 'BCHBTC.SPOT', 'symbol' => 'BCH/BTC', 'base' => 'BCH', 'quote' => 'BTC', 'baseId' => 'BCH', 'quoteId' => 'BTC', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'XRP/BTC' => array( 'limits' => array( 'amount' => array( 'min' => 20, 'max' => 200000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.0005, 'max' => 100 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'XRPBTC.SPOT', 'underlier' => 'XRPBTC', 'type' => 'SPOT' ), 'id' => 'XRPBTC.SPOT', 'symbol' => 'XRP/BTC', 'base' => 'XRP', 'quote' => 'BTC', 'baseId' => 'XRP', 'quoteId' => 'BTC', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'XRP/ETH' => array( 'limits' => array( 'amount' => array( 'min' => 20, 'max' => 200000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.005, 'max' => 1000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'XRPETH.SPOT', 'underlier' => 'XRPETH', 'type' => 'SPOT' ), 'id' => 'XRPETH.SPOT', 'symbol' => 'XRP/ETH', 'base' => 'XRP', 'quote' => 'ETH', 'baseId' => 'XRP', 'quoteId' => 'ETH', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'LNK/AUD' => array( 'limits' => array( 'amount' => array( 'min' => 0.1, 'max' => 60000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 750000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'LNKAUD.SPOT', 'underlier' => 'LNKAUD', 'type' => 'SPOT' ), 'id' => 'LNKAUD.SPOT', 'symbol' => 'LNK/AUD', 'base' => 'LNK', 'quote' => 'AUD', 'baseId' => 'LNK', 'quoteId' => 'AUD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'USC/AUD' => array( 'limits' => array( 'amount' => array( 'min' => 0.01, 'max' => 600000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 750000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'USCAUD.SPOT', 'underlier' => 'USCAUD', 'type' => 'SPOT' ), 'id' => 'USCAUD.SPOT', 'symbol' => 'USC/AUD', 'base' => 'USC', 'quote' => 'AUD', 'baseId' => 'USC', 'quoteId' => 'AUD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'XLM/BTC' => array( 'limits' => array( 'amount' => array( 'min' => 100, 'max' => 4000000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.0005, 'max' => 100 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'XLMBTC.SPOT', 'underlier' => 'XLMBTC', 'type' => 'SPOT' ), 'id' => 'XLMBTC.SPOT', 'symbol' => 'XLM/BTC', 'base' => 'XLM', 'quote' => 'BTC', 'baseId' => 'XLM', 'quoteId' => 'BTC', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'XLM/ETH' => array( 'limits' => array( 'amount' => array( 'min' => 100, 'max' => 4000000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.005, 'max' => 1000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'XLMETH.SPOT', 'underlier' => 'XLMETH', 'type' => 'SPOT' ), 'id' => 'XLMETH.SPOT', 'symbol' => 'XLM/ETH', 'base' => 'XLM', 'quote' => 'ETH', 'baseId' => 'XLM', 'quoteId' => 'ETH', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'BTC/AUD' => array( 'limits' => array( 'amount' => array( 'min' => 0.0005, 'max' => 100 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 750000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'BTCAUD.SPOT', 'underlier' => 'BTCAUD', 'type' => 'SPOT' ), 'id' => 'BTCAUD.SPOT', 'symbol' => 'BTC/AUD', 'base' => 'BTC', 'quote' => 'AUD', 'baseId' => 'BTC', 'quoteId' => 'AUD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'ETH/AUD' => array( 'limits' => array( 'amount' => array( 'min' => 0.005, 'max' => 1000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 750000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'ETHAUD.SPOT', 'underlier' => 'ETHAUD', 'type' => 'SPOT' ), 'id' => 'ETHAUD.SPOT', 'symbol' => 'ETH/AUD', 'base' => 'ETH', 'quote' => 'AUD', 'baseId' => 'ETH', 'quoteId' => 'AUD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'LTC/BTC' => array( 'limits' => array( 'amount' => array( 'min' => 0.1, 'max' => 4000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.0005, 'max' => 100 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'LTCBTC.SPOT', 'underlier' => 'LTCBTC', 'type' => 'SPOT' ), 'id' => 'LTCBTC.SPOT', 'symbol' => 'LTC/BTC', 'base' => 'LTC', 'quote' => 'BTC', 'baseId' => 'LTC', 'quoteId' => 'BTC', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'XRP/USD' => array( 'limits' => array( 'amount' => array( 'min' => 20, 'max' => 200000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 600000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'XRPUSD.SPOT', 'underlier' => 'XRPUSD', 'type' => 'SPOT' ), 'id' => 'XRPUSD.SPOT', 'symbol' => 'XRP/USD', 'base' => 'XRP', 'quote' => 'USD', 'baseId' => 'XRP', 'quoteId' => 'USD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'XRP/AUD' => array( 'limits' => array( 'amount' => array( 'min' => 20, 'max' => 200000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 750000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'XRPAUD.SPOT', 'underlier' => 'XRPAUD', 'type' => 'SPOT' ), 'id' => 'XRPAUD.SPOT', 'symbol' => 'XRP/AUD', 'base' => 'XRP', 'quote' => 'AUD', 'baseId' => 'XRP', 'quoteId' => 'AUD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'EOS/USD' => array( 'limits' => array( 'amount' => array( 'min' => 1, 'max' => 20000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 600000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'EOSUSD.SPOT', 'underlier' => 'EOSUSD', 'type' => 'SPOT' ), 'id' => 'EOSUSD.SPOT', 'symbol' => 'EOS/USD', 'base' => 'EOS', 'quote' => 'USD', 'baseId' => 'EOS', 'quoteId' => 'USD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'UST/USD' => array( 'limits' => array( 'amount' => array( 'min' => 0.01, 'max' => 600000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 600000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'USTUSD.SPOT', 'underlier' => 'USTUSD', 'type' => 'SPOT' ), 'id' => 'USTUSD.SPOT', 'symbol' => 'UST/USD', 'base' => 'UST', 'quote' => 'USD', 'baseId' => 'UST', 'quoteId' => 'USD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'LTC/ETH' => array( 'limits' => array( 'amount' => array( 'min' => 0.1, 'max' => 4000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.005, 'max' => 1000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'LTCETH.SPOT', 'underlier' => 'LTCETH', 'type' => 'SPOT' ), 'id' => 'LTCETH.SPOT', 'symbol' => 'LTC/ETH', 'base' => 'LTC', 'quote' => 'ETH', 'baseId' => 'LTC', 'quoteId' => 'ETH', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'LNK/USD' => array( 'limits' => array( 'amount' => array( 'min' => 0.1, 'max' => 60000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 600000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'LNKUSD.SPOT', 'underlier' => 'LNKUSD', 'type' => 'SPOT' ), 'id' => 'LNKUSD.SPOT', 'symbol' => 'LNK/USD', 'base' => 'LNK', 'quote' => 'USD', 'baseId' => 'LNK', 'quoteId' => 'USD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'UNI/AUD' => array( 'limits' => array( 'amount' => array( 'min' => 0.1, 'max' => 25000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 750000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'UNIAUD.SPOT', 'underlier' => 'UNIAUD', 'type' => 'SPOT' ), 'id' => 'UNIAUD.SPOT', 'symbol' => 'UNI/AUD', 'base' => 'UNI', 'quote' => 'AUD', 'baseId' => 'UNI', 'quoteId' => 'AUD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'BNB/AUD' => array( 'limits' => array( 'amount' => array( 'min' => 0.01, 'max' => 1700 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 750000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'BNBAUD.SPOT', 'underlier' => 'BNBAUD', 'type' => 'SPOT' ), 'id' => 'BNBAUD.SPOT', 'symbol' => 'BNB/AUD', 'base' => 'BNB', 'quote' => 'AUD', 'baseId' => 'BNB', 'quoteId' => 'AUD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'ADA/AUD' => array( 'limits' => array( 'amount' => array( 'min' => 1, 'max' => 4000000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 750000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'ADAAUD.SPOT', 'underlier' => 'ADAAUD', 'type' => 'SPOT' ), 'id' => 'ADAAUD.SPOT', 'symbol' => 'ADA/AUD', 'base' => 'ADA', 'quote' => 'AUD', 'baseId' => 'ADA', 'quoteId' => 'AUD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'EOS/BTC' => array( 'limits' => array( 'amount' => array( 'min' => 1, 'max' => 20000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.0005, 'max' => 100 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'EOSBTC.SPOT', 'underlier' => 'EOSBTC', 'type' => 'SPOT' ), 'id' => 'EOSBTC.SPOT', 'symbol' => 'EOS/BTC', 'base' => 'EOS', 'quote' => 'BTC', 'baseId' => 'EOS', 'quoteId' => 'BTC', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'XLM/USD' => array( 'limits' => array( 'amount' => array( 'min' => 100, 'max' => 4000000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 600000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'XLMUSD.SPOT', 'underlier' => 'XLMUSD', 'type' => 'SPOT' ), 'id' => 'XLMUSD.SPOT', 'symbol' => 'XLM/USD', 'base' => 'XLM', 'quote' => 'USD', 'baseId' => 'XLM', 'quoteId' => 'USD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'USC/USD' => array( 'limits' => array( 'amount' => array( 'min' => 0.01, 'max' => 600000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 600000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'USCUSD.SPOT', 'underlier' => 'USCUSD', 'type' => 'SPOT' ), 'id' => 'USCUSD.SPOT', 'symbol' => 'USC/USD', 'base' => 'USC', 'quote' => 'USD', 'baseId' => 'USC', 'quoteId' => 'USD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'XLM/AUD' => array( 'limits' => array( 'amount' => array( 'min' => 100, 'max' => 4000000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.01, 'max' => 750000 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'XLMAUD.SPOT', 'underlier' => 'XLMAUD', 'type' => 'SPOT' ), 'id' => 'XLMAUD.SPOT', 'symbol' => 'XLM/AUD', 'base' => 'XLM', 'quote' => 'AUD', 'baseId' => 'XLM', 'quoteId' => 'AUD', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true ), 'LNK/BTC' => array( 'limits' => array( 'amount' => array( 'min' => 0.1, 'max' => 60000 ), 'price' => array( 'min' => 0.0001 ), 'cost' => array( 'min' => 0.0005, 'max' => 100 )), 'precision' => array( 'base' => 4, 'quote' => 4, 'price' => 4, 'amount' => 4 ), 'tierBased' => false, 'percentage' => true, 'info' => array( 'name' => 'LNKBTC.SPOT', 'underlier' => 'LNKBTC', 'type' => 'SPOT' ), 'id' => 'LNKBTC.SPOT', 'symbol' => 'LNK/BTC', 'base' => 'LNK', 'quote' => 'BTC', 'baseId' => 'LNK', 'quoteId' => 'BTC', 'type' => 'SPOT', 'spot' => true, 'margin' => false, 'active' => true )),
        ));
    }

    public function fetch_currencies($params = array ()) {
        $ccys = yield $this->privateGetCurrency ($params);
        $account_info = yield $this->privateGetAccountInfo ($params);
        //
        // currencies endpoint
        // {
        //     "AUD" => array(
        //       "long_only" => false,
        //       "minimum_trade_size" => 0.01,
        //       "stable_coin" => false,
        //       "$currency_type" => "fiat",
        //       "is_crypto" => false,
        //       "readable_name" => ""
        //     ),
        //     "BCH" => array(
        //       "long_only" => false,
        //       "minimum_trade_size" => 0.01,
        //       "stable_coin" => false,
        //       "$currency_type" => "crypto",
        //       "is_crypto" => true,
        //       "readable_name" => "Bitcoin cash"
        //     ),
        // ...
        // Account info endpoint
        // {
        //     "max_risk_exposure" => "500000",
        //     "risk_exposure" => "74054.96",
        //     "currency" => "USD",
        //     "btc_max_qty_per_trade" => "100",
        //     "ust_max_qty_per_trade" => "600000",
        //     "eth_max_qty_per_trade" => "1000",
        //     "ltc_max_qty_per_trade" => "4000",
        //     "bch_max_qty_per_trade" => "500",
        //     "xrp_max_qty_per_trade" => "200000",
        //     ...
        //   }
        $result = array();
        $keys = is_array($ccys) ? array_keys($ccys) : array();
        for ($i = 0; $i < count($keys); $i++) {
            $id = $keys[$i];
            $code = $this->safe_currency_code($id);
            $ccy = $ccys[$keys[$i]];
            $name = $this->safe_string($ccy, 'readable_name');
            $currency_type = $this->safe_string($ccy, 'currency_type');
            $minTradeSize = $this->safe_number($ccy, 'minimum_trade_size');
            $maxTradeSizeKey = strtolower($id) . '_max_qty_per_trade';
            $maxTradeSize = $this->safe_number($account_info, $maxTradeSizeKey);
            $ccy[$maxTradeSizeKey] = $maxTradeSize; // update back into the raw info for debugging
            $result[$code] = array(
                'info' => $ccy,
                'id' => $id,
                'code' => $code,
                'name' => $name,
                'type' => $currency_type,
                'active' => true,
                'fee' => null,
                'precision' => 4,
                'limits' => array(
                    'withdraw' => array( 'min' => null, 'max' => null ),
                    'amount' => array( 'min' => $minTradeSize, 'max' => $maxTradeSize ),
                ),
            );
        }
        return $result;
    }

    public function fetch_markets($params = array ()) {
        // FIXME hack to force reload $currencies
        $currencies = yield $this->fetch_currencies();
        $this->currencies = $this->deep_extend($currencies, $this->currencies);
        $response = yield $this->privateGetInstruments ($params);
        //
        // [
        //     array(
        //       "name" => "LTCUSD.SPOT",
        //       "underlier" => "LTCUSD",
        //       "type" => "SPOT"
        //     ),
        //     array(
        //       "name" => "BCHUSD.SPOT",
        //       "underlier" => "BCHUSD",
        //       "type" => "SPOT"
        //     ),
        //
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            $result[] = $this->parse_market($response[$i]);
        }
        return $result;
    }

    public function parse_market($market) {
        // instruments endpoint
        // [
        //     array(
        //       "name" => "LTCUSD.SPOT",
        //       "$underlier" => "LTCUSD",
        //       "$type" => "SPOT"
        //     ),
        //     array(
        //       "name" => "BCHUSD.SPOT",
        //       "$underlier" => "BCHUSD",
        //       "$type" => "SPOT"
        //     ),
        // ...
        //
        //
        // currency object
        //
        //     result[code] = array(
        //         'info' => ccy,
        //         'id' => $id,
        //         'code' => code,
        //         'name' => name,
        //         'type' => currency_type,
        //         'active' => true,
        //         'fee' => null,
        //         'precision' => 4,
        //         'limits' => array(
        //             'withdraw' => array( 'min' => null, 'max' => null ),
        //             'amount' => array( 'min' => minTradeSize, 'max' => maxTradeSize ),
        //         ),
        //     );
        // }
        $id = $this->safe_string($market, 'name');
        $underlier = $this->safe_string($market, 'underlier');
        $underlier = strtoupper($underlier);
        $baseId = mb_substr($underlier, 0, 3 - 0); // left in $underlier
        $quoteId = mb_substr($underlier, 3, 6 - 3); // right in $underlier
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $symbol = $base . '/' . $quote;
        $type = $this->safe_string($market, 'type');
        $spot = false;
        $margin = false;
        if ($type === 'SPOT') {
            $spot = true;
        } else if ($type === 'CFD') {
            $margin = true;
        }
        $active = true;
        $ccyBase = $this->currencies[$base];
        $ccyQuote = $this->currencies[$quote];
        // $pricePrecision = $ccyQuote['limits']['amount']['min'];
        // $amountPrecision = $ccyBase['limits']['amount']['min'];
        // $precision = array(
        //     'price' => $pricePrecision,
        //     'amount' => $amountPrecision,
        // );
        // FIXME - hard coded precisions
        $precision = array(
            'base' => 4,
            'quote' => 4,
            'price' => 4,
            'amount' => 4,
        );
        $amountMin = $ccyBase['limits']['amount']['min'];
        $amountMax = $ccyBase['limits']['amount']['max'];
        $costMin = $ccyQuote['limits']['amount']['min'];
        $costMax = $ccyQuote['limits']['amount']['max'];
        $limits = array(
            'amount' => array( 'min' => $amountMin, 'max' => $amountMax ),
            'price' => array( 'min' => 0.0001, 'max' => null ),
            'cost' => array( 'min' => $costMin, 'max' => $costMax ),
        );
        // $taker = null; // no $maker or $taker fees for b2c2
        // $maker = null; // no $maker or $taker fees for b2c2
        return array(
            'info' => $market,
            'id' => $id,
            'symbol' => $symbol,
            'base' => $base,
            'quote' => $quote,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'type' => $type,
            'spot' => $spot,
            'margin' => $margin,
            'active' => $active,
            'precision' => $precision,
            'limits' => $limits,
            'tierBased' => false,
            'percentage' => true,
        );
    }

    public function fetch_balance($params = array ()) {
        yield $this->load_markets();
        $response = yield $this->privateGetBalance ($params);
        // {
        //     "USD" => "0",
        //     "BTC" => "0",
        //     "JPY" => "0",
        //     "GBP" => "0",
        //     "ETH" => "0",
        //     "EUR" => "0",
        //     "CAD" => "0",
        //     "LTC" => "0",
        //     "XRP" => "0",
        //     "BCH" => "0"
        // }
        $now = $this->milliseconds();
        $result = array(
            'info' => $response,
            'timestamp' => $now,
            'datetime' => $this->iso8601($now),
        );
        $assets = $response;
        $keys = is_array($assets) ? array_keys($assets) : array();
        for ($i = 0; $i < count($keys); $i++) {
            $balance = $assets[$keys[$i]];
            $code = $keys[$i];
            $account = $this->account();
            $account['free'] = $balance;
            $account['used'] = 0;
            $account['total'] = $balance;
            $result[$code] = $account;
        }
        return $this->parse_balance($result);
    }

    public function create_quote($symbol, $side, $amount, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $lowercaseSide = strtolower($side);
        $request = array(
            'quantity' => $this->amount_to_precision($symbol, $amount),
            'side' => $lowercaseSide,
            'instrument' => $market['id'],
        );
        $response = yield $this->privatePostRequestForQuote (array_merge($request, $params));
        return $this->parse_quote($response, $market);
    }

    public function parse_quote($quote, $market = null) {
        // {
        //     "created" => "2021-08-23T07:20:39.670767Z",
        //     "valid_until" => "2021-08-23T07:21:00.670772Z",
        //     "rfq_id" => "75fdad8c-69a3-45c2-b6a8-dba3f701c759",
        //     "client_rfq_id" => "43fa40fb-bfdd-4e1d-8978-d84ab103ab1f",
        //     "quantity" => "1.0000000000",
        //     "$side" => "sell",
        //     "instrument" => "BTCUSD.SPOT",
        //     "$price" => "50113.00000000"
        //   }
        $timestamp = $this->parse8601($this->safe_string($quote, 'created'));
        $validUntilTimestamp = $this->parse8601($this->safe_string($quote, 'valid_until'));
        $id = $this->safe_string($quote, 'rfq_id');
        $clQuoteId = $this->safe_string($quote, 'client_rfq_id');
        $amount = $this->safe_number($quote, 'quantity');
        $amountString = $this->safe_string($quote, 'quantity');
        $type = 'quote';
        $side = $this->safe_string_lower($quote, 'side');
        $marketId = $this->safe_string($quote, 'instrument');
        $symbol = $this->safe_symbol($marketId, $market);
        $price = $this->safe_number($quote, 'price');
        $priceString = $this->safe_string($quote, 'price');
        $cost = $this->parse_number(Precise::string_mul($priceString, $amountString));
        $status = null;
        if ($validUntilTimestamp > $this->milliseconds()) {
            $status = 'open';
        } else {
            $status = 'closed';
        }
        $fee = null;
        // $this->calculate_fee($symbol, $type, $side, $amount, $price, takerOrMaker); // no fees for B2C2
        if ($fee !== null) {
            $fee->cost = $this->fee_to_precision($symbol, $fee->cost);
        }
        return $this->safe_order(array(
            'info' => $quote,
            'id' => $id,
            'clQuoteId' => $clQuoteId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'validUntilTimestamp' => $validUntilTimestamp,
            'validUntilDatetime' => $this->iso8601($validUntilTimestamp),
            'symbol' => $symbol,
            'type' => $type,
            'side' => $side,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'status' => $status,
            'fee' => $fee,
        ));
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        // $side => 'buy' | 'sell';
        // $type => 'market' | 'limit';
        yield $this->load_markets();
        $market = $this->market($symbol);
        $lowercaseSide = strtolower($side);
        $lowercaseType = strtolower($type);
        $request = array(
            'quantity' => $this->amount_to_precision($symbol, $amount),
            'side' => $lowercaseSide,
            'instrument' => $market['id'],
            'order_type' => null,
        );
        if ($lowercaseType === 'limit') {
            $request['order_type'] = 'FOK';
            $request['price'] = $this->price_to_precision($symbol, $price);
        } else {
            $request['order_type'] = 'MKT';
        }
        $response = yield $this->privatePostOrder (array_merge($request, $params));
        return $this->parse_order($response, $market);
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        // array(
        //     {
        //         order_id => 'dbeb3cc2-68a9-4364-9d80-91de5f1f2133',
        //         client_order_id => 'eba0fc09-0f51-4298-ab88-42c70eb2ba39',
        //         instrument => 'BTCUSD.SPOT',
        //         price => '40498.00000000',
        //         executed_price => '40477.00000000',
        //         quantity => '1.0000000000',
        //         side => 'buy',
        //         order_type => 'MKT',
        //         created => '2021-05-21T06:56:31.519896Z',
        //         trades => array(
        //           {
        //             trade_id => '8862acae-834c-42da-986c-b4d1618dc016',
        //             rfq_id => null,
        //             cfd_contract => null,
        //             order => 'dbeb3cc2-68a9-4364-9d80-91de5f1f2133',
        //             quantity => '1.0000000000',
        //             side => 'buy',
        //             instrument => 'BTCUSD.SPOT',
        //             price => '40477.00000000',
        //             created => '2021-05-21T06:56:31.548302Z',
        //             origin => 'screen:mobile',
        //             executing_unit => ''
        //           }
        //         ),
        //         executing_unit => ''
        //       }
        // )
        yield $this->load_markets();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $request = array( 'order_id_or_client_order_id' => $id );
        $response = yield $this->privateGetOrderOrderIdOrClientOrderId (array_merge($request, $params));
        return $this->parse_orders($response, $market);
    }

    public function fetch_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $marketId = null;
        if ($symbol !== null) {
            $marketId = $this->market($symbol)['id'];
        }
        // 'created__lt' => null,
        // 'client_order_id' => null,
        // 'order_type' => null,
        // 'executing_unit' => null,
        $request = array(
            // 'limit' => $limit,
        );
        if ($marketId !== null) {
            $request['instrument'] = $marketId;
        }
        if ($since !== null) {
            $request['created__gte'] = $this->iso8601($since);
        }
        $response = yield $this->privateGetOrder (array_merge($request, $params));
        $response_next = yield $this->fetch_recursively();
        if ($response_next !== null) {
            $response[] = $response_next;
        }
        return $this->parse_orders($response, null, $since, $limit);
    }

    public function fetch_recursively() {
        $links = $this->safe_string($this->last_response_headers, 'Link');
        var_dump ($links);
        $next = null;
        if (mb_strpos($links, 'next') !== false) {
            $start = mb_strpos($links, '//') + 2;
            $end = mb_strpos($links, '>');
            $next = $links->substring ($start, $end);
            $startsub = mb_strpos($next, '/') + 1;
            $next = $next->substring ($startsub);
        }
        var_dump ($next);
        if ($next !== null) {
            $response = yield $this->request($next, 'private', 'GET');
            $response_next = yield $this->fetch_recursively();
            if ($response_next !== null) {
                $response[] = $response_next;
            }
            return $response;
        } else {
            return null;
        }
    }

    public function parse_order($order, $market = null) {
        // From fetchOrder(s)
        // array(
        //     array(
        //       "order_id" => "373991c8-727d-4b55-94c2-eece7b81023c",
        //       "client_order_id" => "fd76dbde-fdd5-40a9-9211-19eaa19653be",
        //       "instrument" => "XRPUSD.SPOT",
        //       "$price" => "0.59525000",
        //       "executed_price" => "0.59525000",
        //       "quantity" => "1000.0000000000",
        //       "$side" => "buy",
        //       "order_type" => "MKT",
        //       "created" => "2021-07-23T13:36:24.885622Z",
        //       "executing_unit" => ""
        //     ),
        //
        // From a successful createOrder
        // {        order_id =>   "e0bc5d5d-f285-42d3-aa85-6a1b76baf74c",
        // client_order_id =>   "e21732d8-c62b-4922-841e-42c9e8ffdf40",
        //      instrument =>   "ETHUSD.SPOT",
        //           $price =>    null,
        //  executed_price =>   "3278.20000000",
        //        quantity =>   "1.0000000000",
        //            $side =>   "buy",
        //      order_type =>   "MKT",
        //         created =>   "2021-09-13T04:55:38.095940Z",
        //  executing_unit =>   "test1",
        //          $trades => [ {       trade_id => "2ec7679f-8e52-4020-a1fd-44ad3b24c0b3",
        //                              rfq_id =>  null,
        //                        cfd_contract =>  null,
        //                               $order => "e0bc5d5d-f285-42d3-aa85-6a1b76baf74c",
        //                            quantity => "1.0000000000",
        //                                $side => "buy",
        //                          instrument => "ETHUSD.SPOT",
        //                               $price => "3278.20000000",
        //                             created => "2021-09-13T04:55:38.101368Z",
        //                              origin => "rest",
        //                      executing_unit => "test1"                                 } ) }
        //
        $id = $this->safe_string($order, 'order_id');
        $clientOrderId = $this->safe_string($order, 'client_order_id');
        $customer_id = $this->safe_string($order, 'executing_unit');
        $marketId = $this->safe_string($order, 'instrument');
        $symbol = $this->safe_symbol($marketId, $market);
        $price = $this->safe_number($order, 'price');
        $averagepxString = $this->safe_string($order, 'executed_price');
        $averagepx = $this->safe_number($order, 'executed_price');
        $amountString = $this->safe_string($order, 'quantity');
        $amount = $this->safe_number($order, 'quantity');
        $side = $this->safe_string_lower($order, 'side');
        $type = $this->safe_string_upper($order, 'order_type');
        if ($type === 'FOK') {
            $type = 'limit';
        } else {
            $type = 'market';
        }
        $timestamp = $this->parse8601($this->safe_string($order, 'created'));
        $filled = null;
        $status = null;
        $cost = null;
        $remaining = null;
        $takerOrMaker = 'taker';
        $fee = null;
        if ($averagepx !== null) {
            $status = 'closed';
            $filled = $amount;
            $cost = $this->parse_number(Precise::string_mul($averagepxString, $amountString));
            // $fee = $this->calculate_fee($symbol, $type, $side, $filled, $averagepx, $takerOrMaker); // no fees for B2C2
            if ($fee !== null) {
                $fee->cost = $this->fee_to_precision($symbol, $fee->cost);
            }
        } else {
            $status = 'open';
            $remaining = $amount;
        }
        $rawTrades = $this->safe_value($order, 'trades', array());
        $trades = null;
        $tradeParams = array(
            'clientOrderId' => $clientOrderId,
            'type' => $type,
            'takerOrMaker' => $takerOrMaker,
        );
        if ($rawTrades !== null) {
            $trades = $this->parse_trades($rawTrades, $market, null, null, $tradeParams);
        }
        return $this->safe_order(array(
            'info' => $order,
            'id' => $id,
            'clientOrderId' => $clientOrderId,
            'customer_id' => $customer_id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => null,
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => null,
            'postOnly' => null,
            'side' => $side,
            'price' => $price,
            'stopPrice' => null,
            'amount' => $amount,
            'cost' => $cost,
            'average' => $averagepx,
            'filled' => $filled,
            'remaining' => $remaining,
            'status' => $status,
            'fee' => $fee,
            'trades' => $trades,
        ));
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        // 'created__gte' => null,
        // 'created__lt' => null,
        // 'since' => null, // need to map to markets
        // 'ordering' => null, // asc or desc, default desc
        // 'executing_unit' => null,
        $request = array(
            'limit' => $limit,
        );
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['instrument'] = $market['id'];
        }
        if ($since !== null) {
            $request['since'] = $this->iso8601($since);
        }
        $response = yield $this->privateGetTrade (array_merge($request, $params));
        $response_next = yield $this->fetch_recursively();
        if ($response_next !== null) {
            $response[] = $response_next;
        }
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function parse_trade($trade, $market = null) {
        //
        // When returned as part of the order object
        // {        order_id =>   "e0bc5d5d-f285-42d3-aa85-6a1b76baf74c",
        // client_order_id =>   "e21732d8-c62b-4922-841e-42c9e8ffdf40",
        //      instrument =>   "ETHUSD.SPOT",
        //           $price =>    null,
        //  executed_price =>   "3278.20000000",
        //        quantity =>   "1.0000000000",
        //            $side =>   "buy",
        //      order_type =>   "MKT",
        //         created =>   "2021-09-13T04:55:38.095940Z",
        //  executing_unit =>   "test1",
        //          trades => array( {       trade_id => "2ec7679f-8e52-4020-a1fd-44ad3b24c0b3",
        //                              rfq_id =>  null,
        //                        cfd_contract =>  null,
        //                               order => "e0bc5d5d-f285-42d3-aa85-6a1b76baf74c",
        //                            quantity => "1.0000000000",
        //                                $side => "buy",
        //                          instrument => "ETHUSD.SPOT",
        //                               $price => "3278.20000000",
        //                             created => "2021-09-13T04:55:38.101368Z",
        //                              origin => "rest",
        //                      executing_unit => "test1"                                 } ) }
        //
        // When returnes from fetchmytrades
        // array("trade_id":"2ec7679f-8e52-4020-a1fd-44ad3b24c0b3",
        // "rfq_id":null,
        // "order":"e0bc5d5d-f285-42d3-aa85-6a1b76baf74c",
        // "quantity":"1.0000000000",
        // "$side":"buy",
        // "instrument":"ETHUSD.SPOT",
        // "$price":"3278.20000000",
        // "created":"2021-09-13T04:55:38.101368Z",
        // "end_client_id":"",
        // "client_rfq_id":null,
        // "client_order_id":"e21732d8-c62b-4922-841e-42c9e8ffdf40",
        // "user":"Demo_Leonie",
        // "origin":"rest",
        // "executing_unit":"test1"),
        //
        $id = $this->safe_string($trade, 'trade_id');
        $amountString = $this->safe_string($trade, 'quantity');
        $amount = $this->parse_number($amountString);
        $side = $this->safe_string_lower($trade, 'side');
        $marketId = $this->safe_string($trade, 'instrument');
        $symbol = $this->safe_symbol($marketId, $market);
        $priceString = $this->safe_string($trade, 'price');
        $price = $this->parse_number($priceString);
        $timestamp = $this->parse8601($this->safe_string($trade, 'created'));
        $orderId = $this->safe_string($trade, 'order');
        $clientOrderId = $this->safe_string($trade, 'client_order_id'); // parent order must provide in params override
        $customer_id = $this->safe_string($trade, 'executing_unit');
        $cost = $this->parse_number(Precise::string_mul($priceString, $amountString));
        $type = $this->safe_string($trade, 'type'); // parent order must provide in params override
        $takerOrMaker = $this->safe_string($trade, 'takerOrMaker'); // parent order must provide in params override
        $fee = null;
        // $this->calculate_fee($symbol, $type, $side, $amount, $price, $takerOrMaker); // no fees for B2C2
        if ($fee !== null) {
            $fee->cost = $this->fee_to_precision($symbol, $fee->cost);
        }
        return array(
            'info' => $trade,
            'id' => $id,
            'customer_id' => $customer_id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'order' => $orderId,
            'clientOrderId' => $clientOrderId,
            'type' => $type,
            'side' => $side,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'takerOrMaker' => $takerOrMaker,
            'fee' => $fee,
        );
    }

    public function parse_ledger_entry_type($type) {
        // Currently four $types of ledgers are possible:
        // trade (ledger resulting of a trade, there are two ledgers per trade)
        // transfer (either you sent funds to B2C2, or B2C2 sent you funds)
        // funding (funding rate charged for your open positions if you have some, CFD only)
        // realised_pnl (Realised P&L, CFD only)
        $types = array(
            'transfer' => 'transaction',
            'funding' => 'funding',
            'realised_pnl' => 'margin',
            'trade' => 'trade',
        );
        return $this->safe_string($types, $type, $type);
    }

    public function parse_ledger_entry($item, $currency = null) {
        // [
        //     array(
        //       "transaction_id" => "3b8c41be-1bae-45aa-a6fb-86fce3ebef85",
        //       "created" => "2021-07-23T13:36:24.889949Z",
        //       "reference" => "57912eaf-02dc-461f-ad0d-8c636c01c997",
        //       "$currency" => "USD",
        //       "$amount" => "-595.2500000000000000",
        //       "$type" => "trade",
        //       "group" => "trading"
        //     ),
        //     array(
        //       "transaction_id" => "cd92a3d5-a782-4bb2-86b2-815d76667658",
        //       "created" => "2021-07-23T13:36:24.889949Z",
        //       "reference" => "57912eaf-02dc-461f-ad0d-8c636c01c997",
        //       "$currency" => "XRP",
        //       "$amount" => "1000.0000000000000000",
        //       "$type" => "trade",
        //       "group" => "trading"
        //     ),
        $id = $this->safe_string($item, 'transaction_id');
        $timestamp = $this->parse8601($this->safe_string($item, 'created'));
        $referenceId = $this->safe_string($item, 'reference');
        $currencyId = $this->safe_string($item, 'currency');
        $code = $this->safe_currency_code($currencyId, $currency); // not sure why we need the $currency param?!
        $type = $this->parse_ledger_entry_type($this->safe_string($item, 'type'));
        $account = $this->safe_string($item, 'group');
        $amount = $this->safe_number($item, 'amount');
        $direction = null;
        if ($amount < 0) {
            $direction = 'out';
            $amount = abs($amount);
        } else {
            $direction = 'in';
        }
        // $status = $this->parseTransactionStatus ($this->safe_string($item, 'transactStatus'));
        return array(
            'id' => $id,
            'info' => $item,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'direction' => $direction,
            'account' => $account,
            'referenceId' => $referenceId,
            'referenceAccount' => null,
            'type' => $type,
            'currency' => $code,
            'amount' => $amount,
            'before' => null,
            'after' => null,
            'status' => 'settled',
            'fee' => null,
        );
    }

    public function fetch_ledger($code = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
        }
        // We don't need to put these in $request, python sends
        // 'created__lt' => null,
        // 'type' => null,
        $request = array(
            'limit' => $limit,
        );
        if ($since !== null) {
            $request['since'] = $since;
            $request['created__gte'] = $since;
        }
        if ($currency !== null) {
            $request['currency'] = $currency['code'];
        }
        $response = yield $this->privateGetLedger (array_merge($request, $params));
        $response_next = yield $this->fetch_recursively();
        if ($response_next !== null) {
            $response[] = $response_next;
        }
        return $this->parse_ledger($response, $currency, $since, $limit);
    }

    public function withdraw($code, $amount, $address, $tag = null, $params = array ()) {
        // Request a settlement for a given $amount to the given destination in a given $currency->
        // Your account must exhibit a sufficient balance in the requested $currency->
        // Note that for non approved addresses, the $amount can only be lower than 0.1.
        // The address_protocol parameter is either “Omni” or “ERC20” and only used for UST settlement requests.
        // For other currencies, leave null. The address_suffix is the memo or the $tag of the $address as entered on the website.
        // post_data = {
        //     'amount' => '1000',
        //     'currency' => 'XRP',
        //     'destination_address' => {
        //         'address_value' => 'rUQngTebGgF1tCexhuPaQBr5MufweybMom',
        //         'address_suffix' => 'tag0',
        //         'address_protocol' => None
        //     }
        // }
        // Fiat withdrawal
        // post_data = {
        //     'amount' => '1000',
        //     'currency' => 'USD',
        //     'destination_bank_account' => 'USD Bank Account'
        // }
        // Response:
        // {
        //     "$amount" => "1000.00000000",
        //     "$currency" => "XRP",
        //     "withdrawal_id" => "5c7e90cc-a8d6-4db5-8348-44053b2dcbdf",
        //     "reference" => "",
        //     "settled" => false,
        //     "created" => "2021-06-09T09:46:00.162599Z",
        //     "destination_address" => array(
        //       "address_value" => "rUQngTebGgF1tCexhuPaQBr5MufweybMom",
        //       "address_suffix" => "tag0",
        //       "address_protocol" => null
        //     ),
        //     "destination_bank_account" => null
        //   }
        $this->check_address($address);
        yield $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'amount' => $amount,
            'currency' => $currency['id'],
        );
        $dest = array(
            'address_value' => $address,
        );
        if ($tag !== null) {
            $request['addressTag'] = $tag;
        }
        if ($currency === 'UST') {
            $request['address_protocol'] = 'ERC20';
        }
        $request['destination_address'] = $dest;
        $response = yield $this->privatePostWithdrawal (array_merge($request, $params));
        return array(
            'info' => $response,
            'id' => $this->safe_string($response, 'withdrawal_id'),
        );
    }

    public function fetch_withdrawals($code = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $currency = null;
        $request = array(
            'limit' => $limit,
        );
        $response = yield $this->privateGetWithdrawal (array_merge($request, $params));
        $response_next = yield $this->fetch_recursively();
        if ($response_next !== null) {
            $response[] = $response_next;
        }
        return $this->parseWithdrawals ($response, $currency, $since, $limit);
    }

    public function parse_withdrawal($transaction, $currency = null) {
        // array(
        //     array(
        //       "$amount" => "2.00000000",
        //       "$currency" => "BTC",
        //       "destination_address" => "0xC323E80eF4deC2195G239F4f1e830417D294F841",
        //       "destination_bank_account" => null,
        //       "reference" => "",
        //       "settled" => false,
        //       "created" => "2021-06-09T09:46:00.162599Z",
        //       "withdrawal_id" => "ed846746-f7e0-4af9-85bb-36732e60d6d8"
        //     ),
        //     {
        //       "$amount" => "10.00000000",
        //       "$currency" => "BTC",
        //       "destination_address" => null,
        //       "destination_bank_account" => "EUR BA",
        //       "reference" => "",
        //       "settled" => true,
        //       "created" => "2021-06-09T09:46:00.162599Z",
        //       "withdrawal_id" => "b4426ff2-19c6-48ca-8b07-2c344dc34ecb"
        //     }
        //   )
        $amount = $this->safe_number($transaction, 'amount');
        $currencyId = $this->safe_string($transaction, 'currency');
        $code = $this->safe_currency_code($currencyId, $currency);
        $address = $this->safe_string($transaction, 'destination_address');
        $updated = null;
        $tag = $this->safe_string($transaction, 'reference'); // set but unused
        if ($tag !== null) {
            if (strlen($tag) < 1) {
                $tag = null;
            }
        }
        $status = 'pending';
        if ($transaction['settled'] === true) {
            $status = 'settled';
        }
        $timestamp = $this->parse8601($this->safe_string($transaction, 'applyTime'));
        $id = $this->safe_string($transaction, 'withdrawal_id');
        return array(
            'info' => $transaction,
            'id' => $id,
            'txid' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'address' => $address,
            'addressTo' => $address,
            'addressFrom' => null,
            'tag' => $tag,
            'tagTo' => $tag,
            'tagFrom' => null,
            'type' => 'withdrawal',
            'amount' => $amount,
            'currency' => $code,
            'status' => $status,
            'updated' => $updated,
            'internal' => false,
            'fee' => null,
        );
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $query = $this->omit($params, $this->extract_params($path));
        $url = $this->implode_hostname($this->urls['api'][$api]) . '/';
        $url .= $this->implode_params($path, $params);
        if ($api === 'private') {
            if ($method === 'GET') {
                $headers = array(
                    'Authorization' => 'Token ' . $this->apiKey,
                );
                if ($query) {
                    $url .= '?' . $this->urlencode($query);
                }
            } else if ($method === 'POST') {
                $headers = array(
                    'Content-Type' => 'application/json',
                    'Authorization' => 'Token ' . $this->apiKey,
                );
                if ($params) {
                    $body = $this->json($query);
                }
            }
        }
        $r = array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
        return $r;
    }
}
