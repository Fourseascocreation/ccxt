<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\okexchange as Exchange;
use React\Async;
use React\Promise\PromiseInterface;

class okexchange extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'okexchange',
            'name' => 'OK-EX',
            'country' => array( 'IR' ),
            'rateLimit' => 1000,
            'version' => '1',
            'certified' => false,
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => false,
                'cancelOrders' => false,
                'createDepositAddress' => false,
                'createOrder' => false,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'editOrder' => false,
                'fetchBalance' => false,
                'fetchBorrowInterest' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchLedger' => false,
                'fetchLedgerEntry' => false,
                'fetchLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => false,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => false,
                'fetchOrder' => false,
                'fetchOrderBook' => true,
                'fetchOrders' => false,
                'fetchOrderTrades' => 'emulated',
                'fetchPositions' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchWithdrawals' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'comment' => 'This comment is optional',
            'urls' => array(
                'logo' => 'https://cdn.arz.digital/cr-odin/img/exchanges/okexchange/64x64.png',
                'api' => array(
                    'public' => 'https://api.ok-ex.io',
                    'ohlcv' => 'https://azapi.ok-ex.io',
                ),
                'www' => 'https://ok-ex.io/',
                'doc' => array(
                    'https://docs.ok-ex.io',
                ),
            ),
            'timeframes' => array(
                '1m' => '1m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '2h' => '2h',
                '4h' => '4h',
                '6h' => '6h',
                '12h' => '12h',
                '1d' => '1d',
                '3d' => '3d',
                '1w' => '1w',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'oapi/v1/market/tickers' => 1,
                        'oapi/v1/otc/tickers' => 1,
                        'sno/oapi/market/candle' => 1,
                        'oapi/v1/market/orderbook' => 1,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.001'),
                    'taker' => $this->parse_number('0.001'),
                ),
            ),
        ));
    }

    public function fetch_markets(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * retrieves data on all $markets for okexchange
             * @see https://docs.ok-ex.io/#available-coin
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing $market data
             */
            $response = Async\await($this->publicGetOapiV1MarketTickers ($params));
            $markets = $this->safe_value($response, 'tickers');
            $result = array();
            for ($i = 0; $i < count($markets); $i++) {
                $market = Async\await($this->parse_market($markets[$i]));
                $result[] = $market;
            }
            return $result;
        }) ();
    }

    public function parse_market($market): array {
        $id = $this->safe_string($market, 'symbol');
        $symbol = $this->safe_string($market, 'symbol');
        list($baseId, $quoteId) = explode('-', $symbol);
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $baseId = strtolower($baseId);
        $quoteId = strtolower($quoteId);
        return array(
            'id' => $id,
            'symbol' => $base . '/' . $quote,
            'base' => $base,
            'quote' => $quote,
            'settle' => null,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => null,
            'type' => 'spot',
            'spot' => true,
            'margin' => false,
            'swap' => false,
            'future' => false,
            'option' => false,
            'active' => true,
            'contract' => false,
            'linear' => null,
            'inverse' => null,
            'contractSize' => null,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => null,
                'price' => null,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => null,
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => null,
            'info' => $market,
        );
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price tickers for multiple $markets, statistical information calculated over the past 24 hours for each market
             * @see https://docs.ok-ex.io/#available-coin
             * @param {string[]|null} $symbols unified $symbols of the $markets to fetch the $ticker for, all market tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
             */
            Async\await($this->load_markets());
            if ($symbols !== null) {
                $symbols = $this->market_symbols($symbols);
            }
            $response = Async\await($this->publicGetOapiV1MarketTickers ($params));
            $markets = $this->safe_value($response, 'tickers');
            $result = array();
            for ($index = 0; $index < count($markets); $index++) {
                $ticker = Async\await($this->parse_ticker($markets[$index]));
                $symbol = $ticker['symbol'];
                $result[$symbol] = $ticker;
            }
            return $this->filter_by_array_tickers($result, 'symbol', $symbols);
        }) ();
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
             * @see https://docs.ok-ex.io/#available-coin
             * @param {string} $symbol unified $symbol of the market to fetch the $ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structure~
             */
            $ticker = Async\await($this->fetch_tickers(array( $symbol )));
            return $ticker[$symbol];
        }) ();
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        //
        //     {
        //      $symbol => "USDT-IRT",
        //      $last => "61338.0",
        //      best_ask => "61338.0",
        //      best_bid => "61338.0",
        //      open_24h => "61419",
        //      high_24h => 61739,
        //      low_24h => 60942,
        //      vol_24h_pair => 11017655160,
        //      vol_24h => 17968,
        //      ts => 1715074621
        //     }
        //
        $marketType = 'spot';
        $marketId = $this->safe_string($ticker, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market, null, $marketType);
        $high = $this->safe_string($ticker, 'high_24h');
        $low = $this->safe_string($ticker, 'low_24h');
        $bid = $this->safe_string($ticker, 'best_bid');
        $ask = $this->safe_string($ticker, 'best_ask');
        $open = $this->safe_string($ticker, 'open_24h');
        $last = $this->safe_string($ticker, 'last');
        $quoteVolume = null;
        $baseVolume = null;
        if ($symbol !== 'USDT-IRT') {
            $quoteVolume = $this->safe_string($ticker, 'vol_24h_pair');
            $baseVolume = $this->safe_string($ticker, 'vol_24h');
        } else {
            $ticker['ts'] = $ticker['ts'] * 1000;
            $high = $low;
        }
        $timestamp = $this->safe_integer($ticker, 'ts');
        return $this->safe_ticker(array(
            'symbol' => str_replace('-', '/', $symbol),
            'timestamp' => $timestamp,
            'datetime' => null,
            'high' => $high,
            'low' => $low,
            'bid' => $this->safe_string($bid, 0),
            'bidVolume' => null,
            'ask' => $this->safe_string($ask, 0),
            'askVolume' => null,
            'vwap' => null,
            'open' => $open,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            /**
             * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
             * @see https://docs.ok-ex.io/#trade
             * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
             * @param {string} $timeframe the length of time each candle represents
             * @param {int} [$since] timestamp in ms of the earliest candle to fetch
             * @param {int} [$limit] the maximum amount of candles to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int[][]} A list of candles ordered, open, high, low, close, volume
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $endTime = Date.now ();
            $request = array(
                'symbol' => str_replace('/', '', $symbol),
                'startTime' => $endTime - 24 * 60 * 60 * 1000,
                'endTime' => $endTime,
                'interval' => '1m',
                'limit' => 500,
                'prov' => 0,
            );
            if ($since !== null) {
                $request['startTime'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            if ($timeframe !== null) {
                $request['interval'] = $timeframe;
            }
            $response = Async\await($this->publicGetSnoOapiMarketCandle ($request));
            $ohlcvs = $this->safe_list($response, 'data', array());
            return $this->parse_ohlcvs($ohlcvs, $market, $timeframe, $since, $limit);
        }) ();
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $limit, $params) {
            /**
             * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data for multiple markets
             * @see https://docs.ok-ex.io/#orderbooks
             * @param {string[]|null} symbols list of unified $market symbols, all symbols fetched if null, default is null
             * @param {int} [$limit] max number of entries per orderbook to return, default is null
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market $symbol
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => str_replace('/', '', $market['symbol']),
            );
            $response = Async\await($this->publicGetOapiV1MarketOrderbook ($request));
            $orderBook = $this->safe_dict($response, 'books', array());
            $timestamp = Date.now ();
            return $this->parse_order_book($orderBook, $symbol, $timestamp);
        }) ();
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $query = $this->omit($params, $this->extract_params($path));
        $url = $this->urls['api']['public'] . '/' . $path;
        if ($path === 'sno/oapi/market/candle') {
            $url = $this->urls['api']['ohlcv'] . '/' . $path . '?' . $this->urlencode($query);
        }
        if ($path === 'oapi/v1/market/orderbook') {
            $url = $url . '?' . $this->urlencode($query);
        }
        $headers = array( 'Content-Type' => 'application/json' );
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
