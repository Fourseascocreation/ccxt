<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\InsufficientFunds;
use \ccxt\InvalidOrder;
use \ccxt\OrderNotFound;

class ataix extends Exchange {

    public function describe () {
        return array_replace_recursive(parent::describe (), array(
            'id' => 'ataix',
            'name' => 'ATAIX',
            'countries' => ['EE'],
            'rateLimit' => 600 / 10 / 60 * 1000,
            'enableRateLimit' => false,
            'verbose' => false,
            'version' => 'v1',
            'has' => array(
                'CORS' => false,
                'fetchMarkets' => true,
                'fetchCurrencies' => true,
                'fetchOrderBook' => true,
                'fetchTickers' => true,
                'fetchTicker' => true,
                'fetchTrades' => true,
                'fetchMyTrades' => true,
                'createOrder' => true,
                'cancelOrder' => true,
                'fetchOrder' => true,
                'fetchOrders' => true,
                'fetchClosedOrders' => true,
                'fetchOpenOrders' => true,
                'withdraw' => true,
                'deposit' => false,
                'fetchDepositAddress' => true,
                'createDepositAddress' => true,
                'fetchOHLCV' => true,
            ),
            'timeframes' => array(
                '1m' => 'M1',
                '3m' => 'M3',
                '5m' => 'M5',
                '15m' => 'M15',
                '30m' => 'M30',
                '1h' => 'H1',
                '4h' => 'H4',
                '1d' => 'D1',
                '1w' => 'D7',
            ),
            'urls' => array(
                'logo' => 'https://ataix.com/assets/images_new/ataix_dark.svg',
                'api' => 'https://api.ataix.com/api',
                'www' => 'https://ataix.com',
                // 'referral' => 'https://ataix.com/r/__',
                'doc' => 'https://ataix.com/api-docs',
                'fees' => array(
                    'https://ataix.com/fees',
                ),
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'symbols',
                        'currencies',
                        'prices',
                        'prices/{symbol}',
                        'trades',
                        'book/{symbol}',
                        'chart',
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'user/balances',
                        'user/trades',
                        'user/deposit/{currency}',
                        'orders/{orderID}',
                        'orders/history',
                        'orders',
                    ),
                    'post' => array(
                        'orders',
                        'user/deposit/{currency}',
                        'user/withdraw',
                    ),
                    'delete' => array(
                        'orders/{orderID}',
                    ),
                ),
            ),
            'exceptions' => array(
                'exact' => array(
                    'ORDER_NOT_FOUND' => '\\ccxt\\OrderNotFound',
                ),
                'broad' => array(
                ),
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => false,
            ),
            'options' => array(
                'defaultTimeInForce' => 'IOC',
            ),
        ));
    }

    public function fetch_markets ($params = array ()) {
        $response = $this->publicGetSymbols ($params);
        $markets = $this->safe_value($response, 'result', array());
        $result = array();
        for ($i = 0; $i < count($markets); $i++) {
            $market = $markets[$i];
            $symbol = $this->safe_string($market, 'symbol');
            $baseId = $this->safe_string($market, 'base');
            $quoteId = $this->safe_string($market, 'quote');
            $lot = $this->safe_float($market, 'lotSize');
            $pricePrecision = $this->safe_float($market, 'pricePrecision');
            $step = pow(10, -$pricePrecision);
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $result[] = array(
                'info' => $market,
                'id' => str_replace('/', '-', $symbol),
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'lot' => $lot,
                'step' => $step,
                'active' => $market['isActive'],
                'precision' => array(
                    'amount' => (string) $this->precision_from_string($market['lotSize']),
                    'price' => $pricePrecision,
                ),
                'limits' => array(
                    'amount' => array(
                        'min' => $this->safe_float($market, 'minTradeSize'),
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => $step,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
            );
        }
        return $result;
    }

    public function fetch_currencies ($params = array ()) {
        $response = $this->publicGetCurrencies ($params);
        $currencies = $this->safe_value($response, 'result', array());
        $result = array();
        for ($i = 0; $i < count($currencies); $i++) {
            $currency = $currencies[$i];
            $id = $this->safe_string($currency, 'symbol');
            $code = $this->safe_currency_code($id);
            $result[$code] = (array(
                'info' => $currencies[$i],
                'id' => $id,
                'code' => $code,
                'name' => $this->safe_string($currency, 'name'),
                'active' => $currency['isActive'],
                'fee' => null,
                'precision' => $this->safe_integer($currency, 'amountPrecision'),
                'limits' => array(
                    'amount' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'withdraw' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
            ));
        }
        return $result;
    }

    public function fetch_balance ($params = array ()) {
        $this->load_markets();
        $response = $this->privateGetUserBalances ($params);
        $balance = $this->safe_value($response, 'result', array());
        return $this->parse_balance($balance);
    }

    public function parse_balance ($balance) {
        $result = array( 'info' => $balance, 'free' => array(), 'used' => array(), 'total' => array());
        $currencies = is_array($balance->available) ? array_keys($balance->available) : array();
        for ($i = 0; $i < count($currencies); $i++) {
            $code = $currencies[$i];
            // var_dump ($this->asFloat (balances.available[$code]));
            $fValue = $this->asFloat ($balance->available[$code]);
            $tValue = $this->asFloat ($balance->total[$code]);
            $uValue = $this->asFloat ($this->decimal_to_precision($this->sum ($tValue, -$fValue), 3, 6));
            $result[$code] = array(
                'free' => $fValue,
                'used' => $uValue,
                'total' => $tValue,
            );
            $result->free[$code] = $fValue;
            $result->used[$code] = $uValue;
            $result->total[$code] = $tValue;
        }
        return $result;
    }

    public function fetch_order_book ($symbol, $limit = null, $params = array ()) {
        $this->load_markets();
        $response = $this->publicGetBookSymbol (array_merge(array(
            'symbol' => $this->market_id($symbol),
        ), $params));
        $orderbook = $this->safe_value($response, 'result', array());
        // var_dump ($orderbook);
        return $this->parse_order_book($orderbook, null, 'buy', 'sell', 'price', 'quantity');
    }

    public function fetch_ohlcv ($symbol, $timeframe = '1d', $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array(
            'symbol' => $symbol,
            'period' => $this->timeframes[$timeframe],
            'limit' => $limit || 1000,
        );
        $response = $this->publicGetChart (array_merge($request, $params));
        $raw = $this->safe_value($response, 'result', array());
        return $this->parse_ohlcvs($raw, $market, $timeframe, $since, $limit);
    }

    public function parse_ohlcv ($ohlcv, $market = null, $timeframe = '1m', $since = null, $limit = null) {
        // var_dump ($ohlcv);
        return [
            $this->parse8601 ($ohlcv['timestamp']),
            $this->safe_float($ohlcv, 'open'),
            $this->safe_float($ohlcv, 'max'),
            $this->safe_float($ohlcv, 'min'),
            $this->safe_float($ohlcv, 'close'),
            $this->safe_float($ohlcv, 'volume'),
        ];
    }

    public function fetch_tickers ($symbols = null, $params = array ()) {
        $this->load_markets();
        $response = $this->publicGetPrices ($params);
        $tickers = $this->safe_value($response, 'result', array());
        $ids = is_array($tickers) ? array_keys($tickers) : array();
        $result = array();
        for ($i = 0; $i < count($ids); $i++) {
            $id = $ids[$i];
            $ticker = $tickers[$id];
            $symbol = $this->safe_string($ticker, 'symbol');
            $market = $this->markets_by_id[$symbol];
            $result[$symbol] = $this->parse_ticker($ticker, $market);
        }
        return $result;
    }

    public function fetch_ticker ($symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array( 'symbol' => $this->market_id($symbol) );
        $response = $this->publicGetPricesSymbol (array_merge($request, $params));
        $tickers = $this->safe_value($response, 'result', array());
        return $this->parse_ticker($tickers[0], $market);
    }

    public function parse_ticker ($ticker, $market = null) {
        $datetime = $this->safe_string($ticker, 'timestamp');
        $last = $this->safe_float($ticker, 'last');
        $open = $this->safe_float($ticker, 'open');
        $volume = $this->safe_float($ticker, 'volume');
        return array(
            'symbol' => $this->safe_string($ticker, 'symbol'),
            'timestamp' => $this->parse8601 ($datetime),
            'datetime' => $datetime,
            'high' => $this->safe_float($ticker, 'high'),
            'low' => $this->safe_float($ticker, 'low'),
            'bid' => $this->safe_float($ticker, 'bid'),
            'bidVolume' => null,
            'ask' => $this->safe_float($ticker, 'ask'),
            'askVolume' => null,
            'vwap' => null,
            'open' => $open,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => $this->safe_float($ticker, 'priceChange'),
            'average' => null,
            'baseVolume' => $this->safe_float($volume, 'base'),
            'quoteVolume' => $this->safe_float($volume, 'quote'),
            'info' => $ticker,
        );
    }

    public function fetch_trades ($symbol, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $this->omit ($params, 'page');
        $request = array(
            'symbol' => $this->market_id($symbol),
            'limit' => $limit,
        );
        if ($since !== null) {
            $request['startDate'] = $since;
        }
        $response = $this->publicGetTrades (array_merge($request, $params));
        $trades = $this->safe_value($response, 'result', array());
        // return $trades;
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function fetch_my_trades ($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = null;
        if ($symbol) {
            $market = $this->market ($symbol);
            $symbol = $this->market_id($symbol);
        } else {
            $symbol = 'any';
        }
        $page = $this->safe_integer($params, 'page', 1);
        $this->omit ($params, 'page');
        $request = array(
            'symbol' => $symbol,
            'startDate' => $since,
            'endDate' => $this->milliseconds (),
            'page' => $page,
            'itemsPerPage' => $limit,
        );
        $response = $this->privateGetUserTrades (array_merge($request, $params));
        $trades = $this->safe_value($this->safe_value($response, 'result'), 'trades', array());
        // return $trades;
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function parse_trade ($trade, $market = null) {
        $datetime = $this->safe_string($trade, 'created');
        $price = $this->safe_float($trade, 'price');
        $amount = $this->safe_float($trade, 'quantity');
        $cost = $price * $amount; // total $cost (including fees), `$price * $amount`
        return array(
            'info' => $trade,
            'id' => $this->safe_string($trade, 'tradeId'),
            'order' => null,
            'timestamp' => $this->parse8601 ($datetime),
            'datetime' => $datetime,
            'symbol' => $this->safe_string($trade, 'symbol', $this->safe_string($trade, 'pair')),
            'type' => null,
            'side' => null,
            'takerOrMaker' => null,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'fee' => array(
                'cost' => $this->safe_float($trade, 'fee'),
                'currency' => null,
                'rate' => null,
            ),
        );
    }

    public function create_order ($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $this->load_markets();
        // $market = $this->market ($symbol);
        $amount = $this->asFloat ($amount);
        $request = array(
            'symbol' => $symbol,
            'side' => $side,
            'quantity' => $amount,
            'type' => $type,
        );
        if ($type === 'limit') {
            $request['price'] = $this->price_to_precision($symbol, $price);
        } else {
            $request['subType'] = $this->safe_string($params, 'subType', strtolower($this->options['defaultTimeInForce']));
            $this->omit ($params, 'subType');
        }
        $response = $this->privatePostOrders (array_merge($request, $params));
        $order = $this->parse_order($this->safe_value($response, 'result', array()));
        if ($order['status'] === 'rejected') {
            throw new InvalidOrder($this->id . ' $order was rejected by the exchange ' . $this->json ($order));
        }
        return $order;
    }

    public function cancel_order ($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            'orderID' => $id,
        );
        $response = $this->privateDeleteOrdersOrderID (array_merge($request, $params));
        return $this->parse_order($this->safe_value($response, 'result', array()));
    }

    public function fetch_order ($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $response = $this->privateGetOrdersOrderID (array( 'orderID' => $id ));
        $order = $this->safe_value($response, 'result', array());
        if ($order) {
            return $this->parse_order($order);
        }
        throw new OrderNotFound($this->id . ' fetchOrder() error => ' . $this->response);
    }

    public function fetch_orders ($symbol = null, $since = null, $limit = null, $params = array ()) {
        $market = null;
        if ($symbol) {
            $market = $this->market ($symbol);
            $symbol = $this->market_id($symbol);
        } else {
            $symbol = 'any';
        }
        $page = $this->safe_integer($params, 'page', 1);
        $this->omit ($params, 'page');
        $request = array(
            'symbol' => $symbol,
            'startDate' => $since,
            'endDate' => $this->milliseconds (),
            // 'side' => 'any',
            // 'type' => 'any',
            // 'userId' => 'any',
            'page' => $page,
            'itemsPerPage' => $limit || 10,
            'hideCanceled' => false,
        );
        $response = $this->privateGetOrdersHistory (array_merge($request, $params));
        $orders = $this->safe_value($response, 'result', array());
        return $this->parse_orders($orders, $market, $since, $limit);
    }

    public function fetch_closed_orders ($symbol = null, $since = null, $limit = null, $params = array ()) {
        $market = null;
        if ($symbol) {
            $market = $this->market ($symbol);
            $symbol = $this->market_id($symbol);
        } else {
            $symbol = 'any';
        }
        $page = $this->safe_integer($params, 'page', 1);
        $this->omit ($params, 'page');
        $request = array(
            'symbol' => $symbol,
            'startDate' => $since,
            'endDate' => $this->milliseconds (),
            // 'side' => 'any',
            // 'type' => 'any',
            // 'userId' => 'any',
            'page' => $page,
            'itemsPerPage' => $limit || 10,
            'hideCanceled' => true,
        );
        $response = $this->privateGetOrdersHistory (array_merge($request, $params));
        $orders = $this->safe_value($response, 'result', array());
        return $this->parse_orders($orders, $market, $since, $limit);
    }

    public function fetch_open_orders ($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = null;
        if ($symbol) {
            $market = $this->market ($symbol);
            $symbol = $this->market_id($symbol);
        } else {
            $symbol = 'any';
        }
        $page = $this->safe_integer($params, 'page', 1);
        $this->omit ($params, 'page');
        $request = array(
            'symbol' => $symbol,
            // 'side' => '',
            // 'type' => '',
            // 'userId' => '',
            'page' => $page,
            'itemsPerPage' => $limit || 10,
        );
        $response = $this->privateGetOrders (array_merge($request, $params));
        $orders = $this->safe_value($response, 'result', array());
        return $this->parse_orders($orders, $market, $since, $limit);
    }

    public function parse_order_status ($status) {
        $statuses = array(
            // 'inactive':
            'new' => 'open',
            'partial' => 'closed',
            'filled' => 'closed',
            'cancelled' => 'canceled',
            'rejected' => 'rejected',
        );
        return $this->safe_string($statuses, $status);
    }

    public function parse_order ($order, $market = null) {
        $datetime = $this->safe_string($order, 'created');
        $symbol = $this->safe_string($order, 'symbol');
        $status = $this->parse_order_status($this->safe_string($order, 'status'));
        $price = $this->safe_float($order, 'price');
        $avgPrice = $this->safe_float($order, 'averagePrice');
        $price = $price || $avgPrice;
        $amount = $this->safe_float($order, 'quantity');
        $amountFilled = $this->safe_float($order, 'cumQuantity');
        $remaining = $this->sum ($amount, -$amountFilled);
        $cost = $price * $amountFilled;
        $id = $this->safe_string($order, 'orderID');
        $type = $this->safe_string($order, 'type');
        $side = $this->safe_string($order, 'side');
        return array(
            'id' => $id,
            'info' => $order,
            'timestamp' => $this->parse8601 ($datetime),
            'datetime' => $datetime,
            'lastTradeTimestamp' => null,
            'status' => $status,
            'symbol' => $symbol,
            'type' => $type,
            'side' => $side,
            'price' => $price,
            'cost' => $cost,
            'amount' => $amount,
            'filled' => $amountFilled,
            'remaining' => $remaining,
            'fee' => null,
        );
    }

    public function fetch_deposit_address ($code, $params = array ()) {
        $this->load_markets();
        $currency = $this->currency ($code);
        $request = array(
            'currency' => $currency['id'],
        );
        $response = $this->privateGetUserDepositCurrency (array_merge($request, $params));
        $address = $this->safe_value($response, 'result')['address'];
        $this->check_address($address);
        return array(
            'currency' => $code,
            'address' => $address,
            'tag' => null,
            'info' => $response,
        );
    }

    public function create_deposit_address ($code, $params = array ()) {
        $this->load_markets();
        $currency = $this->currency ($code);
        $request = array(
            'currency' => $currency['id'],
        );
        $response = $this->privatePostUserDepositCurrency (array_merge($request, $params));
        $address = $this->safe_value($response, 'result')['address'];
        $this->check_address($address);
        return array(
            'currency' => $code,
            'address' => $address,
            'tag' => null,
            'info' => $response,
        );
    }

    public function withdraw ($code, $amount, $address, $tag = null, $params = array ()) {
        $this->check_address($address);
        $this->load_markets();
        $currency = $this->currency ($code);
        $request = array(
            'currency' => $currency['id'],
            'amount' => $amount,
            'address' => $address,
        );
        $response = $this->privatePostUserWithdraw (array_merge($request, $params));
        return array(
            'info' => $response,
            'id' => $this->safe_string($response, 'result'),
        );
    }

    public function sign ($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = '/' . $this->implode_params($path, $params);
        $query = $this->omit ($params, $this->extract_params($path));
        if ($api === 'public') {
            if ($query) {
                $url .= '?' . $this->urlencode ($query);
            }
        } else {
            $this->check_required_credentials();
            $headers = array(
                'Authorization' => 'api-ax <' . $this->apiKey . '>',
            );
            if ($method === 'GET') {
                $url .= '?' . $this->urlencode ($query);
            }
            if ($method === 'POST') {
                if ($query) {
                    $body = $this->json ($query);
                    $headers['Content-Type'] = 'application/json';
                    // application/x-www-form-urlencoded
                    // $body = $this->urlencode ($query);
                }
            }
        }
        $url = $this->urls['api'] . $url;
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function request ($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $response = $this->fetch2 ($path, $api, $method, $params, $headers, $body);
        if (is_array($response) && array_key_exists('code', $response)) {
            if (is_array($response) && array_key_exists('ExecutionReport', $response)) {
                if ($response['ExecutionReport']['orderRejectReason'] === 'orderExceedsLimit') {
                    throw new InsufficientFunds($this->id . ' ' . $this->json ($response));
                }
            }
            throw new ExchangeError($this->id . ' ' . $this->json ($response));
        }
        return $response;
    }

    public function handle_errors ($httpCode, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if (!$response) {
            return; // fallback to default error handler
        }
        $status = $this->safe_value($response, 'status', false);
        if (!$status) {
            $type = $response['type'];
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $type, $feedback);
            // $this->throw_broadly_matched_exception($this->exceptions['broad'], $response, $feedback);
            throw new ExchangeError($feedback); // unknown error
        }
    }
}
