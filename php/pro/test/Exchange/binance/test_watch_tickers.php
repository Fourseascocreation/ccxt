<?php
namespace ccxt;

// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

// -----------------------------------------------------------------------------
use React\Async;
use React\Promise;
use ccxt\pro;
include_once (__DIR__.'/../../../../../ccxt.php');
include_once (__DIR__.'/../../../../test/base/test_ticker.php');

function test_watch_tickers($exchange, $symbol) {
    return Async\async(function () use ($exchange, $symbol) {
        $method = 'watchTickers';
        $tests = [array(
            'name' => 'spot default - with symbols undefined',
            'symbols' => [],
            'params' => array(),
            ), array(
                'name' => 'default - with empty symbols array',
                'symbols' => [],
                'params' => array(),
            ), array(
                'name' => 'swap - all symbols',
                'symbols' => [],
                'params' => array(
                    'type' => 'swap',
                ),
            ), array(
                'name' => 'spot ticker with one symbol',
                'symbols' => [$symbol],
                'params' => array(
                    'name' => 'ticker',
                ),
            ), array(
                'name' => 'spot bookTicker with one symbol',
                'symbols' => [$symbol],
                'params' => array(
                    'name' => 'bookTicker',
                ),
            ), array(
                'name' => 'swap bookTicker with one symbol',
                'symbols' => ['BTC/USDT:USDT'],
                'params' => array(
                    'name' => 'bookTicker',
                ),
            ), array(
                'name' => 'spot ticker 1h window with one symbol',
                'symbols' => [$symbol],
                'params' => array(
                    'name' => 'ticker_1h',
                ),
            ), array(
                'name' => 'spot ticker 4h window with one symbol',
                'symbols' => [$symbol],
                'params' => array(
                    'name' => 'ticker_4h',
                ),
            ), array(
                'name' => 'spot ticker 1d window with one symbol',
                'symbols' => [$symbol],
                'params' => array(
                    'name' => 'ticker_1d',
                ),
            ), array(
                'name' => 'spot miniticker window with one symbol',
                'symbols' => [$symbol],
                'params' => array(
                    'name' => 'miniTicker',
                ),
            ), array(
                'name' => 'swap - miniticker with one symbol',
                'symbols' => ['BTC/USDT:USDT'],
                'params' => array(
                    'name' => 'miniTicker',
                ),
            ), array(
                'name' => 'delivery - all tickers',
                'symbols' => null,
                'params' => array(),
            )
        ];
        for ($i = 0; $i < count($tests); $i++) {
            $params = $tests[$i];
            $response = null;
            $now = $exchange->milliseconds();
            $ends = $now + 5000;
            while ($now < $ends) {
                try {
                    $response = Async\await($exchange->watch_tickers($params['symbols'], $params['params']));
                    assert(is_array($response), $exchange->id . ' ' . $method . ' ' . ' must return an object. ' . $exchange->json($response));
                    $values = is_array($response) ? array_values($response) : array();
                    for ($ii = 0; $ii < count($values); $ii++) {
                        $ticker = $values[$ii];
                        test_ticker($exchange, array(), $method, $ticker, $ticker['symbol']);
                    }
                } catch(\Throwable $e) {
                    $exchange->log('[FAILED] - TEST - ' . $exchange->id . ' ' . $method . ' ' . $params['name']);
                    throw $e;
                }
                $now = $exchange->milliseconds();
            }
            $exchange->close();
            $exchange->log('[OK] - TEST - ' . $exchange->id . ' ' . $method . ' ' . $params['name']);
        }
        return true;
    }) ();
}

test_watch_tickers (new pro\binance(array(
    'enableRateLimit' => true,
    'verbose' => false,
    'options' => array(
        'defaultType' => 'spot',
    ),
)), 'BTC/USDT');
