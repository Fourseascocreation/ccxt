<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import

class b2c2 extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'b2c2',
            'name' => 'B2C2',
            'countries' => array( 'GB' ),
            'has' => array(
                'fetchBalance' => true, // true
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/37808081-b87f2d9c-2e59-11e8-894d-c1900b7584fe.jpg',
                'api' => array(
                    'private' => 'https://api.uat.b2c2.net',
                ),
                'www' => 'https://b2c2.com',
                'doc' => 'https://docs.b2c2.net',
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => false,
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'balance',
                    ),
                    'post' => array(
                    ),
                ),
            ),
            'markets' => array(
                'BTCUSD.SPOT' => array( 'id' => 'btc', 'symbol' => 'BTCUSD.SPOT', 'base' => 'BTC', 'quote' => 'USD', 'baseId' => 'btc', 'quoteId' => 'usd' ),
            ),
            'exceptions' => array(
                '400' => '\\ccxt\\ExchangeError', // At least one parameter wasn't set
            ),
        ));
    }

    public function fetch_balance($params = array ()) {
        $this->load_markets();
        $response = $this->privateGetBalance ($params);
        // {
        //     "USD" => "0",
        //     "BTC" => "0",
        //     "JPY" => "0",
        //     "GBP" => "0",
        //     "ETH" => "0",
        //     "EUR" => "0",
        //     "CAD" => "0",
        //     "LTC" => "0",
        //     "XRP" => "0",
        //     "BCH" => "0"
        // }
        $result = array(
            'info' => $response,
            'timestamp' => $this->timestamp,
            'datetime' => null,
        );
        $assets = $response;
        $keys = is_array($assets) ? array_keys($assets) : array();
        for ($i = 0; $i < count($keys); $i++) {
            $balance = $assets[$keys[$i]];
            $code = $keys[$i];
            $account = $this->account();
            $account['free'] = $balance;
            $account['used'] = 0;
            $account['total'] = $balance;
            $result[$code] = $account;
        }
        return $this->parse_balance($result);
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $query = $this->omit($params, $this->extract_params($path));
        $url = $this->implode_hostname($this->urls['api'][$api]) . '/' . $path;
        if (($api === 'public') || ($api === 'markets')) {
            $url .= $this->implode_params($path, $params);
            if ($query) {
                $url .= '?' . $this->urlencode($query);
            }
        } else {
            $this->check_required_credentials();
            $headers = array(
                'Authorization' => 'Token ' . $this->apiKey,
            );
            if ($method === 'GET') {
                if ($query) {
                    $url .= '?' . $this->urlencode($query);
                }
            } else if ($method === 'POST') {
                $headers['Content-Type'] = 'application/json';
                $body = $this->json($query);
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
