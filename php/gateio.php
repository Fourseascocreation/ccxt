<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\ArgumentsRequired;
use \ccxt\BadRequest;
use \ccxt\InvalidAddress;
use \ccxt\NotSupported;

class gateio extends Exchange {

    public function describe () {
        return array_replace_recursive(parent::describe (), array(
            'id' => 'gateio',
            'name' => 'Gate.io',
            'countries' => array( 'KR' ),
            'rateLimit' => 10 / 3, // 300 requests per second or 3.33ms
            'version' => 'v4',
            'certified' => true,
            'pro' => true,
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/31784029-0313c702-b509-11e7-9ccc-bc0da6a0e435.jpg',
                'doc' => 'https://www.gate.io/docs/apiv4/en/index.html',
                'www' => 'https://gate.io/',
                'api' => array(
                    'public' => array(
                        'wallet' => 'https://api.gateio.ws/api/v4',
                        'futures' => 'https://api.gateio.ws/api/v4',
                        'margin' => 'https://api.gateio.ws/api/v4',
                        'delivery' => 'https://api.gateio.ws/api/v4',
                        'spot' => 'https://api.gateio.ws/api/v4',
                        'options' => 'https://api.gateio.ws/api/v4',
                    ),
                    'private' => array(
                        'withdrawals' => 'https://api.gateio.ws/api/v4',
                        'wallet' => 'https://api.gateio.ws/api/v4',
                        'futures' => 'https://api.gateio.ws/api/v4',
                        'margin' => 'https://api.gateio.ws/api/v4',
                        'delivery' => 'https://api.gateio.ws/api/v4',
                        'spot' => 'https://api.gateio.ws/api/v4',
                        'options' => 'https://api.gateio.ws/api/v4',
                    ),
                ),
                'test' => array(
                    'public' => array(
                        'futures' => 'https://fx-api-testnet.gateio.ws/api/v4',
                        'delivery' => 'https://fx-api-testnet.gateio.ws/api/v4',
                    ),
                    'private' => array(
                        'futures' => 'https://fx-api-testnet.gateio.ws/api/v4',
                        'delivery' => 'https://fx-api-testnet.gateio.ws/api/v4',
                    ),
                ),
                'referral' => array(
                    'url' => 'https://www.gate.io/ref/2436035',
                    'discount' => 0.2,
                ),
            ),
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => true,
                'swap' => true,
                'future' => true,
                'option' => null,
                'borrowMargin' => true,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'createMarketOrder' => false,
                'createOrder' => true,
                'createPostOnlyOrder' => true,
                'createStopLimitOrder' => true,
                'createStopMarketOrder' => false,
                'createStopOrder' => true,
                'fetchBalance' => true,
                'fetchBorrowRate' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchBorrowRates' => false,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => true,
                'fetchDeposits' => true,
                'fetchFundingHistory' => true,
                'fetchFundingRate' => true,
                'fetchFundingRateHistory' => true,
                'fetchFundingRates' => true,
                'fetchIndexOHLCV' => true,
                'fetchLeverage' => false,
                'fetchLeverageTiers' => true,
                'fetchMarginMode' => false,
                'fetchMarketLeverageTiers' => 'emulated',
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => true,
                'fetchMyTrades' => true,
                'fetchNetworkDepositAddress' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchPositionMode' => false,
                'fetchPositions' => true,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => true,
                'fetchTradingFee' => true,
                'fetchTradingFees' => true,
                'fetchTransactionFees' => true,
                'fetchWithdrawals' => true,
                'repayMargin' => true,
                'setLeverage' => true,
                'setMarginMode' => false,
                'transfer' => true,
                'withdraw' => true,
            ),
            'api' => array(
                'public' => array(
                    'wallet' => array(
                        'get' => array(
                            'wallet/currency_chains' => 1.5,
                        ),
                    ),
                    'spot' => array(
                        'get' => array(
                            'currencies' => 1,
                            'currencies/{currency}' => 1,
                            'currency_pairs' => 1,
                            'currency_pairs/{currency_pair}' => 1,
                            'tickers' => 1,
                            'order_book' => 1,
                            'trades' => 1,
                            'candlesticks' => 1,
                        ),
                    ),
                    'margin' => array(
                        'get' => array(
                            'currency_pairs' => 1,
                            'currency_pairs/{currency_pair}' => 1,
                            'cross/currencies' => 1,
                            'cross/currencies/{currency}' => 1,
                            'funding_book' => 1,
                        ),
                    ),
                    'futures' => array(
                        'get' => array(
                            '{settle}/contracts' => 1.5,
                            '{settle}/contracts/{contract}' => 1.5,
                            '{settle}/order_book' => 1.5,
                            '{settle}/trades' => 1.5,
                            '{settle}/candlesticks' => 1.5,
                            '{settle}/tickers' => 1.5,
                            '{settle}/funding_rate' => 1.5,
                            '{settle}/insurance' => 1.5,
                            '{settle}/contract_stats' => 1.5,
                            '{settle}/liq_orders' => 1.5,
                        ),
                    ),
                    'delivery' => array(
                        'get' => array(
                            '{settle}/contracts' => 1.5,
                            '{settle}/contracts/{contract}' => 1.5,
                            '{settle}/order_book' => 1.5,
                            '{settle}/trades' => 1.5,
                            '{settle}/candlesticks' => 1.5,
                            '{settle}/tickers' => 1.5,
                            '{settle}/insurance' => 1.5,
                        ),
                    ),
                    'options' => array(
                        'get' => array(
                            'underlyings' => 1.5,
                            'expirations' => 1.5,
                            'contracts' => 1.5,
                            'contracts/{contract}' => 1.5,
                            'settlements' => 1.5,
                            'settlements/{contract}' => 1.5,
                            'order_book' => 1.5,
                            'tickers' => 1.5,
                            'underlying/tickers/{underlying}' => 1.5,
                            'candlesticks' => 1.5,
                            'underlying/candlesticks' => 1.5,
                            'trades' => 1.5,
                        ),
                    ),
                ),
                'private' => array(
                    'withdrawals' => array(
                        'post' => array(
                            '' => 3000, // 3000 = 10 seconds
                        ),
                        'delete' => array(
                            '{withdrawal_id}' => 300,
                        ),
                    ),
                    'wallet' => array(
                        'get' => array(
                            'deposit_address' => 300,
                            'withdrawals' => 300,
                            'deposits' => 300,
                            'sub_account_transfers' => 300,
                            'withdraw_status' => 300,
                            'sub_account_balances' => 300,
                            'fee' => 300,
                            'total_balance' => 300,
                        ),
                        'post' => array(
                            'transfers' => 300,
                            'sub_account_transfers' => 300,
                        ),
                    ),
                    'spot' => array(
                        'get' => array(
                            'accounts' => 1,
                            'open_orders' => 1,
                            'orders' => 1,
                            'orders/{order_id}' => 1,
                            'my_trades' => 1,
                            'price_orders' => 1,
                            'price_orders/{order_id}' => 1,
                        ),
                        'post' => array(
                            'batch_orders' => 1,
                            'orders' => 1,
                            'cancel_batch_orders' => 1,
                            'price_orders' => 1,
                        ),
                        'delete' => array(
                            'orders' => 1,
                            'orders/{order_id}' => 1,
                            'price_orders' => 1,
                            'price_orders/{order_id}' => 1,
                        ),
                    ),
                    'margin' => array(
                        'get' => array(
                            'accounts' => 1.5,
                            'account_book' => 1.5,
                            'funding_accounts' => 1.5,
                            'loans' => 1.5,
                            'loans/{loan_id}' => 1.5,
                            'loans/{loan_id}/repayment' => 1.5,
                            'loan_records' => 1.5,
                            'loan_records/{load_record_id}' => 1.5,
                            'auto_repay' => 1.5,
                            'transferable' => 1.5,
                            'cross/accounts' => 1.5,
                            'cross/account_book' => 1.5,
                            'cross/loans' => 1.5,
                            'cross/loans/{loan_id}' => 1.5,
                            'cross/loans/repayments' => 1.5,
                            'cross/transferable' => 1.5,
                            'loan_records/{loan_record_id}' => 1.5,
                            'borrowable' => 1.5,
                            'cross/repayments' => 1.5,
                            'cross/borrowable' => 1.5,
                        ),
                        'post' => array(
                            'loans' => 1.5,
                            'merged_loans' => 1.5,
                            'loans/{loan_id}/repayment' => 1.5,
                            'auto_repay' => 1.5,
                            'cross/loans' => 1.5,
                            'cross/loans/repayments' => 1.5,
                            'cross/repayments' => 1.5,
                        ),
                        'patch' => array(
                            'loans/{loan_id}' => 1.5,
                            'loan_records/{loan_record_id}' => 1.5,
                        ),
                        'delete' => array(
                            'loans/{loan_id}' => 1.5,
                        ),
                    ),
                    'futures' => array(
                        'get' => array(
                            '{settle}/accounts' => 1.5,
                            '{settle}/account_book' => 1.5,
                            '{settle}/positions' => 1.5,
                            '{settle}/positions/{contract}' => 1.5,
                            '{settle}/orders' => 1.5,
                            '{settle}/orders/{order_id}' => 1.5,
                            '{settle}/my_trades' => 1.5,
                            '{settle}/position_close' => 1.5,
                            '{settle}/liquidates' => 1.5,
                            '{settle}/price_orders' => 1.5,
                            '{settle}/price_orders/{order_id}' => 1.5,
                            '{settle}/dual_comp/positions/{contract}' => 1.5,
                        ),
                        'post' => array(
                            '{settle}/positions/{contract}/margin' => 1.5,
                            '{settle}/positions/{contract}/leverage' => 1.5,
                            '{settle}/positions/{contract}/risk_limit' => 1.5,
                            '{settle}/dual_mode' => 1.5,
                            '{settle}/dual_comp/positions/{contract}' => 1.5,
                            '{settle}/dual_comp/positions/{contract}/margin' => 1.5,
                            '{settle}/dual_comp/positions/{contract}/leverage' => 1.5,
                            '{settle}/dual_comp/positions/{contract}/risk_limit' => 1.5,
                            '{settle}/orders' => 1.5,
                            '{settle}/price_orders' => 1.5,
                        ),
                        'delete' => array(
                            '{settle}/orders' => 1.5,
                            '{settle}/orders/{order_id}' => 1.5,
                            '{settle}/price_orders' => 1.5,
                            '{settle}/price_orders/{order_id}' => 1.5,
                        ),
                    ),
                    'delivery' => array(
                        'get' => array(
                            '{settle}/accounts' => 1.5,
                            '{settle}/account_book' => 1.5,
                            '{settle}/positions' => 1.5,
                            '{settle}/positions/{contract}' => 1.5,
                            '{settle}/orders' => 1.5,
                            '{settle}/orders/{order_id}' => 1.5,
                            '{settle}/my_trades' => 1.5,
                            '{settle}/position_close' => 1.5,
                            '{settle}/liquidates' => 1.5,
                            '{settle}/price_orders' => 1.5,
                            '{settle}/price_orders/{order_id}' => 1.5,
                            '{settle}/settlements' => 1.5,
                        ),
                        'post' => array(
                            '{settle}/positions/{contract}/margin' => 1.5,
                            '{settle}/positions/{contract}/leverage' => 1.5,
                            '{settle}/positions/{contract}/risk_limit' => 1.5,
                            '{settle}/orders' => 1.5,
                            '{settle}/price_orders' => 1.5,
                        ),
                        'delete' => array(
                            '{settle}/orders' => 1.5,
                            '{settle}/orders/{order_id}' => 1.5,
                            '{settle}/price_orders' => 1.5,
                            '{settle}/price_orders/{order_id}' => 1.5,
                        ),
                    ),
                    'options' => array(
                        'get' => array(
                            'accounts' => 1.5,
                            'account_book' => 1.5,
                            'positions' => 1.5,
                            'positions/{contract}' => 1.5,
                            'position_close' => 1.5,
                            'orders' => 1.5,
                            'orders/{order_id}' => 1.5,
                            'my_trades' => 1.5,
                        ),
                        'post' => array(
                            'orders' => 1.5,
                        ),
                        'delete' => array(
                            'orders' => 1.5,
                            'orders/{order_id}' => 1.5,
                        ),
                    ),
                ),
            ),
            'timeframes' => array(
                '10s' => '10s',
                '1m' => '1m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '4h' => '4h',
                '8h' => '8h',
                '1d' => '1d',
                '7d' => '7d',
                '1w' => '7d',
            ),
            // copied from gatev2
            'commonCurrencies' => array(
                '88MPH' => 'MPH',
                'AXIS' => 'Axis DeFi',
                'BIFI' => 'Bitcoin File',
                'BOX' => 'DefiBox',
                'BTCBEAR' => 'BEAR',
                'BTCBULL' => 'BULL',
                'BYN' => 'BeyondFi',
                'EGG' => 'Goose Finance',
                'GTC' => 'Game.com', // conflict with Gitcoin and Gastrocoin
                'GTC_HT' => 'Game.com HT',
                'GTC_BSC' => 'Game.com BSC',
                'HIT' => 'HitChain',
                'MM' => 'Million', // conflict with MilliMeter
                'MPH' => 'Morpher', // conflict with 88MPH
                'RAI' => 'Rai Reflex Index', // conflict with RAI Finance
                'SBTC' => 'Super Bitcoin',
                'TNC' => 'Trinity Network Credit',
                'TON' => 'TONToken',
                'VAI' => 'VAIOT',
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
            ),
            'headers' => array(
                'X-Gate-Channel-Id' => 'ccxt',
            ),
            'options' => array(
                'createOrder' => array(
                    'expiration' => 86400, // for conditional orders
                ),
                'networks' => array(
                    'TRC20' => 'TRX',
                    'ERC20' => 'ETH',
                    'BEP20' => 'BSC',
                ),
                'timeInForce' => array(
                    'GTC' => 'gtc',
                    'IOC' => 'ioc',
                    'PO' => 'poc',
                    'POC' => 'poc',
                ),
                'accountsByType' => array(
                    'funding' => 'spot',
                    'spot' => 'spot',
                    'margin' => 'margin',
                    'cross_margin' => 'cross_margin',
                    'cross' => 'cross_margin',
                    'isolated' => 'margin',
                    'swap' => 'futures',
                    'future' => 'delivery',
                    'futures' => 'futures',
                    'delivery' => 'delivery',
                ),
                'defaultType' => 'spot',
                'swap' => array(
                    'fetchMarkets' => array(
                        'settlementCurrencies' => array( 'usdt', 'btc' ),
                    ),
                ),
                'future' => array(
                    'fetchMarkets' => array(
                        'settlementCurrencies' => array( 'usdt', 'btc' ),
                    ),
                ),
            ),
            'precisionMode' => TICK_SIZE,
            'fees' => array(
                'trading' => array(
                    'tierBased' => true,
                    'feeSide' => 'get',
                    'percentage' => true,
                    'maker' => $this->parse_number('0.002'),
                    'taker' => $this->parse_number('0.002'),
                    'tiers' => array(
                        // volume is in BTC
                        'maker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.002') ),
                            array( $this->parse_number('1.5'), $this->parse_number('0.00185') ),
                            array( $this->parse_number('3'), $this->parse_number('0.00175') ),
                            array( $this->parse_number('6'), $this->parse_number('0.00165') ),
                            array( $this->parse_number('12.5'), $this->parse_number('0.00155') ),
                            array( $this->parse_number('25'), $this->parse_number('0.00145') ),
                            array( $this->parse_number('75'), $this->parse_number('0.00135') ),
                            array( $this->parse_number('200'), $this->parse_number('0.00125') ),
                            array( $this->parse_number('500'), $this->parse_number('0.00115') ),
                            array( $this->parse_number('1250'), $this->parse_number('0.00105') ),
                            array( $this->parse_number('2500'), $this->parse_number('0.00095') ),
                            array( $this->parse_number('3000'), $this->parse_number('0.00085') ),
                            array( $this->parse_number('6000'), $this->parse_number('0.00075') ),
                            array( $this->parse_number('11000'), $this->parse_number('0.00065') ),
                            array( $this->parse_number('20000'), $this->parse_number('0.00055') ),
                            array( $this->parse_number('40000'), $this->parse_number('0.00055') ),
                            array( $this->parse_number('75000'), $this->parse_number('0.00055') ),
                        ),
                        'taker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.002') ),
                            array( $this->parse_number('1.5'), $this->parse_number('0.00195') ),
                            array( $this->parse_number('3'), $this->parse_number('0.00185') ),
                            array( $this->parse_number('6'), $this->parse_number('0.00175') ),
                            array( $this->parse_number('12.5'), $this->parse_number('0.00165') ),
                            array( $this->parse_number('25'), $this->parse_number('0.00155') ),
                            array( $this->parse_number('75'), $this->parse_number('0.00145') ),
                            array( $this->parse_number('200'), $this->parse_number('0.00135') ),
                            array( $this->parse_number('500'), $this->parse_number('0.00125') ),
                            array( $this->parse_number('1250'), $this->parse_number('0.00115') ),
                            array( $this->parse_number('2500'), $this->parse_number('0.00105') ),
                            array( $this->parse_number('3000'), $this->parse_number('0.00095') ),
                            array( $this->parse_number('6000'), $this->parse_number('0.00085') ),
                            array( $this->parse_number('11000'), $this->parse_number('0.00075') ),
                            array( $this->parse_number('20000'), $this->parse_number('0.00065') ),
                            array( $this->parse_number('40000'), $this->parse_number('0.00065') ),
                            array( $this->parse_number('75000'), $this->parse_number('0.00065') ),
                        ),
                    ),
                ),
                'swap' => array(
                    'tierBased' => true,
                    'feeSide' => 'base',
                    'percentage' => true,
                    'maker' => $this->parse_number('0.0'),
                    'taker' => $this->parse_number('0.0005'),
                    'tiers' => array(
                        'maker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.0000') ),
                            array( $this->parse_number('1.5'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('3'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('6'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('12.5'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('25'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('75'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('200'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('500'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('1250'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('2500'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('3000'), $this->parse_number('-0.00008') ),
                            array( $this->parse_number('6000'), $this->parse_number('-0.01000') ),
                            array( $this->parse_number('11000'), $this->parse_number('-0.01002') ),
                            array( $this->parse_number('20000'), $this->parse_number('-0.01005') ),
                            array( $this->parse_number('40000'), $this->parse_number('-0.02000') ),
                            array( $this->parse_number('75000'), $this->parse_number('-0.02005') ),
                        ),
                        'taker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.00050') ),
                            array( $this->parse_number('1.5'), $this->parse_number('0.00048') ),
                            array( $this->parse_number('3'), $this->parse_number('0.00046') ),
                            array( $this->parse_number('6'), $this->parse_number('0.00044') ),
                            array( $this->parse_number('12.5'), $this->parse_number('0.00042') ),
                            array( $this->parse_number('25'), $this->parse_number('0.00040') ),
                            array( $this->parse_number('75'), $this->parse_number('0.00038') ),
                            array( $this->parse_number('200'), $this->parse_number('0.00036') ),
                            array( $this->parse_number('500'), $this->parse_number('0.00034') ),
                            array( $this->parse_number('1250'), $this->parse_number('0.00032') ),
                            array( $this->parse_number('2500'), $this->parse_number('0.00030') ),
                            array( $this->parse_number('3000'), $this->parse_number('0.00030') ),
                            array( $this->parse_number('6000'), $this->parse_number('0.00030') ),
                            array( $this->parse_number('11000'), $this->parse_number('0.00030') ),
                            array( $this->parse_number('20000'), $this->parse_number('0.00030') ),
                            array( $this->parse_number('40000'), $this->parse_number('0.00030') ),
                            array( $this->parse_number('75000'), $this->parse_number('0.00030') ),
                        ),
                    ),
                ),
            ),
            // https://www.gate.io/docs/apiv4/en/index.html#label-list
            'exceptions' => array(
                'exact' => array(
                    'INVALID_PARAM_VALUE' => '\\ccxt\\BadRequest',
                    'INVALID_PROTOCOL' => '\\ccxt\\BadRequest',
                    'INVALID_ARGUMENT' => '\\ccxt\\BadRequest',
                    'INVALID_REQUEST_BODY' => '\\ccxt\\BadRequest',
                    'MISSING_REQUIRED_PARAM' => '\\ccxt\\ArgumentsRequired',
                    'BAD_REQUEST' => '\\ccxt\\BadRequest',
                    'INVALID_CONTENT_TYPE' => '\\ccxt\\BadRequest',
                    'NOT_ACCEPTABLE' => '\\ccxt\\BadRequest',
                    'METHOD_NOT_ALLOWED' => '\\ccxt\\BadRequest',
                    'NOT_FOUND' => '\\ccxt\\ExchangeError',
                    'INVALID_CREDENTIALS' => '\\ccxt\\AuthenticationError',
                    'INVALID_KEY' => '\\ccxt\\AuthenticationError',
                    'IP_FORBIDDEN' => '\\ccxt\\AuthenticationError',
                    'READ_ONLY' => '\\ccxt\\PermissionDenied',
                    'INVALID_SIGNATURE' => '\\ccxt\\AuthenticationError',
                    'MISSING_REQUIRED_HEADER' => '\\ccxt\\AuthenticationError',
                    'REQUEST_EXPIRED' => '\\ccxt\\AuthenticationError',
                    'ACCOUNT_LOCKED' => '\\ccxt\\AccountSuspended',
                    'FORBIDDEN' => '\\ccxt\\PermissionDenied',
                    'SUB_ACCOUNT_NOT_FOUND' => '\\ccxt\\ExchangeError',
                    'SUB_ACCOUNT_LOCKED' => '\\ccxt\\AccountSuspended',
                    'MARGIN_BALANCE_EXCEPTION' => '\\ccxt\\ExchangeError',
                    'MARGIN_TRANSFER_FAILED' => '\\ccxt\\ExchangeError',
                    'TOO_MUCH_FUTURES_AVAILABLE' => '\\ccxt\\ExchangeError',
                    'FUTURES_BALANCE_NOT_ENOUGH' => '\\ccxt\\InsufficientFunds',
                    'ACCOUNT_EXCEPTION' => '\\ccxt\\ExchangeError',
                    'SUB_ACCOUNT_TRANSFER_FAILED' => '\\ccxt\\ExchangeError',
                    'ADDRESS_NOT_USED' => '\\ccxt\\ExchangeError',
                    'TOO_FAST' => '\\ccxt\\RateLimitExceeded',
                    'WITHDRAWAL_OVER_LIMIT' => '\\ccxt\\ExchangeError',
                    'API_WITHDRAW_DISABLED' => '\\ccxt\\ExchangeNotAvailable',
                    'INVALID_WITHDRAW_ID' => '\\ccxt\\ExchangeError',
                    'INVALID_WITHDRAW_CANCEL_STATUS' => '\\ccxt\\ExchangeError',
                    'INVALID_PRECISION' => '\\ccxt\\InvalidOrder',
                    'INVALID_CURRENCY' => '\\ccxt\\BadSymbol',
                    'INVALID_CURRENCY_PAIR' => '\\ccxt\\BadSymbol',
                    'POC_FILL_IMMEDIATELY' => '\\ccxt\\OrderImmediatelyFillable', // array("label":"POC_FILL_IMMEDIATELY","message":"Order would match and take immediately so its cancelled")
                    'ORDER_NOT_FOUND' => '\\ccxt\\OrderNotFound',
                    'CLIENT_ID_NOT_FOUND' => '\\ccxt\\OrderNotFound',
                    'ORDER_CLOSED' => '\\ccxt\\InvalidOrder',
                    'ORDER_CANCELLED' => '\\ccxt\\InvalidOrder',
                    'QUANTITY_NOT_ENOUGH' => '\\ccxt\\InvalidOrder',
                    'BALANCE_NOT_ENOUGH' => '\\ccxt\\InsufficientFunds',
                    'MARGIN_NOT_SUPPORTED' => '\\ccxt\\InvalidOrder',
                    'MARGIN_BALANCE_NOT_ENOUGH' => '\\ccxt\\InsufficientFunds',
                    'AMOUNT_TOO_LITTLE' => '\\ccxt\\InvalidOrder',
                    'AMOUNT_TOO_MUCH' => '\\ccxt\\InvalidOrder',
                    'REPEATED_CREATION' => '\\ccxt\\InvalidOrder',
                    'LOAN_NOT_FOUND' => '\\ccxt\\OrderNotFound',
                    'LOAN_RECORD_NOT_FOUND' => '\\ccxt\\OrderNotFound',
                    'NO_MATCHED_LOAN' => '\\ccxt\\ExchangeError',
                    'NOT_MERGEABLE' => '\\ccxt\\ExchangeError',
                    'NO_CHANGE' => '\\ccxt\\ExchangeError',
                    'REPAY_TOO_MUCH' => '\\ccxt\\ExchangeError',
                    'TOO_MANY_CURRENCY_PAIRS' => '\\ccxt\\InvalidOrder',
                    'TOO_MANY_ORDERS' => '\\ccxt\\InvalidOrder',
                    'MIXED_ACCOUNT_TYPE' => '\\ccxt\\InvalidOrder',
                    'AUTO_BORROW_TOO_MUCH' => '\\ccxt\\ExchangeError',
                    'TRADE_RESTRICTED' => '\\ccxt\\InsufficientFunds',
                    'USER_NOT_FOUND' => '\\ccxt\\AccountNotEnabled',
                    'CONTRACT_NO_COUNTER' => '\\ccxt\\ExchangeError',
                    'CONTRACT_NOT_FOUND' => '\\ccxt\\BadSymbol',
                    'RISK_LIMIT_EXCEEDED' => '\\ccxt\\ExchangeError',
                    'INSUFFICIENT_AVAILABLE' => '\\ccxt\\InsufficientFunds',
                    'LIQUIDATE_IMMEDIATELY' => '\\ccxt\\InvalidOrder',
                    'LEVERAGE_TOO_HIGH' => '\\ccxt\\InvalidOrder',
                    'LEVERAGE_TOO_LOW' => '\\ccxt\\InvalidOrder',
                    'ORDER_NOT_OWNED' => '\\ccxt\\ExchangeError',
                    'ORDER_FINISHED' => '\\ccxt\\ExchangeError',
                    'POSITION_CROSS_MARGIN' => '\\ccxt\\ExchangeError',
                    'POSITION_IN_LIQUIDATION' => '\\ccxt\\ExchangeError',
                    'POSITION_IN_CLOSE' => '\\ccxt\\ExchangeError',
                    'POSITION_EMPTY' => '\\ccxt\\InvalidOrder',
                    'REMOVE_TOO_MUCH' => '\\ccxt\\ExchangeError',
                    'RISK_LIMIT_NOT_MULTIPLE' => '\\ccxt\\ExchangeError',
                    'RISK_LIMIT_TOO_HIGH' => '\\ccxt\\ExchangeError',
                    'RISK_LIMIT_TOO_lOW' => '\\ccxt\\ExchangeError',
                    'PRICE_TOO_DEVIATED' => '\\ccxt\\InvalidOrder',
                    'SIZE_TOO_LARGE' => '\\ccxt\\InvalidOrder',
                    'SIZE_TOO_SMALL' => '\\ccxt\\InvalidOrder',
                    'PRICE_OVER_LIQUIDATION' => '\\ccxt\\InvalidOrder',
                    'PRICE_OVER_BANKRUPT' => '\\ccxt\\InvalidOrder',
                    'ORDER_POC_IMMEDIATE' => '\\ccxt\\OrderImmediatelyFillable', // array("label":"ORDER_POC_IMMEDIATE","detail":"order price 1700 while counter price 1793.55")
                    'INCREASE_POSITION' => '\\ccxt\\InvalidOrder',
                    'CONTRACT_IN_DELISTING' => '\\ccxt\\ExchangeError',
                    'INTERNAL' => '\\ccxt\\ExchangeNotAvailable',
                    'SERVER_ERROR' => '\\ccxt\\ExchangeNotAvailable',
                    'TOO_BUSY' => '\\ccxt\\ExchangeNotAvailable',
                    'CROSS_ACCOUNT_NOT_FOUND' => '\\ccxt\\ExchangeError',
                    'RISK_LIMIT_TOO_LOW' => '\\ccxt\\BadRequest', // array("label":"RISK_LIMIT_TOO_LOW","detail":"limit 1000000")
                ),
            ),
            'broad' => array(),
        ));
    }

    public function fetch_spot_markets ($params) {
        $marginResponse = $this->publicMarginGetCurrencyPairs ($params);
        $spotMarketsResponse = $this->publicSpotGetCurrencyPairs ($params);
        $marginMarkets = $this->index_by($marginResponse, 'id');
        //
        //  Spot
        //
        //     array(
        //         {
        //             "$id" => "QTUM_ETH",
        //             "$base" => "QTUM",
        //             "$quote" => "ETH",
        //             "fee" => "0.2",
        //             "min_base_amount" => "0.01",
        //             "min_quote_amount" => "0.001",
        //             "amount_precision" => 3,
        //             "precision" => 6,
        //             "trade_status" => "tradable",
        //             "sell_start" => 0,
        //             "buy_start" => 0
        //         }
        //     )
        //
        //  Margin
        //
        //     array(
        //         {
        //             "$id" => "ETH_USDT",
        //             "$base" => "ETH",
        //             "$quote" => "USDT",
        //             "$leverage" => 3,
        //             "min_base_amount" => "0.01",
        //             "min_quote_amount" => "100",
        //             "max_quote_amount" => "1000000"
        //         }
        //     )
        //
        $result = array();
        for ($i = 0; $i < count($spotMarketsResponse); $i++) {
            $spotMarket = $spotMarketsResponse[$i];
            $id = $this->safe_string($spotMarket, 'id');
            $marginMarket = $this->safe_value($marginMarkets, $id);
            $market = array_replace_recursive($marginMarket, $spotMarket);
            list($baseId, $quoteId) = explode('_', $id);
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $takerPercent = $this->safe_string($market, 'fee');
            $makerPercent = $this->safe_string($market, 'maker_fee_rate', $takerPercent);
            $amountPrecision = $this->parse_number($this->parsePrecision ($this->safe_string($market, 'amount_precision')));
            $tradeStatus = $this->safe_string($market, 'trade_status');
            $leverage = $this->safe_number($market, 'leverage');
            $margin = $leverage !== null;
            $result[] = array(
                'id' => $id,
                'symbol' => $base . '/' . $quote,
                'base' => $base,
                'quote' => $quote,
                'settle' => null,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => null,
                'type' => 'spot',
                'spot' => true,
                'margin' => $margin,
                'swap' => false,
                'future' => false,
                'option' => false,
                'active' => ($tradeStatus === 'tradable'),
                'contract' => false,
                'linear' => null,
                'inverse' => null,
                // Fee is in %, so divide by 100
                'taker' => $this->parse_number(Precise.stringDiv ($takerPercent, '100')),
                'maker' => $this->parse_number(Precise.stringDiv ($makerPercent, '100')),
                'contractSize' => null,
                'expiry' => null,
                'expiryDatetime' => null,
                'strike' => null,
                'optionType' => null,
                'precision' => array(
                    'amount' => $amountPrecision,
                    'price' => $this->parse_number($this->parsePrecision ($this->safe_string($market, 'precision'))),
                ),
                'limits' => array(
                    'leverage' => array(
                        'min' => $this->parse_number('1'),
                        'max' => $this->safe_number($market, 'leverage', 1),
                    ),
                    'amount' => array(
                        'min' => $this->safe_number($spotMarket, 'min_base_amount', $amountPrecision),
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => $this->safe_number($market, 'min_quote_amount'),
                        'max' => $margin ? $this->safe_number($market, 'max_quote_amount') : null,
                    ),
                ),
                'info' => $market,
            );
        }
        return $result;
    }

    public function fetch_markets ($params = array ()) {
        $result = array();
        list($type, $query) = $this->handleMarketTypeAndParams ('fetchMarkets', null, $params);
        if ($type === 'spot' || $type === 'margin') {
            $result = $this->fetch_spot_markets ($query);
        }
        if ($type === 'swap' || $type === 'future') {
            $result = $this->fetchContractMarkets ($query); // futures and swaps
        }
        if ($type === 'option') {
            $result = $this->fetchOptionMarkets ($query);
        }
        $resultLength = is_array($result) ? count($result) : 0;
        if ($resultLength === 0) {
            throw new ExchangeError($this->id . " does not support '" . $type . "' $type, set exchange.options['defaultType'] to " . "'spot', 'margin', 'swap', 'future' or 'option'"); // eslint-disable-line quotes
        }
        return $result;
    }

    public function prepare_request ($market = null, $type = null, $params = array ()) {
        // * Do not call for multi spot order methods like cancelAllOrders and fetchOpenOrders. Use multiOrderSpotPrepareRequest instead
        $request = array();
        if ($market !== null) {
            if ($market['contract']) {
                $request['contract'] = $market['id'];
                $request['settle'] = $market['settleId'];
            } else {
                $request['currency_pair'] = $market['id'];
            }
        } else {
            $swap = $type === 'swap';
            $future = $type === 'future';
            if ($swap || $future) {
                $defaultSettle = $swap ? 'usdt' : 'btc';
                $settle = $this->safe_string_lower($params, 'settle', $defaultSettle);
                $params = $this->omit ($params, 'settle');
                $request['settle'] = $settle;
            }
        }
        return array( $request, $params );
    }

    public function get_margin_mode ($stop, $params) {
        $defaultMarginMode = $this->safe_string_lower_2($this->options, 'defaultMarginMode', 'marginMode', 'spot'); // 'margin' is isolated margin on gate's api
        $marginMode = $this->safe_string_lower_2($params, 'marginMode', 'account', $defaultMarginMode);
        $params = $this->omit ($params, array( 'marginMode', 'account' ));
        if ($marginMode === 'cross') {
            $marginMode = 'cross_margin';
        } else if ($marginMode === 'isolated') {
            $marginMode = 'margin';
        } else if ($marginMode === '') {
            $marginMode = 'spot';
        }
        if ($stop) {
            if ($marginMode === 'spot') {
                // gate spot $stop orders use the term normal instead of spot
                $marginMode = 'normal';
            }
            if ($marginMode === 'cross_margin') {
                throw new BadRequest($this->id . ' getMarginMode() does not support $stop orders for cross margin');
            }
        }
        return array( $marginMode, $params );
    }

    public function fetch_balance_helper ($entry) {
        $account = $this->account ();
        $account['used'] = $this->safe_string_2($entry, 'freeze', 'locked');
        $account['free'] = $this->safe_string($entry, 'available');
        $account['total'] = $this->safe_string($entry, 'total');
        return $account;
    }

    public function fetch_balance ($params = array ()) {
        $this->load_markets();
        $symbol = $this->safe_string($params, 'symbol');
        $params = $this->omit ($params, 'symbol');
        list($type, $query) = $this->handleMarketTypeAndParams ('fetchBalance', null, $params);
        list($request, $requestParams) = $this->prepare_request (null, $type, $query);
        list($marginMode, $requestQuery) = $this->get_margin_mode (false, $requestParams);
        if ($symbol !== null) {
            $market = $this->market ($symbol);
            $request['currency_pair'] = $market['id'];
        }
        $method = $this->getSupportedMapping ($type, array(
            'spot' => $this->getSupportedMapping ($marginMode, array(
                'spot' => 'privateSpotGetAccounts',
                'margin' => 'privateMarginGetAccounts',
                'cross_margin' => 'privateMarginGetCrossAccounts',
            )),
            'funding' => 'privateMarginGetFundingAccounts',
            'swap' => 'privateFuturesGetSettleAccounts',
            'future' => 'privateDeliveryGetSettleAccounts',
        ));
        $response = $this->$method (array_merge($request, $requestQuery));
        $contract = ($type === 'swap' || $type === 'future');
        if ($contract) {
            $response = array( $response );
        }
        //
        // Spot / $margin funding
        //
        //     array(
        //         array(
        //             "currency" => "DBC",
        //             "available" => "0",
        //             "locked" => "0"
        //             "lent" => "0", // $margin funding only
        //             "total_lent" => "0" // $margin funding only
        //         ),
        //         ...
        //     )
        //
        //  Margin
        //
        //    array(
        //        {
        //            "currency_pair" => "DOGE_USDT",
        //            "locked" => false,
        //            "risk" => "9999.99",
        //            "$base" => array(
        //                "currency" => "DOGE",
        //                "available" => "0",
        //                "locked" => "0",
        //                "borrowed" => "0",
        //                "interest" => "0"
        //            ),
        //            "$quote" => array(
        //                "currency" => "USDT",
        //                "available" => "0.73402",
        //                "locked" => "0",
        //                "borrowed" => "0",
        //                "interest" => "0"
        //            }
        //        ),
        //        ...
        //    )
        //
        // Cross $margin
        //
        //    {
        //        "user_id" => 10406147,
        //        "locked" => false,
        //        "$balances" => {
        //            "USDT" => array(
        //                "available" => "1",
        //                "freeze" => "0",
        //                "borrowed" => "0",
        //                "interest" => "0"
        //            }
        //        ),
        //        "total" => "1",
        //        "borrowed" => "0",
        //        "interest" => "0",
        //        "risk" => "9999.99"
        //    }
        //
        //  Perpetual Swap
        //
        //    {
        //        order_margin => "0",
        //        point => "0",
        //        bonus => "0",
        //        history => array(
        //            dnw => "2.1321",
        //            pnl => "11.5351",
        //            refr => "0",
        //            point_fee => "0",
        //            fund => "-0.32340576684",
        //            bonus_dnw => "0",
        //            point_refr => "0",
        //            bonus_offset => "0",
        //            fee => "-0.20132775",
        //            point_dnw => "0",
        //        ),
        //        unrealised_pnl => "13.315100000006",
        //        total => "12.51345151332",
        //        available => "0",
        //        in_dual_mode => false,
        //        currency => "USDT",
        //        position_margin => "12.51345151332",
        //        user => "6333333",
        //    }
        //
        // Delivery Future
        //
        //    {
        //        order_margin => "0",
        //        point => "0",
        //        history => array(
        //            dnw => "1",
        //            pnl => "0",
        //            refr => "0",
        //            point_fee => "0",
        //            point_dnw => "0",
        //            settle => "0",
        //            settle_fee => "0",
        //            point_refr => "0",
        //            fee => "0",
        //        ),
        //        unrealised_pnl => "0",
        //        total => "1",
        //        available => "1",
        //        currency => "USDT",
        //        position_margin => "0",
        //        user => "6333333",
        //    }
        //
        $result = array(
            'info' => $response,
        );
        $crossMargin = $marginMode === 'cross_margin';
        $margin = $marginMode === 'margin';
        $data = $response;
        if (is_array($data) && array_key_exists('balances', $data)) { // True for cross_margin
            $flatBalances = array();
            $balances = $this->safe_value($data, 'balances', array());
            // inject currency and create an artificial balance object
            // so it can follow the existent flow
            $keys = is_array($balances) ? array_keys($balances) : array();
            for ($i = 0; $i < count($keys); $i++) {
                $currencyId = $keys[$i];
                $content = $balances[$currencyId];
                $content['currency'] = $currencyId;
                $flatBalances[] = $content;
            }
            $data = $flatBalances;
        }
        for ($i = 0; $i < count($data); $i++) {
            $entry = $data[$i];
            if ($margin && !$crossMargin) {
                $marketId = $this->safe_string($entry, 'currency_pair');
                $symbol = $this->safeSymbol ($marketId, null, '_');
                $base = $this->safe_value($entry, 'base', array());
                $quote = $this->safe_value($entry, 'quote', array());
                $baseCode = $this->safe_currency_code($this->safe_string($base, 'currency'));
                $quoteCode = $this->safe_currency_code($this->safe_string($quote, 'currency'));
                $subResult = array();
                $subResult[$baseCode] = $this->fetch_balance_helper ($base);
                $subResult[$quoteCode] = $this->fetch_balance_helper ($quote);
                $result[$symbol] = $this->safeBalance ($subResult);
            } else {
                $code = $this->safe_currency_code($this->safe_string($entry, 'currency'));
                $result[$code] = $this->fetch_balance_helper ($entry);
            }
        }
        return ($margin && !$crossMargin) ? $result : $this->safeBalance ($result);
    }

    public function fetch_order_book ($symbol, $limit = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            'id' => $this->market_id($symbol),
        );
        $response = $this->publicGetOrderBookId (array_merge($request, $params));
        return $this->parse_order_book($response);
    }

    public function parse_ohlcv ($ohlcv, $market = null, $timeframe = '1m', $since = null, $limit = null) {
        // they return array( Timestamp, Volume, Close, High, Low, Open )
        return [
            intval ($ohlcv[0]),   // t
            floatval ($ohlcv[5]), // o
            floatval ($ohlcv[3]), // h
            floatval ($ohlcv[4]), // l
            floatval ($ohlcv[2]), // c
            floatval ($ohlcv[1]), // v
        ];
    }

    public function fetch_ohlcv ($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array(
            'id' => $market['id'],
            'group_sec' => $this->timeframes[$timeframe],
        );
        // max $limit = 1001
        if ($limit !== null) {
            $periodDurationInSeconds = $this->parse_timeframe($timeframe);
            $hours = intval (($periodDurationInSeconds * $limit) / 3600);
            $request['range_hour'] = max (0, $hours - 1);
        }
        $response = $this->publicGetCandlestick2Id (array_merge($request, $params));
        //
        //     {
        //         "elapsed" => "15ms",
        //         "result" => "true",
        //         "$data" => array(
        //             array( "1553930820000", "1.005299", "4081.05", "4086.18", "4081.05", "4086.18" ),
        //             array( "1553930880000", "0.110923277", "4095.2", "4095.23", "4091.15", "4091.15" ),
        //             ...
        //             array( "1553934420000", "0", "4089.42", "4089.42", "4089.42", "4089.42" ),
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_ohlcvs($data, $market, $timeframe, $since, $limit);
    }

    public function parse_ticker ($ticker, $market = null) {
        $timestamp = $this->milliseconds ();
        $symbol = null;
        if ($market) {
            $symbol = $market['symbol'];
        }
        $last = $this->safe_float($ticker, 'last');
        $percentage = $this->safe_float($ticker, 'percentChange');
        $open = null;
        $change = null;
        $average = null;
        if (($last !== null) && ($percentage !== null)) {
            $relativeChange = $percentage / 100;
            $open = $last / $this->sum (1, $relativeChange);
            $change = $last - $open;
            $average = $this->sum ($last, $open) / 2;
        }
        $open = $this->safe_float($ticker, 'open', $open);
        $change = $this->safe_float($ticker, 'change', $change);
        return array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'high' => $this->safe_float_2($ticker, 'high24hr', 'high'),
            'low' => $this->safe_float_2($ticker, 'low24hr', 'low'),
            'bid' => $this->safe_float($ticker, 'highestBid'),
            'bidVolume' => null,
            'ask' => $this->safe_float($ticker, 'lowestAsk'),
            'askVolume' => null,
            'vwap' => null,
            'open' => $open,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => $change,
            'percentage' => $percentage,
            'average' => $average,
            'baseVolume' => $this->safe_float($ticker, 'quoteVolume'), // gateio has them reversed
            'quoteVolume' => $this->safe_float($ticker, 'baseVolume'),
            'info' => $ticker,
        );
    }

    public function fetch_tickers ($symbols = null, $params = array ()) {
        $this->load_markets();
        $response = $this->publicGetTickers ($params);
        $result = array();
        $ids = is_array($response) ? array_keys($response) : array();
        for ($i = 0; $i < count($ids); $i++) {
            $id = $ids[$i];
            list($baseId, $quoteId) = explode('_', $id);
            $base = strtoupper($baseId);
            $quote = strtoupper($quoteId);
            $base = $this->safe_currency_code($base);
            $quote = $this->safe_currency_code($quote);
            $symbol = $base . '/' . $quote;
            $market = null;
            if (is_array($this->markets) && array_key_exists($symbol, $this->markets)) {
                $market = $this->markets[$symbol];
            }
            if (is_array($this->markets_by_id) && array_key_exists($id, $this->markets_by_id)) {
                $market = $this->markets_by_id[$id];
            }
            $result[$symbol] = $this->parse_ticker($response[$id], $market);
        }
        return $result;
    }

    public function fetch_ticker ($symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $ticker = $this->publicGetTickerId (array_merge(array(
            'id' => $market['id'],
        ), $params));
        return $this->parse_ticker($ticker, $market);
    }

    public function parse_trade ($trade, $market = null) {
        $timestamp = $this->safe_timestamp_2($trade, 'timestamp', 'time_unix');
        $timestamp = $this->safe_timestamp($trade, 'time', $timestamp);
        $id = $this->safe_string_2($trade, 'tradeID', 'id');
        // take either of orderid or $orderId
        $orderId = $this->safe_string_2($trade, 'orderid', 'orderNumber');
        $price = $this->safe_float_2($trade, 'rate', 'price');
        $amount = $this->safe_float($trade, 'amount');
        $type = $this->safe_string($trade, 'type');
        $cost = null;
        if ($price !== null) {
            if ($amount !== null) {
                $cost = $price * $amount;
            }
        }
        $symbol = null;
        if ($market !== null) {
            $symbol = $market['symbol'];
        }
        return array(
            'id' => $id,
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'symbol' => $symbol,
            'order' => $orderId,
            'type' => null,
            'side' => $type,
            'takerOrMaker' => null,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'fee' => null,
        );
    }

    public function fetch_trades ($symbol, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array(
            'id' => $market['id'],
        );
        $method = $this->safe_string($this->options, 'fetchTradesMethod', 'public_get_tradehistory_id');
        $response = $this->$method (array_merge($request, $params));
        return $this->parse_trades($response['data'], $market, $since, $limit);
    }

    public function fetch_orders ($symbol = null, $since = null, $limit = null, $params = array ()) {
        $response = $this->privatePostOpenOrders ($params);
        return $this->parse_orders($response['orders'], null, $since, $limit);
    }

    public function fetch_order ($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            'orderNumber' => $id,
            'currencyPair' => $this->market_id($symbol),
        );
        $response = $this->privatePostGetOrder (array_merge($request, $params));
        return $this->parse_order($response['order']);
    }

    public function parse_order_status ($status) {
        $statuses = array(
            'cancelled' => 'canceled',
            // 'closed' => 'closed', // these two $statuses aren't actually needed
            // 'open' => 'open', // as they are mapped one-to-one
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order ($order, $market = null) {
        //
        //    array('amount' => '0.00000000',
        //     'currencyPair' => 'xlm_usdt',
        //     'fee' => '0.0113766632239302 USDT',
        //     'feeCurrency' => 'USDT',
        //     'feePercentage' => 0.18,
        //     'feeValue' => '0.0113766632239302',
        //     'filledAmount' => '30.14004987',
        //     'filledRate' => 0.2097,
        //     'initialAmount' => '30.14004987',
        //     'initialRate' => '0.2097',
        //     'left' => 0,
        //     'orderNumber' => '998307286',
        //     'rate' => '0.2097',
        //     'status' => 'closed',
        //     'timestamp' => 1531158583,
        //     'type' => 'sell'),
        //
        $id = $this->safe_string_2($order, 'orderNumber', 'id');
        $symbol = null;
        $marketId = $this->safe_string($order, 'currencyPair');
        if (is_array($this->markets_by_id) && array_key_exists($marketId, $this->markets_by_id)) {
            $market = $this->markets_by_id[$marketId];
        }
        if ($market !== null) {
            $symbol = $market['symbol'];
        }
        $timestamp = $this->safe_timestamp_2($order, 'timestamp', 'ctime');
        $lastTradeTimestamp = $this->safe_timestamp($order, 'mtime');
        $status = $this->parse_order_status($this->safe_string($order, 'status'));
        $side = $this->safe_string($order, 'type');
        // handling for $order->update messages
        if ($side === '1') {
            $side = 'sell';
        } else if ($side === '2') {
            $side = 'buy';
        }
        $price = $this->safe_float_2($order, 'initialRate', 'price');
        $average = $this->safe_float($order, 'filledRate');
        $amount = $this->safe_float_2($order, 'initialAmount', 'amount');
        $filled = $this->safe_float($order, 'filledAmount');
        // In the $order $status response, this field has a different name.
        $remaining = $this->safe_float_2($order, 'leftAmount', 'left');
        $feeCost = $this->safe_float($order, 'feeValue');
        $feeCurrencyId = $this->safe_string($order, 'feeCurrency');
        $feeCurrencyCode = $this->safe_currency_code($feeCurrencyId);
        $feeRate = $this->safe_float($order, 'feePercentage');
        if ($feeRate !== null) {
            $feeRate = $feeRate / 100;
        }
        return array(
            'id' => $id,
            'datetime' => $this->iso8601 ($timestamp),
            'timestamp' => $timestamp,
            'lastTradeTimestamp' => $lastTradeTimestamp,
            'status' => $status,
            'symbol' => $symbol,
            'type' => 'limit',
            'side' => $side,
            'price' => $price,
            'cost' => null,
            'amount' => $amount,
            'filled' => $filled,
            'remaining' => $remaining,
            'average' => $average,
            'trades' => null,
            'fee' => array(
                'cost' => $feeCost,
                'currency' => $feeCurrencyCode,
                'rate' => $feeRate,
            ),
            'info' => $order,
        );
    }

    public function create_order ($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        if ($type === 'market') {
            throw new ExchangeError($this->id . ' allows limit orders only');
        }
        $this->load_markets();
        $method = 'privatePost' . $this->capitalize ($side);
        $market = $this->market ($symbol);
        $request = array(
            'currencyPair' => $market['id'],
            'rate' => $price,
            'amount' => $amount,
        );
        $response = $this->$method (array_merge($request, $params));
        return $this->parse_order(array_merge(array(
            'status' => 'open',
            'type' => $side,
            'initialAmount' => $amount,
        ), $response), $market);
    }

    public function cancel_order ($id, $symbol = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelOrder requires $symbol argument');
        }
        $this->load_markets();
        $request = array(
            'orderNumber' => $id,
            'currencyPair' => $this->market_id($symbol),
        );
        return $this->privatePostCancelOrder (array_merge($request, $params));
    }

    public function query_deposit_address ($method, $code, $params = array ()) {
        $this->load_markets();
        $currency = $this->currency ($code);
        $method = 'privatePost' . $method . 'Address';
        $request = array(
            'currency' => $currency['id'],
        );
        $response = $this->$method (array_merge($request, $params));
        $address = $this->safe_string($response, 'addr');
        $tag = null;
        if (($address !== null) && (mb_strpos($address, 'address') !== false)) {
            throw new InvalidAddress($this->id . ' queryDepositAddress ' . $address);
        }
        if ($code === 'XRP') {
            $parts = explode(' ', $address);
            $address = $parts[0];
            $tag = $parts[1];
        }
        return array(
            'currency' => $currency,
            'address' => $address,
            'tag' => $tag,
            'info' => $response,
        );
    }

    public function create_deposit_address ($code, $params = array ()) {
        return $this->query_deposit_address ('New', $code, $params);
    }

    public function fetch_deposit_address ($code, $params = array ()) {
        return $this->query_deposit_address ('Deposit', $code, $params);
    }

    public function fetch_open_orders ($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market ($symbol);
        }
        $response = $this->privatePostOpenOrders ($params);
        return $this->parse_orders($response['orders'], $market, $since, $limit);
    }

    public function fetch_order_trades ($id, $symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchMyTrades requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array(
            'currencyPair' => $market['id'],
            'orderNumber' => $id,
        );
        $response = $this->privatePostTradeHistory (array_merge($request, $params));
        return $this->parse_trades($response['trades'], $market, $since, $limit);
    }

    public function fetch_my_trades ($symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchMyTrades requires $symbol param');
        }
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array(
            'currencyPair' => $market['id'],
        );
        $response = $this->privatePostTradeHistory (array_merge($request, $params));
        return $this->parse_trades($response['trades'], $market, $since, $limit);
    }

    public function withdraw ($code, $amount, $address, $tag = null, $params = array ()) {
        $this->check_address($address);
        $this->load_markets();
        $currency = $this->currency ($code);
        $request = array(
            'currency' => $currency['id'],
            'amount' => $amount,
            'address' => $address, // Address must exist in you AddressBook in security settings
        );
        if ($tag !== null) {
            $request['address'] .= ' ' . $tag;
        }
        $response = $this->privatePostWithdraw (array_merge($request, $params));
        return array(
            'info' => $response,
            'id' => null,
        );
    }

    public function sign ($path, $api = [], $method = 'GET', $params = array (), $headers = null, $body = null) {
        $authentication = $api[0]; // public, private
        $type = $api[1]; // spot, margin, future, delivery
        $query = $this->omit ($params, $this->extract_params($path));
        $path = $this->implode_params($path, $params);
        $endPart = ($path === '') ? '' : ('/' . $path);
        $entirePath = '/' . $type . $endPart;
        $url = $this->urls['api'][$authentication][$type];
        if ($url === null) {
            throw new NotSupported($this->id . ' does not have a testnet for the ' . $type . ' market $type->');
        }
        $url .= $entirePath;
        if ($authentication === 'public') {
            if ($query) {
                $url .= '?' . $this->urlencode ($query);
            }
        } else {
            $queryString = '';
            $requiresURLEncoding = false;
            if ($type === 'futures' && $method === 'POST') {
                $pathParts = explode('/', $path);
                $secondPart = $this->safe_string($pathParts, 1, '');
                $requiresURLEncoding = (mb_strpos($secondPart, 'dual') !== false) || (mb_strpos($secondPart, 'positions') !== false);
            }
            if (($method === 'GET') || ($method === 'DELETE') || $requiresURLEncoding) {
                if ($query) {
                    $queryString = $this->urlencode ($query);
                    $url .= '?' . $queryString;
                }
            } else {
                $urlQueryParams = $this->safe_value($query, 'query', array());
                if ($urlQueryParams) {
                    $queryString = $this->urlencode ($urlQueryParams);
                    $url .= '?' . $queryString;
                }
                $query = $this->omit ($query, 'query');
                $body = $this->json ($query);
            }
            $bodyPayload = ($body === null) ? '' : $body;
            $bodySignature = $this->hash ($this->encode ($bodyPayload), 'sha512');
            $timestamp = $this->seconds ();
            $timestampString = (string) $timestamp;
            $signaturePath = '/api/' . $this->version . $entirePath;
            $payloadArray = array( strtoupper($method), $signaturePath, $queryString, $bodySignature, $timestampString );
            // eslint-disable-next-line quotes
            $payload = implode("\n", $payloadArray);
            $signature = $this->hmac ($this->encode ($payload), $this->encode ($this->secret), 'sha512');
            $headers = array(
                'KEY' => $this->apiKey,
                'Timestamp' => $timestampString,
                'SIGN' => $signature,
                'Content-Type' => 'application/json',
            );
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function fetch_transactions_by_type ($type = null, $code = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $request = array();
        if ($since !== null) {
            $request['start'] = $since;
        }
        $response = $this->privatePostDepositsWithdrawals (array_merge($request, $params));
        $transactions = null;
        if ($type === null) {
            $deposits = $this->safe_value($response, 'deposits', array());
            $withdrawals = $this->safe_value($response, 'withdraws', array());
            $transactions = $this->array_concat($deposits, $withdrawals);
        } else {
            $transactions = $this->safe_value($response, $type, array());
        }
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency ($code);
        }
        return $this->parse_transactions($transactions, $currency, $since, $limit);
    }

    public function fetch_transactions ($code = null, $since = null, $limit = null, $params = array ()) {
        return $this->fetch_transactions_by_type (null, $code, $since, $limit, $params);
    }

    public function fetch_deposits ($code = null, $since = null, $limit = null, $params = array ()) {
        return $this->fetch_transactions_by_type ('deposits', $code, $since, $limit, $params);
    }

    public function fetch_withdrawals ($code = null, $since = null, $limit = null, $params = array ()) {
        return $this->fetch_transactions_by_type ('withdraws', $code, $since, $limit, $params);
    }

    public function parse_transaction ($transaction, $currency = null) {
        //
        // deposit
        //
        //     {
        //         'id' => 'd16520849',
        //         'currency' => 'NEO',
        //         'address' => False,
        //         'amount' => '1',
        //         'txid' => '01acf6b8ce4d24a....',
        //         'timestamp' => '1553125968',
        //         'status' => 'DONE',
        //         'type' => 'deposit'
        //     }
        //
        // withdrawal
        //
        //     {
        //         'id' => 'w5864259',
        //         'currency' => 'ETH',
        //         'address' => '0x72632f462....',
        //         'amount' => '0.4947',
        //         'txid' => '0x111167d120f736....',
        //         'timestamp' => '1553123688',
        //         'status' => 'DONE',
        //         'type' => 'withdrawal'
        //     }
        //
        $currencyId = $this->safe_string($transaction, 'currency');
        $code = $this->safe_currency_code($currencyId, $currency);
        $id = $this->safe_string($transaction, 'id');
        $txid = $this->safe_string($transaction, 'txid');
        $amount = $this->safe_float($transaction, 'amount');
        $address = $this->safe_string($transaction, 'address');
        if ($address === 'false') {
            $address = null;
        }
        $timestamp = $this->safe_timestamp($transaction, 'timestamp');
        $status = $this->parse_transaction_status ($this->safe_string($transaction, 'status'));
        $type = $this->parse_transaction_type ($id[0]);
        return array(
            'info' => $transaction,
            'id' => $id,
            'txid' => $txid,
            'currency' => $code,
            'amount' => $amount,
            'address' => $address,
            'tag' => null,
            'status' => $status,
            'type' => $type,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'fee' => null,
        );
    }

    public function parse_transaction_status ($status) {
        $statuses = array(
            'PEND' => 'pending',
            'REQUEST' => 'pending',
            'DMOVE' => 'pending',
            'CANCEL' => 'failed',
            'DONE' => 'ok',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transaction_type ($type) {
        $types = array(
            'd' => 'deposit',
            'w' => 'withdrawal',
        );
        return $this->safe_string($types, $type, $type);
    }

    public function handle_errors ($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return;
        }
        //
        //    array("$label" => "ORDER_NOT_FOUND", "message" => "Order not found")
        //    array("$label" => "INVALID_PARAM_VALUE", "message" => "invalid argument => status")
        //    array("$label" => "INVALID_PARAM_VALUE", "message" => "invalid argument => Trigger.rule")
        //    array("$label" => "INVALID_PARAM_VALUE", "message" => "invalid argument => trigger.expiration invalid range")
        //    array("$label" => "INVALID_ARGUMENT", "detail" => "invalid size")
        //
        $label = $this->safe_string($response, 'label');
        if ($label !== null) {
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $label, $feedback);
            throw new ExchangeError($feedback);
        }
    }
}
