<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\abstract\nobitex as Exchange;

class nobitex extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'nobitex',
            'name' => 'Nobitex',
            'country' => array( 'IR' ),
            'rateLimit' => 1000,
            'version' => '1',
            'certified' => false,
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => false,
                'cancelOrders' => false,
                'createDepositAddress' => false,
                'createOrder' => false,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'editOrder' => false,
                'fetchBalance' => false,
                'fetchBorrowInterest' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchL2OrderBook' => false,
                'fetchLedger' => false,
                'fetchLedgerEntry' => false,
                'fetchLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => false,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => false,
                'fetchOrder' => false,
                'fetchOrderBook' => true,
                'fetchOrders' => false,
                'fetchOrderTrades' => 'emulated',
                'fetchPositions' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchWithdrawals' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'comment' => 'This comment is optional',
            'urls' => array(
                'logo' => 'https://cdn.arz.digital/cr-odin/img/exchanges/nobitex/64x64.png',
                'api' => array(
                    'public' => 'https://api.nobitex.ir',
                ),
                'www' => 'https://nobitex.ir/',
                'doc' => array(
                    'https://apidocs.nobitex.ir',
                ),
            ),
            'timeframes' => array(
                '1m' => '1',
                '5m' => '5',
                '15m' => '15',
                '30m' => '30',
                '1h' => '60',
                '3h' => '180',
                '4h' => '240',
                '6h' => '360',
                '12h' => '720',
                '1d' => 'D',
                '2d' => '2D',
                '3d' => '3D',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'market/stats' => 1,
                        'market/udf/history' => 1,
                        'v2/orderbook' => 1,
                    ),
                ),
            ),
            'commonCurrencies' => array(
                'RLS' => 'IRT',
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.001'),
                    'taker' => $this->parse_number('0.001'),
                ),
            ),
        ));
    }

    public function fetch_markets(?array $symbols = null, $params = array ()): array {
        /**
         * retrieves data on all $markets for nobitex
         * @see https://apidocs.nobitex.ir/#6ae2dae4a2
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} an array of objects representing $market data
         */
        $request = array(
            'srcCurrency' => 'btc,usdt,eth,etc,doge,ada,bch,ltc,bnb,eos,xlm,xrp,trx,uni,link,dai,dot,shib,aave,ftm,matic,axs,mana,sand,avax,usdc,gmt,mkr,sol,atom,grt,bat,near,ape,qnt,chz,xmr,egala,busd,algo,hbar,1inch,yfi,flow,snx,enj,crv,fil,wbtc,ldo,dydx,apt,mask,comp,bal,lrc,lpt,ens,sushi,api3,one,glm,pmn,dao,cvc,nmr,storj,snt,ant,zrx,slp,egld,imx,blur,100k_floki,1b_babydoge,1m_nft,1m_btt,t,celr,arb,magic,gmx,band,cvx,ton,ssv,mdt,omg,wld,rdnt,jst,bico,rndr,woo,skl,gal,agix,fet,not,xtz,agld,trb,rsr,ethfi',
            'dstCurrency' => 'rls,usdt',
        );
        $response = $this->publicGetMarketStats ($request);
        $markets = $this->safe_dict($response, 'stats');
        $marketKeys = is_array($markets) ? array_keys($markets) : array();
        $result = array();
        for ($i = 0; $i < count($marketKeys); $i++) {
            $symbol = $marketKeys[$i];
            $markets[$symbol]['symbol'] = $symbol;
            $market = $this->parse_market($markets[$symbol]);
            $result[] = $market;
        }
        return $result;
    }

    public function parse_market($market): array {
        //        array(
        // $symbol => btc-usdt
        // isClosed => false,
        // bestSell => "39659550020",
        // bestBuy => "39650000000",
        // volumeSrc => "11.6924501388",
        // volumeDst => "464510376461.05263193275",
        // latest => "39659550020",
        // mark => "39817678220",
        // dayLow => "38539978000",
        // dayHigh => "40809999990",
        // dayOpen => "38553149810",
        // dayClose => "39659550020",
        // dayChange => "2.87"
        // ),
        $symbol = $this->safe_string_upper($market, 'symbol');
        $id = str_replace('-', '', $symbol);
        list($baseId, $quoteId) = explode('-', $symbol);
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $baseId = strtolower($baseId);
        $quoteId = strtolower($quoteId);
        return array(
            'id' => $id,
            'symbol' => $base . '/' . $quote,
            'base' => $base,
            'quote' => $quote,
            'settle' => null,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => null,
            'type' => 'spot',
            'spot' => true,
            'margin' => false,
            'swap' => false,
            'future' => false,
            'option' => false,
            'active' => true,
            'contract' => false,
            'linear' => null,
            'inverse' => null,
            'contractSize' => null,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => null,
                'price' => null,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => null,
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => null,
            'info' => $market,
        );
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): array {
        /**
         * fetches price tickers for multiple $markets, statistical information calculated over the past 24 hours for each market
         * @see https://apidocs.nobitex.ir/#6ae2dae4a2
         * @param {string[]|null} $symbols unified $symbols of the $markets to fetch the $ticker for, all market tickers are returned if not assigned
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
         */
        $this->load_markets();
        if ($symbols !== null) {
            $symbols = $this->market_symbols($symbols);
        }
        $request = array(
            'srcCurrency' => 'btc,usdt,eth,etc,doge,ada,bch,ltc,bnb,eos,xlm,xrp,trx,uni,link,dai,dot,shib,aave,ftm,matic,axs,mana,sand,avax,usdc,gmt,mkr,sol,atom,grt,bat,near,ape,qnt,chz,xmr,egala,busd,algo,hbar,1inch,yfi,flow,snx,enj,crv,fil,wbtc,ldo,dydx,apt,mask,comp,bal,lrc,lpt,ens,sushi,api3,one,glm,pmn,dao,cvc,nmr,storj,snt,ant,zrx,slp,egld,imx,blur,100k_floki,1b_babydoge,1m_nft,1m_btt,t,celr,arb,magic,gmx,band,cvx,ton,ssv,mdt,omg,wld,rdnt,jst,bico,rndr,woo,skl,gal,agix,fet,not,xtz,agld,trb,rsr,ethfi',
            'dstCurrency' => 'rls,usdt',
        );
        $response = $this->publicGetMarketStats ($request);
        $markets = $this->safe_dict($response, 'stats');
        $marketKeys = is_array($markets) ? array_keys($markets) : array();
        $result = array();
        for ($i = 0; $i < count($marketKeys); $i++) {
            $symbol = $marketKeys[$i];
            $markets[$symbol]['symbol'] = $symbol;
            $ticker = $this->parse_ticker($markets[$symbol]);
            $symbol = $ticker['symbol'];
            $result[$symbol] = $ticker;
        }
        return $this->filter_by_array_tickers($result, 'symbol', $symbols);
    }

    public function fetch_ticker(string $symbol, $params = array ()): array {
        /**
         * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @see https://apidocs.nobitex.ir/#6ae2dae4a2
         * @param {string} $symbol unified $symbol of the market to fetch the $ticker for
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structure~
         */
        $ticker = $this->fetch_tickers(array( $symbol ));
        return $ticker[$symbol];
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        //
        //     {
        //      $symbol => "USDT-IRT",
        //      $last => "61338.0",
        //      best_ask => "61338.0",
        //      best_bid => "61338.0",
        //      open_24h => "61419",
        //      high_24h => 61739,
        //      low_24h => 60942,
        //      vol_24h_pair => 11017655160,
        //      vol_24h => 17968,
        //      ts => 1715074621
        //     }
        //
        $marketType = 'spot';
        $symbol = $this->safe_string_upper($ticker, 'symbol');
        $marketId = str_replace('-', '', $symbol);
        $marketinfo = $this->market($marketId);
        $symbol = $this->safe_symbol($marketId, $market, null, $marketType);
        $high = $this->safe_float($ticker, 'dayHigh');
        $low = $this->safe_float($ticker, 'dayLow');
        $bid = $this->safe_float($ticker, 'bestBuy');
        $ask = $this->safe_float($ticker, 'bestSell');
        $open = $this->safe_float($ticker, 'dayOpen');
        $close = $this->safe_float($ticker, 'dayClose');
        $change = $this->safe_float($ticker, 'dayChange');
        $last = $this->safe_float($ticker, 'latest');
        $quoteVolume = $this->safe_float($ticker, 'volumeDst');
        $baseVolume = $this->safe_float($ticker, 'volumeSrc');
        if ($marketinfo['quote'] === 'IRT') {
            $high /= 10;
            $low /= 10;
            $bid /= 10;
            $ask /= 10;
            $open /= 10;
            $close /= 10;
            $last /= 10;
            $quoteVolume /= 10;
        }
        return $this->safe_ticker(array(
            'symbol' => str_replace('-', '/', $symbol),
            'timestamp' => null,
            'datetime' => null,
            'high' => $high,
            'low' => $low,
            'bid' => $this->safe_float($bid, 0),
            'bidVolume' => null,
            'ask' => $this->safe_float($ask, 0),
            'askVolume' => null,
            'vwap' => null,
            'open' => $open,
            'close' => $close,
            'last' => $last,
            'previousClose' => null,
            'change' => $change,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
         * @see https://apidocs.nobitex.ir/#ohlc
         * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
         * @param {string} $timeframe the length of time each candle represents
         * @param {int} [$since] timestamp in ms of the earliest candle to fetch
         * @param {int} [$limit] the maximum amount of candles to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {int[][]} A list of candles ordered, open, high, low, close, volume
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $endTime = Date.now ();
        $request = array(
            'symbol' => $market['id'],
            'from' => ($endTime / 1000) - (24 * 60 * 60),
            'to' => $endTime / 1000,
            'resolution' => $this->safe_string($this->timeframes, $timeframe, $timeframe),
            // 'limit' => 500,
        );
        if ($since !== null) {
            $request['from'] = $since / 1000;
        }
        $request['from'] = $this->safe_integer($request, 'from');
        $request['to'] = $this->safe_integer($request, 'to');
        if ($timeframe !== null) {
            $request['resolution'] = $this->safe_string($this->timeframes, $timeframe, $timeframe);
        }
        $response = $this->publicGetMarketUdfHistory ($request);
        $openList = $this->safe_value($response, 'o', array());
        $highList = $this->safe_list($response, 'h', array());
        $lastList = $this->safe_list($response, 'l', array());
        $closeList = $this->safe_list($response, 'c', array());
        $volumeList = $this->safe_list($response, 'v', array());
        $timestampList = $this->safe_list($response, 't', array());
        $ohlcvs = array();
        for ($i = 0; $i < count($openList); $i++) {
            if ($market['quote'] === 'IRT') {
                $openList[$i] /= 10;
                $highList[$i] /= 10;
                $lastList[$i] /= 10;
                $closeList[$i] /= 10;
                $volumeList[$i] /= 10;
            }
            $ohlcvs[] = [
                $timestampList[$i],
                $openList[$i],
                $highList[$i],
                $lastList[$i],
                $closeList[$i],
                $volumeList[$i],
            ];
        }
        return $this->parse_ohlcvs($ohlcvs, $market, $timeframe, $since, $limit);
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): array {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data for multiple markets
         * @see https://apidocs.nobitex.ir/#orderbook
         * @param {string[]|null} symbols list of unified $market symbols, all symbols fetched if null, default is null
         * @param {int} [$limit] max number of entries per orderbook to return, default is null
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market $symbol
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => str_replace('/', '', $symbol),
        );
        $response = $this->publicGetV2Orderbook ($request);
        if ($market['quote'] === 'IRT') {
            $bids = $this->safe_list($response, 'bids');
            $asks = $this->safe_list($response, 'asks');
            for ($i = 0; $i < count($bids); $i++) {
                $bids[$i][0] /= 10;
            }
            for ($i = 0; $i < count($asks); $i++) {
                $asks[$i][0] /= 10;
            }
            $response['bids'] = $bids;
            $response['asks'] = $asks;
        }
        $timestamp = $this->safe_integer($response, 'lastUpdate');
        return $this->parse_order_book($response, $symbol, $timestamp);
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $query = $this->omit($params, $this->extract_params($path));
        $url = $this->urls['api']['public'] . '/' . $path;
        if ($path === 'market/udf/history') {
            $url = $this->urls['api']['public'] . '/' . $path . '?' . $this->urlencode($query);
        }
        if ($path === 'market/stats') {
            $url = $url . '?' . $this->urlencode($query);
        }
        if ($path === 'v2/orderbook') {
            $url = $url . '/' . $params['symbol'];
        }
        $headers = array( 'Content-Type' => 'application/json' );
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
