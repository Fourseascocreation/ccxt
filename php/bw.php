<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception as Exception; // a common import

class bw extends Exchange {

    public function describe () {
        return array_replace_recursive (parent::describe (), array (
            'id' => 'bw',
            'name' => 'Bw',
            'countries' => [ 'CN' ],
            'version' => 'v1',
            'has' => array(
                'fetchBalance' => true,
                'fetchMarkets' => true,
                'createOrder' => true,
                'cancelOrder' => true,
                'cancelOrders' => true,
                'fetchTicker' => false,
                'fetchTickers' => false,
                'fetchMyTrades' => false,
                'fetchTrades' => true,
                'fetchOHLCV' => true,
                'fetchOrder' => true,
                'fetchOrders' => false,
                'fetchOpenOrders' => false,
                'fetchClosedOrders' => false,
                'fetchCurrencies' => true,
            ),
            'urls' => array (
                'logo' => 'https://user-images.githubusercontent.com/bw.jpg',
                'api' => 'https://www.bw.com',
                'publicapi' => 'https://kline.bw.com',
                'www' => 'https://www.bw.com',
                'doc' => 'https://www.bw.com/help/restApi',
                'fees' => 'https://www.bw.com/help/rate',
                'referral' => 'https://www.bw.com/regGetCommission/N2d2NjJEd2FMTHM=?lan=cn',
            ),
            'api' => array (
                'public' => array (
                    'get' => array (
                        'exchange/config/controller/website/marketcontroller/getByWebId',
                        'exchange/config/controller/website/currencycontroller/getCurrencyList',
                        'api/data/v1/ticker',
                        'api/data/v1/entrusts',
                        'api/data/v1/trades',
                        'api/data/v1/klines',
                    ),
                ),
                'private' => array (
                    'get' => array (
                        'exchange/entrust/controller/website/EntrustController/getEntrustById',
                        'exchange/entrust/controller/website/EntrustController/batchCancelEntrustByMarketId',
                    ),
                    'post' => array (
                        'exchange/entrust/controller/website/EntrustController/getEntrustById',
                        'exchange/fund/controller/website/fundcontroller/findbypage',
                        'exchange/entrust/controller/website/EntrustController/addEntrust',
                        'exchange/entrust/controller/website/EntrustController/cancelEntrust',
                    ),
                ),
            ),
            'fees' => array (
                'trading' => array (
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => 0.1 / 100,
                    'taker' => 0.1 / 100,
                ),
                'funding' => array (
                    'tierBased' => false,
                    'percentage' => true,
                    'deposit' => array (),
                    'withdraw' => array (
                        'BTC' => 0.001,
                        'ETH' => 0.01,
                        'BCHABC' => 0.001,
                        'LTC' => 0.03,
                        'ETC' => 0.1,
                        'USDT' => 5,
                        'GMB' => 1000,
                        'BSV' => 0.001,
                        'GUSD' => 6,
                        'LST' => 10,
                        'DOGE' => 1500,
                        '1ST' => 30,
                        'OMG' => 0.7,
                        'MANA' => 80,
                        'TRUE' => 6,
                        'BTM' => 6,
                        'ADA' => 10,
                        'XRP' => 2,
                        'XWC' => 1,
                        'QC' => 5,
                        'DASH' => 0.02,
                        'NEO' => 0,
                        'QTUM' => 0.2,
                        'LTC' => 0.03,
                        'EOS' => 0.5
                    ),
                ),
            ),
            'exceptions' => array (
                '2012' => '\\ccxt\\OrderNotFound',
                '2014' => '\\ccxt\\OrderNotFound',
                '2015' => '\\ccxt\\OrderNotFound',
                '6895' => '\\ccxt\\AuthenticationError',
                '6896' => '\\ccxt\\AuthenticationError',
                '6897' => '\\ccxt\\AuthenticationError',
                '6898' => '\\ccxt\\AuthenticationError',
            ),
        ));
    }

    public function fetch_markets ($params = array ()) {
        $response = $this->publicGetExchangeConfigControllerWebsiteMarketcontrollerGetByWebId ();
        $data = $response['datas'];
        $result = array ();
        for ($i = 0; $i < count ($data); $i++) {
            $market = $data[$i];
            $id = $market['marketId'];
            $name = $market['name'];
            $symbolParts = explode ('-', $name);
            $baseId = $symbolParts[0];
            $quoteId = $symbolParts[1];
            $base = strtoupper ($baseId);
            $quote = strtoupper ($quoteId);
            $base = $this->common_currency_code($base);
            $quote = $this->common_currency_code($quote);
            $symbol = $base . '/' . $quote;
            $active = true;
            $precision = array (
                'amount' => $market['amountDecimal'],
                'price' => $market['priceDecimal'],
            );
            $limits = array (
                'amount' => array (
                    'min' => $market['minAmount'],
                    'max' => null,
                ),
                'price' => array (
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array (
                    'min' => null,
                    'max' => null,
                ),
            );
            $result[] = array (
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'active' => $active,
                'precision' => $precision,
                'limits' => $limits,
                'info' => $market,
            );
        }
        return $result;
    }

    public function fetch_currencies ($params = array ()){
        $response = $this->publicGetExchangeConfigControllerWebsiteCurrencycontrollerGetCurrencyList();
        $data = response['datas'];
        $result = array ();
        for ($i = 0; $i < count ($data); $i++) {
            $currency = $data[i];
            $id = $currency['currencyId'];
            $name = $currency['name'];
            $code = $this->common_currency_code(id);
            $result[code] = array (
                'id' => $id,
                'code' => $code,
                'info' => $currency,
                'name' => $name
            );
        }
        return $result;
    }

    public function fetch_ticker ($symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->markets[$symbol];
        $request = array (
            'marketId' => $market['id'],
        );
        $response = $this->publicGetApiDataV1Ticker (array_merge ($request, $params));
        $data = $response['datas'];
        $timestamp = $this->milliseconds();
        return array (
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'high' => $data[2],
            'low' => $data[3],
            'bid' => $data[7],
            'bidVolume' => null,
            'ask' => $data[8],
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $data[1],
            'last' => $data[1],
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $data[4],
            'quoteVolume' => null,
            'info' => $response,
        );
    }

    public function parse_trade ($trade, $market = null) {
        $symbol = null;
        if ($market !== null) {
            $symbol = $market['symbol'];
        }
        $timestamp = $trade[2];
        $id = $timestamp;
        $orderId = null;
        $amount = $trade[6];
        $price = $trade[5];
        $cost = null;
        if ($price !== null) {
            if ($amount !== null) {
                $cost = $amount * $price;
            }
        }
        
        $side = $trade[4];
        return array (
            'info' => $trade,
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'symbol' => $symbol,
            'type' => null,
            'side' => $side,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'order' => $orderId,
            'fee' => null,
        );
    }

    public function fetch_trades ($symbol, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $request = array (
            'marketId' => $this->market_id($symbol),
        );
        if ($limit !== null) {
            $request['dataSize'] = min($limit, 20);
        }
        $market = $this->market ($symbol);
        $response = $this->publicGetApiDataV1Trades (array_merge ($request, $params));
        return $this->parse_trades($response['datas'], $market, $since, $limit);
    }

    public function fetch_order_book ($symbol, $limit = null, $params = array ()) {
        $this->load_markets();
        $marketId = $this->market_id($symbol);
        $request = array (
            'marketId' => $marketId,
        );
        if ($limit !== null) {
            $request['size'] = $limit;
        }
        $response = $this->publicGetApiDataV1Entrusts (array_merge ($request, $params));
        $data = $response['datas'];
        $timestamp = $response['timestamp'];
        $bidsKey = 'bids';
        $asksKey = 'asks';
        $priceKey = 0;
        $amountKey = 1;
        $orderbook = $this->parse_order_book($data, $timestamp, $bidsKey, $asksKey, $priceKey, $amountKey);
        return $orderbook;
    }


    public function parse_ohlcv ($ohlcv, $market = null, $timeframe = '1m', $since = null, $limit = null) {
        return [
            $ohlcv[3],
            $ohlcv[4],
            $ohlcv[5],
            $ohlcv[6],
            $ohlcv[7],
            $ohlcv[8],
        ];
    }

    public function fetch_ohlcv ($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array (
            'marketId' => $marketId,
            'type' => strtoupper($timeframe)
        );
        if ($limit !== null) {
            $request['dataSize'] = $limit;
        }
        $response = $this->publicGetApiDataV1Klines (array_merge ($request, $params));
        return $this->parse_ohlcvs($response['datas'], $market, $timeframe, $since, $limit);
    }

    public function fetch_balance ($params = array ()) {
        $this->load_markets();
        $response = $this->privatePostExchangeFundControllerWebsiteFundcontrollerFindbypage ($params);
        $data = $response['datas']['list'];
        $result = array ( 'info' => $response );
        for ($i = 0; $i < count ($data); $i++) {
            $current = $data[$i];
            $currencyId = $current['currencyTypeId'];
            $code = strtoupper ($currencyId);
            if (is_array ($this->currencies_by_id) && array_key_exists ($currencyId, $this->currencies_by_id)) {
                $code = $this->currencies_by_id[$currencyId]['name'];
            } else {
                $code = $this->common_currency_code($code);
            }
            $account = $this->account ();
            $result[$code] = $account;
            $result[$code]['used'] = $this->safe_float($current, 'freeze');
            $result[$code]['free'] = $this->safe_float($current, 'amount');
            $result[$code]['total'] = $result[$code]['used'] + $result[$code]['total'];
        }
        return $this->parse_balance($result);
    }

    public function parse_order_status ($status) {
        $statuses = array (
            '0' => 'open',
            '3' => 'open',
            '2' => 'closed',
            '1' => 'canceled',
        );
        return (is_array ($statuses) && array_key_exists ($status, $statuses)) ? $statuses[$status] : $status;
    }

    public function parse_side ($sideId) {
        if ($sideId === 1) {
            return 'buy';
        } else if ($sideId === 0) {
            return 'sell';
        } else {
            return null;
        }
    }

    public function parse_order ($order, $market = null) {
        $id = $this->safe_string($order, 'entrustId');
        $timestamp = $this->safe_float($order, 'createTime');
        $lastTradeTimestamp = null;
        $symbol = $market['symbol'];
        $sideId = $this->safe_integer($order, 'type');
        $side = $this->parse_side ($sideId);
        $type = null;
        $price = $this->safe_float($order, 'price');
        $amount = $this->safe_float($order, 'amount');
        $filled = $this->safe_float($order, 'completeAmount');
        $average = $filled > 0 ? $this->safe_float($order, 'completeTotalMoney') / $filled : 0;
        $remaining = $amount - $filled;
        $status = $this->parse_order_status($this->safe_integer($order, 'status'));
        $cost = $filled * $price;
        $fee = $this->safe_float($order, 'tradeFee');
        $result = array (
            'info' => $order,
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'lastTradeTimestamp' => $lastTradeTimestamp,
            'symbol' => $symbol,
            'type' => $type,
            'side' => $side,
            'price' => $price,
            'cost' => $cost,
            'average' => $average,
            'amount' => $amount,
            'filled' => $filled,
            'remaining' => $remaining,
            'status' => $status,
            'fee' => $fee,
        );
        return $result;
    }

    public function fetch_order ($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array (
            'marketId' => $this->market_id($symbol),
            'entrustId' => $id,
        );
        $response = $this->privateGetExchangeEntrustControllerWebsiteEntrustControllerGetEntrustById (array_merge ($request, $params));
        $order = $this->parse_order($response['datas'], $market);
        return $order;
    }

    public function create_order ($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $this->load_markets();
        $sideId = null;
        if ($side === 'buy') {
            $sideId = 1;
        } else if ($side === 'sell') {
            $sideId = 0;
        }
        $request = array (
            'marketId' => $this->market_id($symbol),
            'price' => $price,
            'amount' => $amount,
            'type' => $sideId,
        );
        $response = $this->privatePostExchangeEntrustControllerWebsiteEntrustControllerAddEntrust (array_merge ($request, $params));
        $data = $response['datas'];
        return array (
            'info' => $response,
            'id' => $this->safe_string($data, 'entrustId'),
            'price' => $price,
            'amount' => $amount,
        );
    }

    public function cancel_order ($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $request = array (
            'entrustId' => $id,
        );
        if ($symbol !== null) {
            $request['marketId'] = $this->market_id($symbol);
        }
        $results = $this->privatePostExchangeEntrustControllerWebsiteEntrustControllerCancelEntrust (array_merge ($request, $params));
        $success = $results['resMsg'];
        $returnVal = array ( 'info' => $results, 'success' => $success['message'] );
        return $returnVal;
    }

    public function cancel_all_order ($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $request = array (
        );
        if ($symbol !== null) {
            $request['marketId'] = $this->market_id($symbol);
        }
        $results = $this->privateGetExchangeEntrustControllerWebsiteEntrustControllerBatchCancelEntrustByMarketId (array_merge ($request, $params));
        $success = $results['resMsg'];
        $returnVal = array ( 'info' => $results, 'success' => $success['message'] );
        return $returnVal;
    }

    public function sign ($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = '';
        $query = $this->omit ($params, $this->extract_params($path));
        if ($api === 'public') {
            $baseUrl = $path.strpos('api/data/v1') >= 0 ? $this->urls['publicapi'] : $this->urls['api'];
            $url = $baseUrl . '/' . $this->implodeParams ($path, $params);
            if ($query) {
                $url .= '?' . $this->urlencode ($query);
            }
        } else {
            $url = $this->urls['api'] . '/' . $this->implodeParams ($path, $params);
            $this->check_required_credentials();
            $nonce = $this->milliseconds ();
            $payload = '';
            if($method === 'GET'){
                if ($query) {
                    $url .= '?' . $this->urlencode ($query);
                }
                $query = $this->keysort($query);
                foreach($query as $key=>$value){
                    $payload = $payload . $key . $value;
                }
            } else {
                $payload = $this->json($query);
                $body = $payload;
            }

            $message = $this->apiKey + $nonce + $payload + $this->secret;
            $signature = $this->hash($this->encode ($message));
            $headers = array (
                "User-Agent" => "Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3",
                'Apiid' => $this->apiKey,
                'Timestamp' => $nonce,
                'Sign' => $signature
            );
        }
        return array ( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors ($code, $reason, $url, $method, $headers, $body, $response) {
        if (gettype ($body) !== 'string') {
            return; // fallback to default error handler
        }
        if (($body[0] === '{') || ($body[0] === '[')) {
            $feedback = $this->id . ' ' . $body;
            $result = $this->safe_value($response, 'resMsg');
            if ($result !== null) {
                if (!$result['code'] != 1) {
                    $code = $this->safe_string($result, 'code');
                    if (is_array ($this->exceptions) && array_key_exists ($code, $this->exceptions)) {
                        throw new $this->exceptions[$code] ($feedback);
                    } else {
                        throw new ExchangeError ($feedback);
                    }
                }
            }
        }
    }
}
