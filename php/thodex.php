<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import

class thodex extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'thodex',
            'name' => 'Thodex',
            'countries' => array('TR'),
            'rateLimit' => 1000,
            'version' => '1',
            'urls' => array(
                'logo' => 'https://cdn.thodex.com/assets/images/logo.svg',
                'api' => 'https://api.thodex.com/v1',
                'www' => 'https://www.thodex.com',
                'doc' => 'https://api.thodex.com',
            ),
            'has' => array(
                'fetchMarkets' => true,
                'fetchTicker' => true,
                'fetchOrderBook ' => true,
                'fetchTrades' => true,
                'fetchBalance' => true,
                'createOrder' => true,
                'cancelOrder' => true,
                'fetchOpenOrders' => true,
                'fetchMyTrades' => true
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'public/markets',
                        'public/market-status',
                        'public/market-summary',
                        'public/order-depth',
                        'public/market-history'
                    )
                ),
                'private' => array(
                    'get' => array(
                        'market/open-orders',
                        'market/order-history',
                    ),
                    'post' => array(
                        'balance',
                        'market/buy-limit',
                        'market/sell-limit',
                        'market/buy',
                        'market/sell',
                        'market/cancel',
                    ),
                ),
            ),
            'options' => array(
                'createMarketBuyOrderRequiresPrice' => true,
            )
        ));
    }

    public function fetch_markets($params = array ()) {
        $response = $this->publicGetPublicMarkets($params);
        $result = array();
        for ($i = 0; $i < count($response['result']); $i++) {
            $market = $response['result'][$i];
            $id = strtolower($market['keyname']);
            $symbol = $market['stock_keyname'] . '/' . $market['money_keyname'];
            $base = $market['stock_keyname'];
            $quote = $market['money_keyname'];
            $baseId = strtolower($market['stock_keyname']);
            $quoteId = strtolower($market['money_keyname']);
            $active = true;
            $percentage = false;
            $tierBased = true;
            $precision = array(
                'price' => $market['stock_prec'],
                'amount' => $market['money_prec']
            );
            $limits = array(
                'amount' => array(
                    'min' => $market['min_amount'],
                    'max' => null
                ),
                'price' => array(
                    'min' => null,
                    'max' => null
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null
                ),
            );

            $result[] = array(
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'active' => $active,
                'percentage' => $percentage,
                'tierBased' => $tierBased,
                'precision' => $precision,
                'limits' => $limits,
                'info' => $market
            );
        }
        return $result;
    }

    public function parse_ticker($ticker, $market = null) {
        // we don't set values that are not defined by the exchange
        $timestamp = $this->safe_integer($ticker, 'timestamp');
        $symbol = null;
        if ($market !== null) {
            $symbol = $market['symbol'];
        } else {
            $baseId = $this->safe_string($ticker, 'coin_symbol');
            $quoteId = $this->safe_string($ticker, 'currency_symbol');
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $symbol = $base . '/' . $quote;
        }
        $last = $this->safe_float($ticker, 'last');
        $change = $this->safe_float($ticker, 'change');
        $baseVolume = $this->safe_float_2($ticker, 'vol', 'vol24H');
        $open = null;
        if (($last !== null) && ($change !== null)) {
            $open = $last - $change;
        }
        $percentage = $this->safe_string($ticker, 'percent');
        if ($percentage !== null) {
            $percentage = str_replace('%', '', $percentage);
            $percentage = floatval($percentage);
        }
        return array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_float($ticker, 'high'),
            'low' => $this->safe_float($ticker, 'low'),
            'bid' => $this->safe_float($ticker, 'buy'),
            'bidVolume' => null,
            'ask' => $this->safe_float($ticker, 'sell'),
            'askVolume' => null,
            'vwap' => null,
            'open' => $open,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => $change,
            'percentage' => $percentage,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $this->safe_float($ticker, 'amount'),
            'info' => $ticker,
        );
    }

    public function fetch_ticker($symbol = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => strtoupper($market['id'])
        );
        $response =  $this->publicGetPublicMarketStatus (array_merge($request, $params));
        return $this->parse_ticker($response['result'], $market);
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => strtoupper($market['id'])
        );
        if($limit !== null){
            $request['limit'] = $limit;
        }

        $response = $this->publicGetPublicOrderDepth (array_merge($request, $params));
        return $this->parse_order_book($response['result']);
    }

    public function parse_trade($trade, $market = null) {
        $symbol = null;
        $cost = null;
        $fee = null;
        $role = null;
        $id = $this->safe_string($trade, 'id');
        $price = $this->safe_float($trade, 'price');
        $amount = $this->safe_float($trade, 'amount');

        if ($market !== null) {
            // market history
            $symbol = $market['symbol'];
            $side = $this->safe_string($trade, 'type');
            $order = null;
            if ($amount !== null) {
                if ($price !== null) {
                    $cost = $price * $amount;
                }
            }
        }else{
            // order history
            $symbol = $this->safe_string($trade, 'market');
            $order = $this->safe_string($trade, 'deal_order_id');
            $cost = $this->safe_float($trade, 'deal');
            $fee = $this->safe_float($trade, 'fee');
            $side_id = $this->safe_integer($trade, 'type');
            if($side_id === 1){
                $side = 'buy';
            }else{
                $side = 'sell';
            }

            $role_id = $this->safe_integer($trade, 'type');
            if($role_id === 1){
                $role = 'maker';
            }else{
                $role = 'taker';
            }
        }

        $timestamp = $this->safe_timestamp($trade, 'time');
        return array(
            'id' => $id,
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'type' => null,
            'side' => $side,
            'order' => $order,
            'takerOrMaker' => $role,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'fee' => $fee,
        );
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => strtoupper($market['id'])
        );
        $response = $this->publicGetPublicMarketHistory(array_merge($request, $params));
        $result = $this->safe_value($response, 'result', array());
        return $this->parse_trades($result, $market, $since, $limit);
    }


    public function fetch_balance($params = array ()) {
        $response = $this->privateGetAccountBalance($params);
        $result = array( 'info' => $response );
        $balances = $this->safe_value($response, 'result', array());
        $keys = array_keys($balances);
        for ($i = 0; $i < count($balances); $i++) {
            $balance = $balances[$keys[$i]];
            $code = $this->safe_currency_code($keys[$i]);
            $account = $this->account();
            $account['free'] = $this->safe_float($balance, 'available');
            $account['used'] = $this->safe_float($balance, 'freeze');
            $result[$code] = $account;
        }
        return $this->parse_balance($result);
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);

        $request = array(
            'market' => strtoupper($market['id']),
            'side' => $side,
            'type' => $type
        );

        if (($type === 'market') && ($side === 'buy')) {
            $method = 'privatePostMarketBuy';
            if ($this->options['createMarketBuyOrderRequiresPrice']) {
                if ($price === null) {
                    throw new InvalidOrder($this->id . " createOrder() requires the $price argument with market buy orders to calculate total order cost ($amount to spend), where cost = $amount * $price-> Supply a $price argument to createOrder() call if you want the cost to be calculated for you from $price and $amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false to supply the cost in the $amount argument (the exchange-specific behaviour)");
                } else {
                    $request['amount'] = $this->cost_to_precision($symbol, $amount * $price);
                }
            } else {
                $request['amount'] = $this->cost_to_precision($symbol, $amount);
            }
        } else {
            $request['amount'] = $this->amount_to_precision($symbol, $amount);
        }

        if ($type === 'limit') {
            $request['price'] = $this->price_to_precision($symbol, $price);
        }

        if($type === 'market' && $side == 'sell'){
            $method = 'privatePostMarketSell';
        }else if($type === 'limit' && $side == 'sell'){
            $method = 'privatePostMarketSellLimit';
        }else if($type === 'limit' && $side == 'buy'){
            $method = 'privatePostMarketBuyLimit';
        }

        $response = $this->$method(array_merge($request, $params));
        return array(
            'info' => $response,
            'id' => $response['result']['id'],
        );
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);

        $request = array(
            'market' => strtoupper($market['id']),
            'order_id' => $id,
        );
        return $this->privatePostMarketCancel (array_merge($request, $params));
    }

    public function parse_order($order, $market = null) {
        $id = $this->safe_string($order, 'id');
        $timestamp = $this->safe_integer($order, 'time');
        $symbol = $this->safe_string($order, 'market');
        $type = $this->safe_integer($order, 'type', 0);

        if ($type === 1) {
            $type = 'market';
        }else if ($type === 2) {
            $type = 'limit';
        }else{
            $type = null;
        }

        $side = $this->safe_integer($order, 'side', 0);
        if ($side === 1) {
            $side = 'buy';
        }else if ($side === 2) {
            $side = 'sell';
        }else{
            $side = null;
        }

        $price = $this->safe_float($order, 'price');
        $amount = $this->safe_float($order, 'amount');
        $remaining = $this->safe_float($order, 'left', -1);

        $cost = null;
        if($remaining !== -1){
            $filled = $amount - $remaining;
            if ($cost === null) {
                if (($price !== null) && ($filled !== null)) {
                    $cost = $price * $filled;
                }
            }
        }else{
            $filled = null;
            $remaining = null;
            $cost = $price * $amount;
        }

        return array(
            'id' => $id,
            'clientOrderId' => null,
            'info' => $order,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => null,
            'symbol' => $symbol,
            'status' => 'open',
            'type' => $type,
            'timeInForce' => null,
            'postOnly' => null,
            'side' => $side,
            'price' => $price,
            'stopPrice' => null,
            'amount' => $amount,
            'cost' => $cost,
            'average' => null,
            'filled' => $filled,
            'remaining' => $remaining,
            'fee' => null,
            'trades' => null,
        );
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOpenOrders() requires a `$symbol` argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => strtoupper($market['id']),
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }

        $response = $this->privateGetMarketOpenOrders(array_merge($request, $params));
        $records = $this->safe_value($response['result'], 'records', array());
        return $this->parse_orders($records, $market, $since, $limit);
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrders() requires a `$symbol` argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => strtoupper($market['id']),
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->privateGetMarketOrderHistory(array_merge($request, $params));
        $records = $this->safe_value($response['result'], 'records', array());
        return $this->parse_trades($records, $market, $since, $limit);
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api'] . '/';

        if ($api === 'public') {
            $url .= $path;
            $url .= '?' . $this->urlencode($params);
        } else {
            $this->check_required_credentials();
            $tonce = $this->nonce();
            $url .= $path;
            $query = array_merge(
                array(
                    'tonce' => $tonce,
                    'apikey' => $this->apiKey
                ), $params
            );

            $url .= '?' . $this->urlencode($query);
            $headers = array(
                'Content-Type' => 'application/json',
                'Authorization' => $this->_encode($query),
            );

            if ($method === 'POST') {
                if ($query) {
                    $body = $this->json($query);
                }
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    private function _encode($params) {
        ksort($params);
        $params['secret'] = $this->secret;
        return hash('sha256', http_build_query($params));
    }

}