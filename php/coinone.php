<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

class coinone extends Exchange {

    public function describe () {
        return array_replace_recursive (parent::describe (), array (
            'id' => 'coinone',
            'name' => 'CoinOne',
            'countries' => 'KR', // Korea
            'rateLimit' => 90,
            'version' => 'v2',
            'has' => array (
                'CORS' => true,
                'publicAPI' => true,
                'fetchBalance' => true,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => true,
                'fetchOrders' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'withdraw' => true,
            ),
            'urls' => array (
                'logo' => 'https://user-images.githubusercontent.com/629338/35319687-5ca529cc-00fa-11e8-863a-89f169a511e1.png',
                'api' => 'https://api.coinone.co.kr/',
                'www' => 'https://coinone.co.kr',
                'doc' => array (
                    'http://doc.coinone.co.kr/',
                ),
            ),
            'requiredCredentials' => array (
                'apiKey' => true,
                'secret' => true,
            ),
            'api' => array (
                'public' => array (
                    'get' => array (
                        'orderbook/',
                        'trades/',
                        'ticker/',
                    ),
                ),
                'private' => array (
                    'post' => array (
                        'account/btc_deposit_address/',
                        'account/balance/',
                        'account/daily_balance/',
                        'account/user_info/',
                        'account/virtual_account/',
                        'order/cancel_all/',
                        'order/cancel/',
                        'order/limit_buy/',
                        'order/limit_sell/',
                        'order/complete_orders/',
                        'order/limit_orders/',
                        'order/order_info/',
                        'transaction/auth_number/',
                        'transaction/history/',
                        'transaction/krw/history/',
                        'transaction/btc/',
                        'transaction/coin/',
                    ),
                ),
            ),
            'markets' => array (
                'BTC/KRW' => array (
                    'id' => 'btc',
                    'symbol' => 'BTC/KRW',
                    'base' => 'BTC',
                    'quote' => 'KRW',
                ),
                'BTG/KRW' => array (
                    'id' => 'btg',
                    'symbol' => 'BTG/KRW',
                    'base' => 'BTG',
                    'quote' => 'KRW',
                ),
                'IOT/KRW' => array (
                    'id' => 'iota',
                    'symbol' => 'IOT/KRW',
                    'base' => 'IOT',
                    'quote' => 'KRW',
                ),
                'LTC/KRW' => array (
                    'id' => 'ltc',
                    'symbol' => 'LTC/KRW',
                    'base' => 'LTC',
                    'quote' => 'KRW',
                ),
                'QTUM/KRW' => array (
                    'id' => 'qtum',
                    'symbol' => 'QTUM/KRW',
                    'base' => 'QTUM',
                    'quote' => 'KRW',
                ),
                'XRP/KRW' => array (
                    'id' => 'xrp',
                    'symbol' => 'XRP/KRW',
                    'base' => 'XRP',
                    'quote' => 'KRW',
                ),
                'ETH/KRW' => array (
                    'id' => 'eth',
                    'symbol' => 'ETH/KRW',
                    'base' => 'ETH',
                    'quote' => 'KRW',
                ),
                'ETC/KRW' => array (
                    'id' => 'etc',
                    'symbol' => 'ETC/KRW',
                    'base' => 'ETC',
                    'quote' => 'KRW',
                ),
                'BCH/KRW' => array (
                    'id' => 'bch',
                    'symbol' => 'BCH/KRW',
                    'base' => 'BCH',
                    'quote' => 'KRW',
                ),
            ),
            'fees' => array (
                'trading' => array (
                    'tierBased' => true,
                    'percentage' => true,
                    'taker' => 0.1 / 100,
                    'maker' => 0.1 / 100,
                    'tiers' => array (
                        'taker' => [
                            [100000000, 0.1 / 100],
                            [10000000000, 0.09 / 100],
                            [50000000000, 0.08 / 100],
                            [100000000000, 0.07 / 100],
                            [200000000000, 0.06 / 100],
                            [300000000000, 0.05 / 100],
                            [400000000000, 0.04 / 100],
                            [500000000000, 0.03 / 100],
                            [999900000000000, 0.02 / 100],
                        ],
                        'maker' => [
                            [100000000, 0.1 / 100],
                            [10000000000, 0.08 / 100],
                            [50000000000, 0.06 / 100],
                            [100000000000, 0.04 / 100],
                            [200000000000, 0.02 / 100],
                            [300000000000, 0.01 / 100],
                            [400000000000, 0],
                            [500000000000, 0],
                            [999900000000000, 0],
                        ],
                    ),
                ),
            ),
        ));
    }

    public function fetch_balance ($params = array ()) {
        $res = $this->privateGetV2AccountBalance ();
        $result = array ( 'info' => $res );
        $this->market.forEach ((mrk) => {
            $id = mrk.id;
            if (is_array ($res) && array_key_exists ($id, $res)) {
                $balance = $res[$id];
                $account = array (
                    'free' => floatval ($balance['avail']),
                    'used' => floatval ($balance['balance']) - floatval ($balance['avail']),
                    'total' => floatval ($balance['balance']),
                );
                $result[mrk.symbol] = $account;
            }
        });
        return $this->parse_balance($result);
    }

    public function fetch_order_book ($symbol, $params = array ()) {
        $market = $this->market ($symbol);
        $res = $this->publicGetOrderbook (array_merge (array (
            'currency' => $market['id'],
            'format' => 'json',
        ), $params));
        return $this->parse_order_book($res, null, 'bid', 'ask', 'price', 'qty');
    }

    public function fetch_ticker ($symbol, $params = array ()) {
        $market = $this->market ($symbol);
        $timestamp = $this->milliseconds ();
        $res = $this->publicGetTicker (array_merge (array (
            'currency' => $market['id'],
            'format' => 'json',
        ), $params));
        $ticker = $res;
        $baseVolume = $this->safe_float($ticker, 'volume');
        return array (
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'high' => $this->safe_float($ticker, 'high'),
            'low' => $this->safe_float($ticker, 'low'),
            'bid' => $this->safe_float($ticker, 'last'),
            'ask' => $this->safe_float($ticker, 'last'),
            'vwap' => null,
            'open' => null,
            'close' => null,
            'first' => $this->safe_float($ticker, 'first'),
            'last' => $this->safe_float($ticker, 'last'),
            'change' => $this->safe_float($ticker, 'yesterday_last') - $this->safe_float($ticker, 'last'),
            'percentage' => null,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => null,
            'info' => $ticker,
        );
    }

    public function parse_trade ($trade, $symbol = null) {
        $timestamp = intval ($trade['timestamp']) * 1000;
        $side = 'buy';
        return array (
            'id' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'order' => null,
            'symbol' => $symbol,
            'type' => null,
            'side' => $side,
            'price' => $this->safe_float($trade, 'price'),
            'amount' => $this->safe_float($trade, 'qty'),
            'fee' => null,
            'info' => $trade,
        );
    }

    public function fetch_trades ($symbol, $since = null, $limit = null, $params = array ()) {
        $market = $this->market ($symbol);
        $result = $this->publicGetTrades (array_merge (array (
            'currency' => $market['id'],
            'period' => 'hour',
            'format' => 'json',
        ), $params));
        $trades = $result['completeOrders'];
        return $this->parse_trades($trades, $symbol);
    }

    public function cancel_order ($id, $symbol = null, $params = array ()) {
        // throw new ExchangeError ($this->id . ' cancelOrder () is not fully implemented yet');
        $method = 'privatePostOrderCancel';
        return $this->$method (array ( 'orderID' => $id ));
    }

    public function sign ($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $request = $this->implode_params($path, $params);
        $query = $this->omit ($params, $this->extract_params($path));
        $url = $this->urls['api'] . '/' . $request;
        $headers = array ();
        if ($api === 'public') {
            if ($query) {
                $url .= '?' . $this->urlencode ($query);
            }
        } else {
            $this->check_required_credentials();
            $nonce = (string) $this->nonce ();
            $plj = array (
                'access_token' => $this->apiKey,
                'nonce' => $nonce,
            );
            $payload = Buffer.from (json_encode ($plj)).toString ('base64');
            $body = $payload;
            $signature = $this->hmac ($body, $this->encode (strtoupper ($this->secret)), 'sha512', 'hex');
            $headers = array (
                'content-type' => 'application/json',
                'X-COINONE-PAYLOAD' => $body,
                'X-COINONE-SIGNATURE' => $signature,
            );
        }
        return array ( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors ($code, $reason, $url, $method, $headers, $body) {
        if ($code === 200) {
            if (($body[0] === '{') || ($body[0] === '[')) {
                $response = json_decode ($body, $as_associative_array = true);
                if (is_array ($response) && array_key_exists ('result', $response)) {
                    $success = $response['result'];
                    if ($success !== 'success') {
                        if (is_array ($response) && array_key_exists ('errorCode', $response)) {
                            throw new ExchangeError ($this->id . ' malformed $response => no "message" in $response => ' . $body);
                        }
                        throw new ExchangeError ($this->id . ' error returned => ' . $body);
                    }
                } else {
                    throw new ExchangeError ($this->id . ' malformed $response => no "result" in $response => ' . $body);
                }
            } else {
                throw new ExchangeError ($this->id . ' returned a non-JSON reply => ' . $body);
            }
        }
    }
}
