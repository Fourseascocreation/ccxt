// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

import querystring from "querystring";
import * as models from "./models";
import * as ccxt from "../../../pkg/ccxt/models";
import Exchange from "../../../pkg/ccxt/exchange";

export default class ExchangeAPI extends Exchange {
  info: ccxt.ExchangeInfo;
  config: ccxt.ExchangeConfig;
  constructor(config: ccxt.ExchangeConfig) {
    super();
    if (!config.hasOwnProperty("timeout") || config.timeout === 0) {
      config.timeout = 10 * 1000;
    }
    this.config = config;
    const infoFile =
      "/Users/stefan/Github/ccxt/templates/internal/app/bitmex/bitmex.json";
    this.info = require(infoFile);
  }
  async apiRequest(
    method: string,
    reqURL: string,
    params: Object,
    data: Object
  ): Promise<any> {
    const url = `${reqURL}?${querystring.stringify(params)}`;
    try {
      const res = await this.client({
        method,
        url,
        data
      });
      return res;
    } catch (e) {
      throw e;
    }
  }
  parseEndpoint(endpoint: string): string {
    let baseUrl = this.info.urls.www;
    if (this.config.test) {
      baseUrl = this.info.urls.test;
    }
    return baseUrl + this.info.urls.api + endpoint;
  }

  // PublicGetPublicGetAnnouncement method for /announcement
  async PublicGetAnnouncement(params: Object): Promise<models.Announcement[]> {
    const reqUrl = this.parseEndpoint("announcement");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetAnnouncementUrgent method for /announcement/urgent
  async PublicGetAnnouncementUrgent(
    params: Object
  ): Promise<models.Announcement[]> {
    const reqUrl = this.parseEndpoint("announcement/urgent");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetFunding method for /funding
  async PublicGetFunding(params: Object): Promise<models.Funding[]> {
    const reqUrl = this.parseEndpoint("funding");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetInstrument method for /instrument
  async PublicGetInstrument(params: Object): Promise<models.Instrument[]> {
    const reqUrl = this.parseEndpoint("instrument");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetInstrumentActive method for /instrument/active
  async PublicGetInstrumentActive(
    params: Object
  ): Promise<models.Instrument[]> {
    const reqUrl = this.parseEndpoint("instrument/active");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetInstrumentActiveAndIndices method for /instrument/activeAndIndices
  async PublicGetInstrumentActiveAndIndices(
    params: Object
  ): Promise<models.Instrument[]> {
    const reqUrl = this.parseEndpoint("instrument/activeAndIndices");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetInstrumentActiveIntervals method for /instrument/activeIntervals
  async PublicGetInstrumentActiveIntervals(
    params: Object
  ): Promise<models.InstrumentInterval> {
    const reqUrl = this.parseEndpoint("instrument/activeIntervals");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetInstrumentCompositeIndex method for /instrument/compositeIndex
  async PublicGetInstrumentCompositeIndex(
    params: Object
  ): Promise<models.Instrument[]> {
    const reqUrl = this.parseEndpoint("instrument/compositeIndex");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetInstrumentIndices method for /instrument/indices
  async PublicGetInstrumentIndices(
    params: Object
  ): Promise<models.Instrument[]> {
    const reqUrl = this.parseEndpoint("instrument/indices");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetInsurance method for /insurance
  async PublicGetInsurance(params: Object): Promise<models.Insurance[]> {
    const reqUrl = this.parseEndpoint("insurance");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetLeaderboard method for /leaderboard
  async PublicGetLeaderboard(params: Object): Promise<models.Leaderboard[]> {
    const reqUrl = this.parseEndpoint("leaderboard");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetLeaderboardName method for /leaderboard/name
  async PublicGetLeaderboardName(params: Object): Promise<models.Leaderboard> {
    const reqUrl = this.parseEndpoint("leaderboard/name");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetLiquidation method for /liquidation
  async PublicGetLiquidation(params: Object): Promise<models.Liquidation[]> {
    const reqUrl = this.parseEndpoint("liquidation");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetOrderBookL2 method for /orderBook/L2
  async PublicGetOrderBookL2(params: Object): Promise<models.OrderBookL2[]> {
    const reqUrl = this.parseEndpoint("orderBook/L2");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetQuote method for /quote
  async PublicGetQuote(params: Object): Promise<models.Quote[]> {
    const reqUrl = this.parseEndpoint("quote");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetQuoteBucketed method for /quote/bucketed
  async PublicGetQuoteBucketed(params: Object): Promise<models.Quote[]> {
    const reqUrl = this.parseEndpoint("quote/bucketed");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetSchema method for /schema
  async PublicGetSchema(params: Object): Promise<Object> {
    const reqUrl = this.parseEndpoint("schema");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetSchemaWebsocketHelp method for /schema/websocketHelp
  async PublicGetSchemaWebsocketHelp(params: Object): Promise<Object> {
    const reqUrl = this.parseEndpoint("schema/websocketHelp");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetSettlement method for /settlement
  async PublicGetSettlement(params: Object): Promise<models.Settlement[]> {
    const reqUrl = this.parseEndpoint("settlement");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetStats method for /stats
  async PublicGetStats(params: Object): Promise<models.Stats[]> {
    const reqUrl = this.parseEndpoint("stats");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetStatsHistory method for /stats/history
  async PublicGetStatsHistory(params: Object): Promise<models.StatsHistory[]> {
    const reqUrl = this.parseEndpoint("stats/history");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetTrade method for /trade
  async PublicGetTrade(params: Object): Promise<models.Trade[]> {
    const reqUrl = this.parseEndpoint("trade");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PublicGetPublicGetTradeBucketed method for /trade/bucketed
  async PublicGetTradeBucketed(params: Object): Promise<models.TradeBin[]> {
    const reqUrl = this.parseEndpoint("trade/bucketed");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateGetPrivateGetApiKey method for /apiKey
  async PrivateGetApiKey(params: Object): Promise<models.APIKey[]> {
    const reqUrl = this.parseEndpoint("apiKey");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateGetPrivateGetChat method for /chat
  async PrivateGetChat(params: Object): Promise<models.Chat[]> {
    const reqUrl = this.parseEndpoint("chat");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateGetPrivateGetChatChannels method for /chat/channels
  async PrivateGetChatChannels(params: Object): Promise<models.ChatChannel[]> {
    const reqUrl = this.parseEndpoint("chat/channels");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateGetPrivateGetChatConnected method for /chat/connected
  async PrivateGetChatConnected(
    params: Object
  ): Promise<models.ConnectedUsers> {
    const reqUrl = this.parseEndpoint("chat/connected");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateGetPrivateGetExecution method for /execution
  async PrivateGetExecution(params: Object): Promise<models.Execution[]> {
    const reqUrl = this.parseEndpoint("execution");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateGetPrivateGetExecutionTradeHistory method for /execution/tradeHistory
  async PrivateGetExecutionTradeHistory(
    params: Object
  ): Promise<models.Execution[]> {
    const reqUrl = this.parseEndpoint("execution/tradeHistory");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateGetPrivateGetGlobalNotification method for /globalNotification
  async PrivateGetGlobalNotification(
    params: Object
  ): Promise<models.GlobalNotification[]> {
    const reqUrl = this.parseEndpoint("globalNotification");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateGetPrivateGetOrder method for /order
  async PrivateGetOrder(params: Object): Promise<models.Order[]> {
    const reqUrl = this.parseEndpoint("order");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateGetPrivateGetPosition method for /position
  async PrivateGetPosition(params: Object): Promise<models.Position[]> {
    const reqUrl = this.parseEndpoint("position");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateGetPrivateGetUser method for /user
  async PrivateGetUser(params: Object): Promise<models.User> {
    const reqUrl = this.parseEndpoint("user");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateGetPrivateGetUserAffiliateStatus method for /user/affiliateStatus
  async PrivateGetUserAffiliateStatus(
    params: Object
  ): Promise<models.Affiliate> {
    const reqUrl = this.parseEndpoint("user/affiliateStatus");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateGetPrivateGetUserCheckReferralCode method for /user/checkReferralCode
  async PrivateGetUserCheckReferralCode(params: Object): Promise<number> {
    const reqUrl = this.parseEndpoint("user/checkReferralCode");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateGetPrivateGetUserCommission method for /user/commission
  async PrivateGetUserCommission(params: Object): Promise<Object> {
    const reqUrl = this.parseEndpoint("user/commission");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateGetPrivateGetUserDepositAddress method for /user/depositAddress
  async PrivateGetUserDepositAddress(params: Object): Promise<string> {
    const reqUrl = this.parseEndpoint("user/depositAddress");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateGetPrivateGetUserExecutionHistory method for /user/executionHistory
  async PrivateGetUserExecutionHistory(
    params: Object
  ): Promise<models.Execution[]> {
    const reqUrl = this.parseEndpoint("user/executionHistory");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateGetPrivateGetUserMargin method for /user/margin
  async PrivateGetUserMargin(params: Object): Promise<models.Margin[]> {
    const reqUrl = this.parseEndpoint("user/margin");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateGetPrivateGetUserMinWithdrawalFee method for /user/minWithdrawalFee
  async PrivateGetUserMinWithdrawalFee(params: Object): Promise<Object> {
    const reqUrl = this.parseEndpoint("user/minWithdrawalFee");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateGetPrivateGetUserWallet method for /user/wallet
  async PrivateGetUserWallet(params: Object): Promise<models.Wallet> {
    const reqUrl = this.parseEndpoint("user/wallet");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateGetPrivateGetUserWalletHistory method for /user/walletHistory
  async PrivateGetUserWalletHistory(
    params: Object
  ): Promise<models.Transaction[]> {
    const reqUrl = this.parseEndpoint("user/walletHistory");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateGetPrivateGetUserWalletSummary method for /user/walletSummary
  async PrivateGetUserWalletSummary(
    params: Object
  ): Promise<models.Transaction[]> {
    const reqUrl = this.parseEndpoint("user/walletSummary");
    try {
      const res = await this.apiRequest("GET", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivatePostPrivatePostApiKey method for /apiKey
  async PrivatePostApiKey(
    params: Object,
    body: Object
  ): Promise<models.APIKey> {
    const reqUrl = this.parseEndpoint("apiKey");
    try {
      const res = await this.apiRequest("POST", reqUrl, params, body);
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivatePostPrivatePostApiKeyDisable method for /apiKey/disable
  async PrivatePostApiKeyDisable(
    params: Object,
    body: Object
  ): Promise<models.APIKey> {
    const reqUrl = this.parseEndpoint("apiKey/disable");
    try {
      const res = await this.apiRequest("POST", reqUrl, params, body);
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivatePostPrivatePostApiKeyEnable method for /apiKey/enable
  async PrivatePostApiKeyEnable(
    params: Object,
    body: Object
  ): Promise<models.APIKey> {
    const reqUrl = this.parseEndpoint("apiKey/enable");
    try {
      const res = await this.apiRequest("POST", reqUrl, params, body);
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivatePostPrivatePostChat method for /chat
  async PrivatePostChat(params: Object, body: Object): Promise<models.Chat> {
    const reqUrl = this.parseEndpoint("chat");
    try {
      const res = await this.apiRequest("POST", reqUrl, params, body);
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivatePostPrivatePostOrder method for /order
  async PrivatePostOrder(params: Object, body: Object): Promise<models.Order> {
    const reqUrl = this.parseEndpoint("order");
    try {
      const res = await this.apiRequest("POST", reqUrl, params, body);
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivatePostPrivatePostOrderBulk method for /order/bulk
  async PrivatePostOrderBulk(
    params: Object,
    body: Object
  ): Promise<models.Order[]> {
    const reqUrl = this.parseEndpoint("order/bulk");
    try {
      const res = await this.apiRequest("POST", reqUrl, params, body);
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivatePostPrivatePostOrderCancelAllAfter method for /order/cancelAllAfter
  async PrivatePostOrderCancelAllAfter(
    params: Object,
    body: Object
  ): Promise<Object> {
    const reqUrl = this.parseEndpoint("order/cancelAllAfter");
    try {
      const res = await this.apiRequest("POST", reqUrl, params, body);
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivatePostPrivatePostPositionIsolate method for /position/isolate
  async PrivatePostPositionIsolate(
    params: Object,
    body: Object
  ): Promise<models.Position> {
    const reqUrl = this.parseEndpoint("position/isolate");
    try {
      const res = await this.apiRequest("POST", reqUrl, params, body);
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivatePostPrivatePostPositionLeverage method for /position/leverage
  async PrivatePostPositionLeverage(
    params: Object,
    body: Object
  ): Promise<models.Position> {
    const reqUrl = this.parseEndpoint("position/leverage");
    try {
      const res = await this.apiRequest("POST", reqUrl, params, body);
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivatePostPrivatePostPositionRiskLimit method for /position/riskLimit
  async PrivatePostPositionRiskLimit(
    params: Object,
    body: Object
  ): Promise<models.Position> {
    const reqUrl = this.parseEndpoint("position/riskLimit");
    try {
      const res = await this.apiRequest("POST", reqUrl, params, body);
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivatePostPrivatePostPositionTransferMargin method for /position/transferMargin
  async PrivatePostPositionTransferMargin(
    params: Object,
    body: Object
  ): Promise<models.Position> {
    const reqUrl = this.parseEndpoint("position/transferMargin");
    try {
      const res = await this.apiRequest("POST", reqUrl, params, body);
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivatePostPrivatePostUserCancelWithdrawal method for /user/cancelWithdrawal
  async PrivatePostUserCancelWithdrawal(
    params: Object,
    body: Object
  ): Promise<models.Transaction> {
    const reqUrl = this.parseEndpoint("user/cancelWithdrawal");
    try {
      const res = await this.apiRequest("POST", reqUrl, params, body);
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivatePostPrivatePostUserCommunicationToken method for /user/communicationToken
  async PrivatePostUserCommunicationToken(
    params: Object,
    body: Object
  ): Promise<models.CommunicationToken[]> {
    const reqUrl = this.parseEndpoint("user/communicationToken");
    try {
      const res = await this.apiRequest("POST", reqUrl, params, body);
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivatePostPrivatePostUserConfirmEmail method for /user/confirmEmail
  async PrivatePostUserConfirmEmail(
    params: Object,
    body: Object
  ): Promise<models.AccessToken> {
    const reqUrl = this.parseEndpoint("user/confirmEmail");
    try {
      const res = await this.apiRequest("POST", reqUrl, params, body);
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivatePostPrivatePostUserConfirmWithdrawal method for /user/confirmWithdrawal
  async PrivatePostUserConfirmWithdrawal(
    params: Object,
    body: Object
  ): Promise<models.Transaction> {
    const reqUrl = this.parseEndpoint("user/confirmWithdrawal");
    try {
      const res = await this.apiRequest("POST", reqUrl, params, body);
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivatePostPrivatePostUserLogout method for /user/logout
  async PrivatePostUserLogout(params: Object, body: Object): Promise<Object> {
    const reqUrl = this.parseEndpoint("user/logout");
    try {
      const res = await this.apiRequest("POST", reqUrl, params, body);
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivatePostPrivatePostUserPreferences method for /user/preferences
  async PrivatePostUserPreferences(
    params: Object,
    body: Object
  ): Promise<models.UserPreferences> {
    const reqUrl = this.parseEndpoint("user/preferences");
    try {
      const res = await this.apiRequest("POST", reqUrl, params, body);
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivatePostPrivatePostUserRequestWithdrawal method for /user/requestWithdrawal
  async PrivatePostUserRequestWithdrawal(
    params: Object,
    body: Object
  ): Promise<models.Transaction> {
    const reqUrl = this.parseEndpoint("user/requestWithdrawal");
    try {
      const res = await this.apiRequest("POST", reqUrl, params, body);
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivatePutPrivatePutOrder method for /order
  async PrivatePutOrder(params: Object, body: Object): Promise<models.Order> {
    const reqUrl = this.parseEndpoint("order");
    try {
      const res = await this.apiRequest("PUT", reqUrl, params, body);
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivatePutPrivatePutOrderBulk method for /order/bulk
  async PrivatePutOrderBulk(
    params: Object,
    body: Object
  ): Promise<models.Order[]> {
    const reqUrl = this.parseEndpoint("order/bulk");
    try {
      const res = await this.apiRequest("PUT", reqUrl, params, body);
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateDeletePrivateDeleteApiKey method for /apiKey
  async PrivateDeleteApiKey(params: Object): Promise<Object> {
    const reqUrl = this.parseEndpoint("apiKey");
    try {
      const res = await this.apiRequest("DELETE", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateDeletePrivateDeleteOrder method for /order
  async PrivateDeleteOrder(params: Object): Promise<models.Order[]> {
    const reqUrl = this.parseEndpoint("order");
    try {
      const res = await this.apiRequest("DELETE", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }

  // PrivateDeletePrivateDeleteOrderAll method for /order/all
  async PrivateDeleteOrderAll(params: Object): Promise<models.Order[]> {
    const reqUrl = this.parseEndpoint("order/all");
    try {
      const res = await this.apiRequest("DELETE", reqUrl, params, {});
      return res.data;
    } catch (e) {
      throw e;
    }
  }
}
