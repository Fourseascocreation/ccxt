import Exchange from './abstract/binance.js';
import { Int, OrderSide, Balances, OrderType, Trade, OHLCV, Order, FundingRateHistory, OpenInterest, Liquidation, OrderRequest, Str, Transaction, Ticker, OrderBook, Tickers, Market, Greeks, Strings, Currency, MarketInterface } from './base/types.js';
/**
 * @class binance
 * @extends Exchange
 */
export default class binance extends Exchange {
    describe(): undefined;
    isInverse(type: any, subType?: undefined): boolean;
    isLinear(type: any, subType?: undefined): boolean;
    setSandboxMode(enable: any): void;
    convertExpireDate(date: any): string;
    createExpiredOptionMarket(symbol: any): MarketInterface;
    market(symbol: any): any;
    safeMarket(marketId?: undefined, market?: undefined, delimiter?: undefined, marketType?: undefined): MarketInterface;
    costToPrecision(symbol: any, cost: any): any;
    currencyToPrecision(code: any, fee: any, networkCode?: undefined): any;
    nonce(): number;
    fetchTime(params?: {}): Promise<Int>;
    fetchCurrencies(params?: {}): Promise<{} | undefined>;
    fetchMarkets(params?: {}): Promise<never[]>;
    parseMarket(market: any): Market;
    parseBalanceHelper(entry: any): import("./base/types.js").Account;
    parseBalance(response: any, type?: undefined, marginMode?: undefined): Balances;
    fetchBalance(params?: {}): Promise<Balances>;
    fetchOrderBook(symbol: string, limit?: Int, params?: {}): Promise<OrderBook>;
    parseTicker(ticker: any, market?: Market): Ticker;
    fetchStatus(params?: {}): Promise<{
        status: Str;
        updated: undefined;
        eta: undefined;
        url: undefined;
        info: any;
    }>;
    fetchTicker(symbol: string, params?: {}): Promise<Ticker>;
    fetchBidsAsks(symbols?: Strings, params?: {}): Promise<import("./base/types.js").Dictionary<Ticker>>;
    fetchLastPrices(symbols?: Strings, params?: {}): Promise<any>;
    parseLastPrice(info: any, market?: Market): {
        symbol: string;
        timestamp: Int;
        datetime: string | undefined;
        price: import("./base/types.js").Num;
        side: undefined;
        info: any;
    };
    fetchTickers(symbols?: Strings, params?: {}): Promise<Tickers>;
    parseOHLCV(ohlcv: any, market?: Market): OHLCV;
    fetchOHLCV(symbol: string, timeframe?: string, since?: Int, limit?: Int, params?: {}): Promise<OHLCV[]>;
    parseTrade(trade: any, market?: Market): Trade;
    fetchTrades(symbol: string, since?: Int, limit?: Int, params?: {}): Promise<Trade[]>;
    editSpotOrder(id: string, symbol: any, type: any, side: any, amount: any, price?: undefined, params?: {}): Promise<Order>;
    editSpotOrderRequest(id: string, symbol: any, type: any, side: any, amount: any, price?: undefined, params?: {}): any;
    editContractOrder(id: string, symbol: any, type: any, side: any, amount: any, price?: undefined, params?: {}): Promise<Order>;
    editOrder(id: string, symbol: any, type: any, side: any, amount?: undefined, price?: undefined, params?: {}): Promise<Order>;
    parseOrderStatus(status: any): Str;
    parseOrder(order: any, market?: Market): Order;
    createOrders(orders: OrderRequest[], params?: {}): Promise<Order[]>;
    createOrder(symbol: string, type: OrderType, side: OrderSide, amount: any, price?: undefined, params?: {}): Promise<Order>;
    createOrderRequest(symbol: string, type: OrderType, side: OrderSide, amount: any, price?: undefined, params?: {}): any;
    fetchOrder(id: string, symbol?: Str, params?: {}): Promise<Order>;
    fetchOrders(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<Order[]>;
    fetchOpenOrders(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<Order[]>;
    fetchClosedOrders(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<Order[]>;
    fetchCanceledOrders(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<any>;
    cancelOrder(id: string, symbol?: Str, params?: {}): Promise<Order>;
    cancelAllOrders(symbol?: Str, params?: {}): Promise<any>;
    cancelOrders(ids: Int[], symbol?: Str, params?: {}): Promise<Order[]>;
    fetchOrderTrades(id: string, symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<Trade[]>;
    fetchMyTrades(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<Trade[]>;
    fetchMyDustTrades(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<any>;
    parseDustTrade(trade: any, market?: Market): {
        id: undefined;
        timestamp: Int;
        datetime: string | undefined;
        symbol: undefined;
        order: Str;
        type: undefined;
        takerOrMaker: undefined;
        side: undefined;
        amount: number;
        price: number;
        cost: number;
        fee: {
            currency: any;
            cost: number;
        };
        info: any;
    };
    fetchDeposits(code?: Str, since?: Int, limit?: Int, params?: {}): Promise<Transaction[]>;
    fetchWithdrawals(code?: Str, since?: Int, limit?: Int, params?: {}): Promise<Transaction[]>;
    parseTransactionStatusByType(status: any, type?: undefined): Str;
    parseTransaction(transaction: any, currency?: Currency): Transaction;
    parseTransferStatus(status: any): Str;
    parseTransfer(transfer: any, currency?: Currency): {
        info: any;
        id: Str;
        timestamp: Int;
        datetime: string | undefined;
        currency: string;
        amount: import("./base/types.js").Num;
        fromAccount: undefined;
        toAccount: undefined;
        status: Str;
    };
    parseIncome(income: any, market?: Market): {
        info: any;
        symbol: string;
        code: string;
        timestamp: Int;
        datetime: string | undefined;
        id: Str;
        amount: import("./base/types.js").Num;
    };
    transfer(code: string, amount: any, fromAccount: any, toAccount: any, params?: {}): Promise<{
        info: any;
        id: Str;
        timestamp: Int;
        datetime: string | undefined;
        currency: string;
        amount: import("./base/types.js").Num;
        fromAccount: undefined;
        toAccount: undefined;
        status: Str;
    }>;
    fetchTransfers(code?: Str, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchDepositAddress(code: string, params?: {}): Promise<{
        currency: string;
        address: Str;
        tag: Str;
        network: undefined;
        info: any;
    }>;
    fetchTransactionFees(codes?: undefined, params?: {}): Promise<{
        withdraw: {};
        deposit: {};
        info: any;
    }>;
    fetchDepositWithdrawFees(codes?: Strings, params?: {}): Promise<any>;
    parseDepositWithdrawFee(fee: any, currency?: Currency): any;
    withdraw(code: string, amount: any, address: any, tag?: undefined, params?: {}): Promise<Transaction>;
    parseTradingFee(fee: any, market?: Market): {
        info: any;
        symbol: string;
        maker: number;
        taker: number;
    };
    fetchTradingFee(symbol: string, params?: {}): Promise<{
        info: any;
        symbol: string;
        maker: number;
        taker: number;
    }>;
    fetchTradingFees(params?: {}): Promise<{} | undefined>;
    futuresTransfer(code: string, amount: any, type: any, params?: {}): Promise<{
        info: any;
        id: Str;
        timestamp: Int;
        datetime: string | undefined;
        currency: string;
        amount: import("./base/types.js").Num;
        fromAccount: undefined;
        toAccount: undefined;
        status: Str;
    }>;
    fetchFundingRate(symbol: string, params?: {}): Promise<{
        info: any;
        symbol: string;
        markPrice: import("./base/types.js").Num;
        indexPrice: import("./base/types.js").Num;
        interestRate: import("./base/types.js").Num;
        estimatedSettlePrice: import("./base/types.js").Num;
        timestamp: Int;
        datetime: string | undefined;
        fundingRate: import("./base/types.js").Num;
        fundingTimestamp: Int;
        fundingDatetime: string | undefined;
        nextFundingRate: undefined;
        nextFundingTimestamp: undefined;
        nextFundingDatetime: undefined;
        previousFundingRate: undefined;
        previousFundingTimestamp: undefined;
        previousFundingDatetime: undefined;
    }>;
    fetchFundingRateHistory(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<FundingRateHistory[]>;
    fetchFundingRates(symbols?: Strings, params?: {}): Promise<any>;
    parseFundingRate(contract: any, market?: Market): {
        info: any;
        symbol: string;
        markPrice: import("./base/types.js").Num;
        indexPrice: import("./base/types.js").Num;
        interestRate: import("./base/types.js").Num;
        estimatedSettlePrice: import("./base/types.js").Num;
        timestamp: Int;
        datetime: string | undefined;
        fundingRate: import("./base/types.js").Num;
        fundingTimestamp: Int;
        fundingDatetime: string | undefined;
        nextFundingRate: undefined;
        nextFundingTimestamp: undefined;
        nextFundingDatetime: undefined;
        previousFundingRate: undefined;
        previousFundingTimestamp: undefined;
        previousFundingDatetime: undefined;
    };
    parseAccountPositions(account: any): never[];
    parseAccountPosition(position: any, market?: Market): {
        info: any;
        id: undefined;
        symbol: Str;
        timestamp: Int;
        datetime: string | undefined;
        initialMargin: number;
        initialMarginPercentage: number;
        maintenanceMargin: number;
        maintenanceMarginPercentage: number;
        entryPrice: number;
        notional: number;
        leverage: number;
        unrealizedPnl: number;
        contracts: number;
        contractSize: any;
        marginRatio: undefined;
        liquidationPrice: undefined;
        markPrice: undefined;
        collateral: number;
        marginMode: undefined;
        side: undefined;
        hedged: boolean;
        percentage: undefined;
    };
    parsePositionRisk(position: any, market?: Market): {
        info: any;
        id: undefined;
        symbol: Str;
        contracts: number;
        contractSize: any;
        unrealizedPnl: number;
        leverage: number;
        liquidationPrice: number;
        collateral: number;
        notional: number;
        markPrice: number;
        entryPrice: number;
        timestamp: Int;
        initialMargin: number;
        initialMarginPercentage: number;
        maintenanceMargin: number;
        maintenanceMarginPercentage: number;
        marginRatio: undefined;
        datetime: string | undefined;
        marginMode: Str;
        marginType: Str;
        side: undefined;
        hedged: boolean;
        percentage: undefined;
        stopLossPrice: undefined;
        takeProfitPrice: undefined;
    };
    loadLeverageBrackets(reload?: boolean, params?: {}): Promise<any>;
    fetchLeverageTiers(symbols?: Strings, params?: {}): Promise<{}>;
    parseMarketLeverageTiers(info: any, market?: Market): never[];
    fetchPosition(symbol: string, params?: {}): Promise<import("./base/types.js").Position>;
    fetchOptionPositions(symbols?: Strings, params?: {}): Promise<import("./base/types.js").Position[]>;
    parsePosition(position: any, market?: Market): import("./base/types.js").Position;
    fetchPositions(symbols?: Strings, params?: {}): Promise<import("./base/types.js").Position[]>;
    fetchAccountPositions(symbols?: Strings, params?: {}): Promise<import("./base/types.js").Position[]>;
    fetchPositionsRisk(symbols?: Strings, params?: {}): Promise<import("./base/types.js").Position[]>;
    fetchFundingHistory(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<import("./base/types.js").FundingHistory[]>;
    setLeverage(leverage: any, symbol?: Str, params?: {}): Promise<any>;
    setMarginMode(marginMode: string, symbol?: Str, params?: {}): Promise<undefined>;
    setPositionMode(hedged: any, symbol?: Str, params?: {}): Promise<any>;
    fetchSettlementHistory(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchMySettlementHistory(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<any>;
    parseSettlement(settlement: any, market: any): {
        info: any;
        symbol: string;
        price: number;
        timestamp: Int;
        datetime: string | undefined;
    };
    parseSettlements(settlements: any, market: any): never[];
    fetchLedger(code?: Str, since?: Int, limit?: Int, params?: {}): Promise<any>;
    parseLedgerEntry(item: any, currency?: Currency): {
        id: Str;
        direction: undefined;
        account: undefined;
        referenceAccount: undefined;
        referenceId: Str;
        type: Str;
        currency: string;
        amount: number;
        timestamp: Int;
        datetime: string | undefined;
        before: undefined;
        after: undefined;
        status: undefined;
        fee: undefined;
        info: any;
    };
    parseLedgerEntryType(type: any): Str;
    sign(path: any, api?: string, method?: string, params?: {}, headers?: undefined, body?: undefined): {
        url: string;
        method: string;
        body: undefined;
        headers: undefined;
    };
    handleErrors(code: any, reason: any, url: any, method: any, headers: any, body: any, response: any, requestHeaders: any, requestBody: any): undefined;
    calculateRateLimiterCost(api: any, method: any, path: any, params: any, config?: {}): any;
    request(path: any, api?: string, method?: string, params?: {}, headers?: undefined, body?: undefined, config?: {}, context?: {}): Promise<any>;
    modifyMarginHelper(symbol: string, amount: any, addOrReduce: any, params?: {}): Promise<any>;
    parseMarginModification(data: any, market?: Market): {
        info: any;
        type: string;
        amount: import("./base/types.js").Num;
        code: undefined;
        symbol: string;
        status: string;
    };
    reduceMargin(symbol: string, amount: any, params?: {}): Promise<any>;
    addMargin(symbol: string, amount: any, params?: {}): Promise<any>;
    fetchCrossBorrowRate(code: string, params?: {}): Promise<{
        currency: string;
        rate: import("./base/types.js").Num;
        period: number;
        timestamp: Int;
        datetime: string | undefined;
        info: any;
    }>;
    fetchBorrowRateHistory(code: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    parseBorrowRateHistory(response: any, code: any, since: any, limit: any): any;
    parseBorrowRate(info: any, currency?: Currency): {
        currency: string;
        rate: import("./base/types.js").Num;
        period: number;
        timestamp: Int;
        datetime: string | undefined;
        info: any;
    };
    createGiftCode(code: string, amount: any, params?: {}): Promise<{
        info: any;
        id: Str;
        code: Str;
        currency: string;
        amount: any;
    }>;
    redeemGiftCode(giftcardCode: any, params?: {}): Promise<any>;
    verifyGiftCode(id: string, params?: {}): Promise<any>;
    fetchBorrowInterest(code?: Str, symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<any>;
    parseBorrowInterest(info: any, market?: Market): {
        account: string;
        symbol: Str;
        marginMode: string;
        currency: string;
        interest: import("./base/types.js").Num;
        interestRate: import("./base/types.js").Num;
        amountBorrowed: import("./base/types.js").Num;
        timestamp: import("./base/types.js").Num;
        datetime: string | undefined;
        info: any;
    };
    repayMargin(code: string, amount: any, symbol?: Str, params?: {}): Promise<{
        id: Int;
        currency: string;
        amount: undefined;
        symbol: undefined;
        timestamp: undefined;
        datetime: undefined;
        info: any;
    }>;
    borrowMargin(code: string, amount: any, symbol?: Str, params?: {}): Promise<{
        id: Int;
        currency: string;
        amount: undefined;
        symbol: undefined;
        timestamp: undefined;
        datetime: undefined;
        info: any;
    }>;
    parseMarginLoan(info: any, currency?: Currency): {
        id: Int;
        currency: string;
        amount: undefined;
        symbol: undefined;
        timestamp: undefined;
        datetime: undefined;
        info: any;
    };
    fetchOpenInterestHistory(symbol: string, timeframe?: string, since?: Int, limit?: Int, params?: {}): Promise<OpenInterest[]>;
    fetchOpenInterest(symbol: string, params?: {}): Promise<OpenInterest | undefined>;
    parseOpenInterest(interest: any, market?: Market): OpenInterest;
    fetchMyLiquidations(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<Liquidation[]>;
    parseLiquidation(liquidation: any, market?: Market): Liquidation;
    fetchGreeks(symbol: string, params?: {}): Promise<Greeks>;
    parseGreeks(greeks: any, market?: Market): {
        symbol: string;
        timestamp: undefined;
        datetime: undefined;
        delta: import("./base/types.js").Num;
        gamma: import("./base/types.js").Num;
        theta: import("./base/types.js").Num;
        vega: import("./base/types.js").Num;
        rho: undefined;
        bidSize: undefined;
        askSize: undefined;
        bidImpliedVolatility: import("./base/types.js").Num;
        askImpliedVolatility: import("./base/types.js").Num;
        markImpliedVolatility: import("./base/types.js").Num;
        bidPrice: undefined;
        askPrice: undefined;
        markPrice: import("./base/types.js").Num;
        lastPrice: undefined;
        underlyingPrice: undefined;
        info: any;
    };
}
