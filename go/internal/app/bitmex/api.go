package bitmex

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code
import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	"github.com/ccxt/ccxt/go/internal/app/bitmex/models"
)

func handleBodyErr(body []byte, err error) error {
	var exErr models.Error
	if err2 := json.Unmarshal(body, &exErr); err2 == nil {
		return fmt.Errorf("%s: %s", exErr.Error.Name, exErr.Error.Message)
	}
	var any interface{}
	_ = json.Unmarshal(body, &any)
	if exErr, ok := any.(models.Error); ok {
		return fmt.Errorf("%s: %s", exErr.Error.Name, exErr.Error.Message)
	}
	return fmt.Errorf("Error with decoding: %+v", any)
}

func (c *Exchange) apiRequest(method string, reqURL string, params *url.Values, body bytes.Buffer) ([]byte, error) {
	baseURL, err := url.Parse(reqURL)
	if err != nil {
		return nil, err
	}
	baseURL.RawQuery = params.Encode()
	var req *http.Request
	if len(body.Bytes()) > 0 {
		req, err = http.NewRequest(method, baseURL.String(), &body)
		if err != nil {
			return nil, err
		}
		req.Header.Add("Content-Type", http.DetectContentType(body.Bytes()))
	} else {
		req, err = http.NewRequest(method, baseURL.String(), nil)
		if err != nil {
			return nil, err
		}
	}
	req.Header.Add("Accept", "application/json")
	c.SignRequest(req, method, baseURL, body.Bytes())
	res, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()
	resBody, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return nil, err
	}
	if res.StatusCode >= 300 {
		err = fmt.Errorf("HTTP Response %d: %s", res.StatusCode, http.StatusText(res.StatusCode))
		return nil, handleBodyErr(resBody, err)
	}
	return resBody, nil
}

func (c *Exchange) parseEndpoint(endpoint string) string {
	baseURL := c.Info.URLs.WWW
	if c.Config.Test {
		baseURL = c.Info.URLs.Test
	}
	return baseURL + c.Info.URLs.API + endpoint
}

// PublicGetAnnouncement method for /announcement
func (c *Exchange) PublicGetAnnouncement(params *url.Values) (data []models.Announcement, err error) {
	reqURL := c.parseEndpoint("announcement")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetAnnouncementUrgent method for /announcement/urgent
func (c *Exchange) PublicGetAnnouncementUrgent(params *url.Values) (data []models.Announcement, err error) {
	reqURL := c.parseEndpoint("announcement/urgent")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetFunding method for /funding
func (c *Exchange) PublicGetFunding(params *url.Values) (data []models.Funding, err error) {
	reqURL := c.parseEndpoint("funding")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetInstrument method for /instrument
func (c *Exchange) PublicGetInstrument(params *url.Values) (data []models.Instrument, err error) {
	reqURL := c.parseEndpoint("instrument")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetInstrumentActive method for /instrument/active
func (c *Exchange) PublicGetInstrumentActive(params *url.Values) (data []models.Instrument, err error) {
	reqURL := c.parseEndpoint("instrument/active")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetInstrumentActiveAndIndices method for /instrument/activeAndIndices
func (c *Exchange) PublicGetInstrumentActiveAndIndices(params *url.Values) (data []models.Instrument, err error) {
	reqURL := c.parseEndpoint("instrument/activeAndIndices")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetInstrumentActiveIntervals method for /instrument/activeIntervals
func (c *Exchange) PublicGetInstrumentActiveIntervals(params *url.Values) (data models.InstrumentInterval, err error) {
	reqURL := c.parseEndpoint("instrument/activeIntervals")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetInstrumentCompositeIndex method for /instrument/compositeIndex
func (c *Exchange) PublicGetInstrumentCompositeIndex(params *url.Values) (data []models.Instrument, err error) {
	reqURL := c.parseEndpoint("instrument/compositeIndex")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetInstrumentIndices method for /instrument/indices
func (c *Exchange) PublicGetInstrumentIndices(params *url.Values) (data []models.Instrument, err error) {
	reqURL := c.parseEndpoint("instrument/indices")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetInsurance method for /insurance
func (c *Exchange) PublicGetInsurance(params *url.Values) (data []models.Insurance, err error) {
	reqURL := c.parseEndpoint("insurance")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetLeaderboard method for /leaderboard
func (c *Exchange) PublicGetLeaderboard(params *url.Values) (data []models.Leaderboard, err error) {
	reqURL := c.parseEndpoint("leaderboard")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetLeaderboardName method for /leaderboard/name
func (c *Exchange) PublicGetLeaderboardName(params *url.Values) (data models.Leaderboard, err error) {
	reqURL := c.parseEndpoint("leaderboard/name")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetLiquidation method for /liquidation
func (c *Exchange) PublicGetLiquidation(params *url.Values) (data []models.Liquidation, err error) {
	reqURL := c.parseEndpoint("liquidation")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetOrderBookL2 method for /orderBook/L2
func (c *Exchange) PublicGetOrderBookL2(params *url.Values) (data []models.OrderBookL2, err error) {
	reqURL := c.parseEndpoint("orderBook/L2")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetQuote method for /quote
func (c *Exchange) PublicGetQuote(params *url.Values) (data []models.Quote, err error) {
	reqURL := c.parseEndpoint("quote")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetQuoteBucketed method for /quote/bucketed
func (c *Exchange) PublicGetQuoteBucketed(params *url.Values) (data []models.Quote, err error) {
	reqURL := c.parseEndpoint("quote/bucketed")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetSchema method for /schema
func (c *Exchange) PublicGetSchema(params *url.Values) (data interface{}, err error) {
	reqURL := c.parseEndpoint("schema")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetSchemaWebsocketHelp method for /schema/websocketHelp
func (c *Exchange) PublicGetSchemaWebsocketHelp(params *url.Values) (data interface{}, err error) {
	reqURL := c.parseEndpoint("schema/websocketHelp")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetSettlement method for /settlement
func (c *Exchange) PublicGetSettlement(params *url.Values) (data []models.Settlement, err error) {
	reqURL := c.parseEndpoint("settlement")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetStats method for /stats
func (c *Exchange) PublicGetStats(params *url.Values) (data []models.Stats, err error) {
	reqURL := c.parseEndpoint("stats")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetStatsHistory method for /stats/history
func (c *Exchange) PublicGetStatsHistory(params *url.Values) (data []models.StatsHistory, err error) {
	reqURL := c.parseEndpoint("stats/history")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetTrade method for /trade
func (c *Exchange) PublicGetTrade(params *url.Values) (data []models.Trade, err error) {
	reqURL := c.parseEndpoint("trade")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PublicGetTradeBucketed method for /trade/bucketed
func (c *Exchange) PublicGetTradeBucketed(params *url.Values) (data []models.TradeBin, err error) {
	reqURL := c.parseEndpoint("trade/bucketed")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateGetApiKey method for /apiKey
func (c *Exchange) PrivateGetApiKey(params *url.Values) (data []models.APIKey, err error) {
	reqURL := c.parseEndpoint("apiKey")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateGetChat method for /chat
func (c *Exchange) PrivateGetChat(params *url.Values) (data []models.Chat, err error) {
	reqURL := c.parseEndpoint("chat")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateGetChatChannels method for /chat/channels
func (c *Exchange) PrivateGetChatChannels(params *url.Values) (data []models.ChatChannel, err error) {
	reqURL := c.parseEndpoint("chat/channels")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateGetChatConnected method for /chat/connected
func (c *Exchange) PrivateGetChatConnected(params *url.Values) (data models.ConnectedUsers, err error) {
	reqURL := c.parseEndpoint("chat/connected")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateGetExecution method for /execution
func (c *Exchange) PrivateGetExecution(params *url.Values) (data []models.Execution, err error) {
	reqURL := c.parseEndpoint("execution")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateGetExecutionTradeHistory method for /execution/tradeHistory
func (c *Exchange) PrivateGetExecutionTradeHistory(params *url.Values) (data []models.Execution, err error) {
	reqURL := c.parseEndpoint("execution/tradeHistory")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateGetGlobalNotification method for /globalNotification
func (c *Exchange) PrivateGetGlobalNotification(params *url.Values) (data []models.GlobalNotification, err error) {
	reqURL := c.parseEndpoint("globalNotification")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateGetOrder method for /order
func (c *Exchange) PrivateGetOrder(params *url.Values) (data []models.Order, err error) {
	reqURL := c.parseEndpoint("order")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateGetPosition method for /position
func (c *Exchange) PrivateGetPosition(params *url.Values) (data []models.Position, err error) {
	reqURL := c.parseEndpoint("position")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateGetUser method for /user
func (c *Exchange) PrivateGetUser(params *url.Values) (data models.User, err error) {
	reqURL := c.parseEndpoint("user")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateGetUserAffiliateStatus method for /user/affiliateStatus
func (c *Exchange) PrivateGetUserAffiliateStatus(params *url.Values) (data models.Affiliate, err error) {
	reqURL := c.parseEndpoint("user/affiliateStatus")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateGetUserCheckReferralCode method for /user/checkReferralCode
func (c *Exchange) PrivateGetUserCheckReferralCode(params *url.Values) (data float64, err error) {
	reqURL := c.parseEndpoint("user/checkReferralCode")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateGetUserCommission method for /user/commission
func (c *Exchange) PrivateGetUserCommission(params *url.Values) (data models.UserCommissionsBySymbol, err error) {
	reqURL := c.parseEndpoint("user/commission")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateGetUserDepositAddress method for /user/depositAddress
func (c *Exchange) PrivateGetUserDepositAddress(params *url.Values) (data string, err error) {
	reqURL := c.parseEndpoint("user/depositAddress")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateGetUserExecutionHistory method for /user/executionHistory
func (c *Exchange) PrivateGetUserExecutionHistory(params *url.Values) (data []models.Execution, err error) {
	reqURL := c.parseEndpoint("user/executionHistory")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateGetUserMargin method for /user/margin
func (c *Exchange) PrivateGetUserMargin(params *url.Values) (data []models.Margin, err error) {
	reqURL := c.parseEndpoint("user/margin")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateGetUserMinWithdrawalFee method for /user/minWithdrawalFee
func (c *Exchange) PrivateGetUserMinWithdrawalFee(params *url.Values) (data interface{}, err error) {
	reqURL := c.parseEndpoint("user/minWithdrawalFee")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateGetUserWallet method for /user/wallet
func (c *Exchange) PrivateGetUserWallet(params *url.Values) (data models.Wallet, err error) {
	reqURL := c.parseEndpoint("user/wallet")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateGetUserWalletHistory method for /user/walletHistory
func (c *Exchange) PrivateGetUserWalletHistory(params *url.Values) (data []models.Transaction, err error) {
	reqURL := c.parseEndpoint("user/walletHistory")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateGetUserWalletSummary method for /user/walletSummary
func (c *Exchange) PrivateGetUserWalletSummary(params *url.Values) (data []models.Transaction, err error) {
	reqURL := c.parseEndpoint("user/walletSummary")
	res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivatePostApiKey method for /apiKey
func (c *Exchange) PrivatePostApiKey(params *url.Values, body bytes.Buffer) (data models.APIKey, err error) {
	reqURL := c.parseEndpoint("apiKey")
	res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivatePostApiKeyDisable method for /apiKey/disable
func (c *Exchange) PrivatePostApiKeyDisable(params *url.Values, body bytes.Buffer) (data models.APIKey, err error) {
	reqURL := c.parseEndpoint("apiKey/disable")
	res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivatePostApiKeyEnable method for /apiKey/enable
func (c *Exchange) PrivatePostApiKeyEnable(params *url.Values, body bytes.Buffer) (data models.APIKey, err error) {
	reqURL := c.parseEndpoint("apiKey/enable")
	res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivatePostChat method for /chat
func (c *Exchange) PrivatePostChat(params *url.Values, body bytes.Buffer) (data models.Chat, err error) {
	reqURL := c.parseEndpoint("chat")
	res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivatePostOrder method for /order
func (c *Exchange) PrivatePostOrder(params *url.Values, body bytes.Buffer) (data models.Order, err error) {
	reqURL := c.parseEndpoint("order")
	res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivatePostOrderBulk method for /order/bulk
func (c *Exchange) PrivatePostOrderBulk(params *url.Values, body bytes.Buffer) (data []models.Order, err error) {
	reqURL := c.parseEndpoint("order/bulk")
	res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivatePostOrderCancelAllAfter method for /order/cancelAllAfter
func (c *Exchange) PrivatePostOrderCancelAllAfter(params *url.Values, body bytes.Buffer) (data interface{}, err error) {
	reqURL := c.parseEndpoint("order/cancelAllAfter")
	res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivatePostPositionIsolate method for /position/isolate
func (c *Exchange) PrivatePostPositionIsolate(params *url.Values, body bytes.Buffer) (data models.Position, err error) {
	reqURL := c.parseEndpoint("position/isolate")
	res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivatePostPositionLeverage method for /position/leverage
func (c *Exchange) PrivatePostPositionLeverage(params *url.Values, body bytes.Buffer) (data models.Position, err error) {
	reqURL := c.parseEndpoint("position/leverage")
	res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivatePostPositionRiskLimit method for /position/riskLimit
func (c *Exchange) PrivatePostPositionRiskLimit(params *url.Values, body bytes.Buffer) (data models.Position, err error) {
	reqURL := c.parseEndpoint("position/riskLimit")
	res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivatePostPositionTransferMargin method for /position/transferMargin
func (c *Exchange) PrivatePostPositionTransferMargin(params *url.Values, body bytes.Buffer) (data models.Position, err error) {
	reqURL := c.parseEndpoint("position/transferMargin")
	res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivatePostUserCancelWithdrawal method for /user/cancelWithdrawal
func (c *Exchange) PrivatePostUserCancelWithdrawal(params *url.Values, body bytes.Buffer) (data models.Transaction, err error) {
	reqURL := c.parseEndpoint("user/cancelWithdrawal")
	res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivatePostUserCommunicationToken method for /user/communicationToken
func (c *Exchange) PrivatePostUserCommunicationToken(params *url.Values, body bytes.Buffer) (data []models.CommunicationToken, err error) {
	reqURL := c.parseEndpoint("user/communicationToken")
	res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivatePostUserConfirmEmail method for /user/confirmEmail
func (c *Exchange) PrivatePostUserConfirmEmail(params *url.Values, body bytes.Buffer) (data models.AccessToken, err error) {
	reqURL := c.parseEndpoint("user/confirmEmail")
	res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivatePostUserConfirmWithdrawal method for /user/confirmWithdrawal
func (c *Exchange) PrivatePostUserConfirmWithdrawal(params *url.Values, body bytes.Buffer) (data models.Transaction, err error) {
	reqURL := c.parseEndpoint("user/confirmWithdrawal")
	res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivatePostUserLogout method for /user/logout
func (c *Exchange) PrivatePostUserLogout(params *url.Values, body bytes.Buffer) (data interface{}, err error) {
	reqURL := c.parseEndpoint("user/logout")
	res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivatePostUserPreferences method for /user/preferences
func (c *Exchange) PrivatePostUserPreferences(params *url.Values, body bytes.Buffer) (data models.UserPreferences, err error) {
	reqURL := c.parseEndpoint("user/preferences")
	res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivatePostUserRequestWithdrawal method for /user/requestWithdrawal
func (c *Exchange) PrivatePostUserRequestWithdrawal(params *url.Values, body bytes.Buffer) (data models.Transaction, err error) {
	reqURL := c.parseEndpoint("user/requestWithdrawal")
	res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivatePutOrder method for /order
func (c *Exchange) PrivatePutOrder(params *url.Values, body bytes.Buffer) (data models.Order, err error) {
	reqURL := c.parseEndpoint("order")
	res, err := c.apiRequest("PUT", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivatePutOrderBulk method for /order/bulk
func (c *Exchange) PrivatePutOrderBulk(params *url.Values, body bytes.Buffer) (data []models.Order, err error) {
	reqURL := c.parseEndpoint("order/bulk")
	res, err := c.apiRequest("PUT", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateDeleteApiKey method for /apiKey
func (c *Exchange) PrivateDeleteApiKey(params *url.Values) (data interface{}, err error) {
	reqURL := c.parseEndpoint("apiKey")
	res, err := c.apiRequest("DELETE", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateDeleteOrder method for /order
func (c *Exchange) PrivateDeleteOrder(params *url.Values) (data []models.Order, err error) {
	reqURL := c.parseEndpoint("order")
	res, err := c.apiRequest("DELETE", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}

// PrivateDeleteOrderAll method for /order/all
func (c *Exchange) PrivateDeleteOrderAll(params *url.Values) (data []models.Order, err error) {
	reqURL := c.parseEndpoint("order/all")
	res, err := c.apiRequest("DELETE", reqURL, params, bytes.Buffer{})
	if err != nil {
		return data, err
	}
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}
