# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code
import json
from ccxt.base.exchange import Exchange
from ccxt.base.errors import ExchangeError


class bitcointrade(Exchange):

    def describe(self):
        return self.deep_extend(super(bitcointrade, self).describe(), {
            'id': 'bitcointrade',
            'name': 'BitcoinTrade',
            'countries': ['BR'],
            'has': {
                'CORS': False,
                'createMarketOrder': False,
            },
            'rateLimit': 1000,
            'version': 'v1',
            'urls': {
                'logo': 'https://idwall.co/img/bitcointrade-gray.png',
                'api': {
                    'public': 'https://api.bitcointrade.com.br/v1/public',
                    'private': 'https://api.bitcointrade.com.br',
                },
                'www': 'https://bitcointrade.com.br/',
                'doc': 'https://apidocs.bitcointrade.com.br',
            },
            'comment': '',
            'api': {
                'public': {
                    'get': [
                        '{currency}/ticker',  # ?crypto_currency=BTC
                        '{currency}/orders',  # ?crypto_currency=BTC
                        '{currency}/trades',  # ?crypto_currency=BTC&since=<TIMESTAMP>&limit=<NUMBER>
                    ],
                },
                'private': {
                    'get': [
                        'wallets/balance',  # balance
                        'market/user_orders/list',
                        'market'
                    ],
                    'post': [
                        'market/create_order',  # order
                        'market/user_orders/list',  # order
                        'F',  # cancel order
                        'U4',  # my orders
                        'U6',  # withdraw
                        'U18',  # deposit
                        'U24',  # confirm withdrawal
                        'U26',  # list withdrawals
                        'U30',  # list deposits
                        'U34',  # ledger
                        'U70',  # cancel withdrawal
                    ],
                    'delete': [
                        'market/user_orders'
                    ]
                },
            },
            'markets': {
                'BTC/BRL': {'id': 'BTC', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL'},
            },
            'options': {
                'brokerId': '4',  # https://blinktrade.com/docs/#brokers
            },
        })

    def fetch_balance(self, params={}):
        response = self.privateGetWalletsBalance()
        balances = response['data']
        result = {'info': response}
        if balances is not None:
            for item in response['data']:
                code = item['currency_code']
                # we only set the balance for the currency if that currency is present in response
                # otherwise we will lose the info if the currency balance has been funded or traded or not

                account = self.account()
                account['used'] = float(item['locked_amount'])
                account['total'] = float(item['available_amount'])
                account['free'] = account['total'] - account['used']
                result[code] = account

        return self.parse_balance(result)

    def fetch_order_book(self, symbol, limit=None, params={}):
        market = self.market(symbol)
        orderbook = self.publicGetCurrencyOrders(self.extend({
            'currency': market['base']
        }, params))
        return self.parse_order_book(orderbook['data'])

    def fetch_order(self, id, symbol=None, params={}):
        response = self.privateGetMarketUserOrdersList(self.extend({
            'currency': symbol.split('/')[0],
            'page_size': 1000
        }, params))

        index = self.parse_order_from_list(id, response['data']['orders'])
        return self.parse_order(id, response['data']['orders'][index])

    def parse_status(self, status):
        if status == 'waiting':
            return 2
        if status == 'executed_partially':
            return 2
        if status == 'executed_completely':
            return 4
        if status == 'canceled':
            return 3

    def parse_order_from_list(self, id, orderList):
        i = 0
        index = None
        for item in orderList:
            if str(id) == str(item['code']):
                print(id, item['code'], i)
                index = i
            i += 1
        return index

    def parse_order(self, id, order):
        orderStatus = {
            'info': order,
            'id': order['code'],
            'status': self.parse_status(order['status']),
            'filled': order['executed_amount'],
            'type': order['type'],
            'id_cancel': order['id'],
            'price': order['unit_price']
        }
        return orderStatus

    def find_id_book(self, id, book):
        result = False
        for item in book:
            if item['id'] == id:
                result = True
        return result

    def fetch_ticker(self, symbol, params={}):
        market = self.market(symbol)
        ticker = self.publicGetCurrencyTicker(self.extend({
            'currency': market['base']
        }, params))
        timestamp = self.milliseconds()
        last = self.safe_float(ticker['data'], 'last')
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'high': self.safe_float(ticker['data'], 'high'),
            'low': self.safe_float(ticker['data'], 'low'),
            'bid': self.safe_float(ticker['data'], 'buy'),
            'bidVolume': None,
            'ask': self.safe_float(ticker['data'], 'sell'),
            'askVolume': None,
            'vwap': None,
            'open': None,
            'close': last,
            'last': last,
            'previousClose': None,
            'change': None,
            'percentage': None,
            'average': None,
            'baseVolume': self.safe_float(ticker['data'], 'volume'),
            'quoteVolume': self.safe_float(ticker['data'], 'volume'),
            'info': ticker,
        }

    def parse_trade(self, trade, market):
        timestamp = trade['date'] * 1000
        return {
            'id': self.safe_string(trade, 'tid'),
            'info': trade,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': None,
            'side': trade['side'],
            'price': trade['price'],
            'amount': trade['amount'],
        }

    def fetch_trades(self, symbol, since=None, limit=None, params={}):
        market = self.market(symbol)
        response = self.publicGetCurrencyTrades(self.extend({
            'currency': market['quote'],
            'crypto_currency': market['base'],
        }, params))
        return self.parse_trades(response, market, since, limit)

    def create_order(self, symbol, type, side, amount, price=None, params={}):
        market = self.market(symbol)
        order = {
            'currency': market['id'],
            'type': side,
            'unit_price': price,
            'amount': amount,
            'subtype': 'limited',
        }
        response = self.privatePostMarketCreateOrder(self.extend(order))
        return {
            'info': response,
            'id': response['data']['code'],
            'status': 2,
            'quantity': str(response['data']['amount']),
            'price': str(response['data']['unit_price']),
        }

    def cancel_order(self, id, symbol=None, params={}):
        return self.privateDeleteMarketUserOrders(self.extend({
            'id': id,
        }, params))

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        if api == 'public':
            url = self.urls['api'][api] + '/' + self.implode_params(path, params)
        else:
            url = self.urls['api'][api] + '/' + self.version + '/' + self.implode_params(path, params)
        query = self.omit(params, self.extract_params(path))

        if api == 'public':
            if query:
                url += '?' + self.urlencode(query)
        else:
            self.check_required_credentials()
            request = self.extend(query)
            if method == 'POST' or method == 'DELETE':
                body = self.json(request)
            if method == 'GET':
                body = {}
                if query:
                    url += '?' + self.urlencode(query)

            headers = {
                'Authorization': 'ApiToken ' + self.apiKey,
                'Content-Type': 'application/json',
            }

        # print({'url': url, 'method': method, 'body': body, 'headers': headers})
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def request(self, path, api='public', method='GET', params={}, headers=None, body=None):
        response = self.fetch2(path, api, method, params, headers, body)
        if 'Status' in response:
            if response['Status'] != 200:
                raise ExchangeError(self.id + ' ' + self.json(response))
        return response
