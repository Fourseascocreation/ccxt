# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange
from ccxt.base.errors import ExchangeError


class b2c2(Exchange):

    def describe(self):
        return self.deep_extend(super(b2c2, self).describe(), {
            'id': 'b2c2',
            'name': 'B2C2',
            'countries': ['GB'],
            'has': {
                'fetchBalance': True,  # True
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/37808081-b87f2d9c-2e59-11e8-894d-c1900b7584fe.jpg',
                'api': {
                    'private': 'https://api.uat.b2c2.net',
                },
                'www': 'https://b2c2.com',
                'doc': 'https://docs.b2c2.net',
            },
            'requiredCredentials': {
                'apiKey': True,
                'secret': False,
            },
            'api': {
                'public': {
                    'get': [
                    ],
                },
                'private': {
                    'get': [
                        'balance',
                    ],
                    'post': [
                    ],
                },
            },
            'markets': {
                'BTCUSD.SPOT': {'id': 'btc', 'symbol': 'BTCUSD.SPOT', 'base': 'BTC', 'quote': 'USD', 'baseId': 'btc', 'quoteId': 'usd'},
            },
            'exceptions': {
                '400': ExchangeError,  # At least one parameter wasn't set
            },
        })

    def fetch_balance(self, params={}):
        self.load_markets()
        response = self.privateGetBalance(params)
        # {
        #     "USD": "0",
        #     "BTC": "0",
        #     "JPY": "0",
        #     "GBP": "0",
        #     "ETH": "0",
        #     "EUR": "0",
        #     "CAD": "0",
        #     "LTC": "0",
        #     "XRP": "0",
        #     "BCH": "0"
        # }
        result = {
            'info': response,
            'timestamp': self.timestamp,
            'datetime': None,
        }
        assets = response
        keys = list(assets.keys())
        for i in range(0, len(keys)):
            balance = assets[keys[i]]
            code = keys[i]
            account = self.account()
            account['free'] = balance
            account['used'] = 0
            account['total'] = balance
            result[code] = account
        return self.parse_balance(result)

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        query = self.omit(params, self.extract_params(path))
        url = self.implode_hostname(self.urls['api'][api]) + '/' + path
        if (api == 'public') or (api == 'markets'):
            url += self.implode_params(path, params)
            if query:
                url += '?' + self.urlencode(query)
        else:
            self.check_required_credentials()
            headers = {
                'Authorization': 'Token ' + self.apiKey,
            }
            if method == 'GET':
                if query:
                    url += '?' + self.urlencode(query)
            elif method == 'POST':
                headers['Content-Type'] = 'application/json'
                body = self.json(query)
        return {'url': url, 'method': method, 'body': body, 'headers': headers}
