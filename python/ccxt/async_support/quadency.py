# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.async_support.base.exchange import Exchange
import math
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import AuthenticationError
from ccxt.base.errors import PermissionDenied
from ccxt.base.errors import BadRequest


class quadency(Exchange):

    def describe(self):
        return self.deep_extend(super(quadency, self).describe(), {
            'id': 'quadency',
            'name': 'quadency',
            'countries': [],
            'rateLimit': 1000,
            'has': {
                'fetchMarkets': True,
                'fetchOrderBook': True,
                'fetchOHLCV': True,
                'fetchTrades': True,
                'fetchTicker': True,
            },
            'timeframes': {
                '1m': '1',  # default
                '5m': '5',
                '15m': '15',
                '30m': '30',
                '1h': '60',
                '1d': '1440',
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27790564-a945a9d4-5ff9-11e7-9d2d-b635763f2f24.jpg',
                'api': {
                    'public': 'https://b2t-api-b2bx.flexprotect.org',
                    'private': 'https://b2t-api-b2bx.flexprotect.org',
                    'publicbase2': 'https://b2t-api-cmc-b2bx.flexprotect.org/marketdata/cmc/v1',
                },
                'www': 'https://b2t-api-b2bx.flexprotect.org',
            },
            'api': {
                'public': {
                    'get': [
                        'frontoffice/api/info',
                        'marketdata/instruments/{id}/depth',
                        'marketdata/instruments/{id}/history',
                    ],
                },
                'publicbase2': {
                    'get': [
                        'trades/{id}',
                        'summary',
                    ],
                },
            },
            'exceptions': {
                '400': BadRequest,
                '401': AuthenticationError,
                '403': AuthenticationError,
                '429': PermissionDenied,
            },
            'errorMessages': {
                '400': 'Incorrect parameters',
                '401': 'Incorrect keys or ts value differs from the current time by more than 5 seconds',
                '404': 'Not Found',
                '429': 'Too Many Requests: API Rate Limits violated',
                '500': 'Internal Server Error',
                '503': 'System is currently overloaded.',
            },
        })

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        url = self.urls['api'][api]
        url += '/' + self.implode_params(path, params)
        query = self.omit(params, self.extract_params(path))
        if query:
            if api == 'public':
                url += '?'
                keys = list(query.keys())
                for i in range(0, len(keys)):
                    url += keys[i]
                    url += '='
                    url += query[keys[i]]
                    if i < len(keys) - 1:
                        url += '&'
            else:
                url += '?' + self.urlencode(query)
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    async def fetch_markets(self, params={}):
        response = await self.publicGetFrontofficeApiInfo()
        # Response
        # {
        #     "serverTime": 636880696809972288,
        #     "pairs": {
        #         "btc_usdt": {
        #             "baseAsset": "btc",
        #             "quoteAsset": "usdt",
        #             "status": "Open",
        #             "hidden": 0,
        #             "makerFee": 0,
        #             "makerFeeLimit": 0,
        #             "takerFee": 0.001,
        #             "takerFeeLimit": 0,
        #             "priceScale": 6,
        #             "amountScale": 6,
        #             "createdAt": "2019-11-14T16:18:49.253354",
        #             "updatedAt": "2019-11-14T16:18:49.253354"
        #         },
        #     }
        # }
        markets = self.safe_value(response, 'pairs')
        keys = list(markets.keys())
        result = []
        for i in range(0, len(keys)):
            id = keys[i]
            market = markets[id]
            baseId = self.safe_string(market, 'baseAsset')
            quoteId = self.safe_string(market, 'quoteAsset')
            base = self.safe_currency_code(baseId)
            quote = self.safe_currency_code(quoteId)
            symbol = base + '/' + quote
            isFrozen = self.safe_string(market, 'hidden')
            active = (isFrozen != '1')
            entry = {
                'id': id,
                'symbol': symbol,
                'base': base,
                'quote': quote,
                'baseId': baseId,
                'quoteId': quoteId,
                'info': market,
                'active': active,
                'precision': {
                    'amount': self.safe_value(market, 'amountScale'),
                    'price': self.safe_value(market, 'priceScale'),
                },
                'taker': self.safe_float(market, 'takerFee'),
                'maker': self.safe_float(market, 'makerFee'),
                'limits': {
                    'amount': {
                        'min': math.pow(10, -self.safe_float(market, 'amountScale')),
                    },
                    'price': {
                        'min': math.pow(10, -self.safe_float(market, 'priceScale')),
                    },
                    'cost': {
                        'min': None,
                        'max': None,
                    },
                },
            }
            result.append(entry)
        return result

    async def fetch_order_book(self, symbol='BTC/USDT', limit=50, params={}):
        # Respoonse
        # {
        #     "instrument": "eth_btc",
        #     "bids": [
        #         {
        #             "amount": 0.3092258,
        #             "price": 0.01734264
        #         },
        #         {
        #             "amount": 51.61494099,
        #             "price": 0.01734363
        #         }
        #     ],
        #     "asks": [
        #         {
        #             "amount": 133.52370356,
        #             "price": 0.01739337
        #         },
        #         {
        #             "amount": 9.16854518,
        #             "price": 0.01739838
        #         }
        #     ],
        #     "version": 1891724,
        #     "askTotalAmount": 1849.11363582,
        #     "bidTotalAmount": 809.23878372,
        #     "snapshot": True
        # }
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'id': market['id'],
        }
        response = await self.publicGetMarketdataInstrumentsIdDepth(self.extend(request, params))
        return self.parse_order_book(response, None, 'bids', 'asks', 'price', 'amount')

    def parse_ohlcv(self, ohlcv, market=None, timeframe='1m', since=None, limit=None):
        # {
        #     instrument: 'btc_usdt',
        #     start: '2022-01-03T12:00:00Z',
        #     end: '2022-01-03T13:00:00Z',
        #     low: 47288.9442022,
        #     high: 47426.3285076,
        #     volume: 0.21555747,
        #     quoteVolume: 10211.36844364,
        #     open: 47426.3285076,
        #     close: 47288.9442022
        #   }
        return [
            self.parse8601(self.safe_value(ohlcv, 'start')),
            self.safe_number(ohlcv, 'open'),
            self.safe_number(ohlcv, 'high'),
            self.safe_number(ohlcv, 'low'),
            self.safe_number(ohlcv, 'close'),
            self.safe_number(ohlcv, 'volume'),
        ]

    async def fetch_ohlcv(self, symbol, timeframe='1h', since=None, limit=1000, params={}):
        # Response
        # {
        #     "success": True,
        #     "instrument": "btc_usdt",
        #     "data": [
        #         {
        #             "instrument": "btc_usdt",
        #             "start": "2019-03-13T09:00:00Z",
        #             "end": "2019-03-13T10:00:00Z",
        #             "low": 3842.855,
        #             "high": 3855.445,
        #             "volume": 4,
        #             "quoteVolume": 0,
        #             "open": 3855.105,
        #             "close": 3842.855
        #         },
        #         {
        #             "instrument": "btc_usdt",
        #             "start": "2019-03-13T10:00:00Z",
        #             "end": "2019-03-13T11:00:00Z",
        #             "low": 3834.355,
        #             "high": 3848.855,
        #             "volume": 26,
        #             "quoteVolume": 0,
        #             "open": 3842.865,
        #             "close": 3835.655
        #         }
        #     ],
        #     "startDateTime": "2019-03-13T09:00:00Z",
        #     "endDateTime": "2019-03-13T11:00:00Z"
        # }
        await self.load_markets()
        market = self.market(symbol)
        marketId = market['id']
        request = {
            'id': marketId,
        }
        duration = self.parse_timeframe(timeframe)
        if since is None:
            since = self.milliseconds() - limit * duration * 1000
        enddate = since + limit * duration * 100
        params = self.extend(params, {'type': timeframe, 'startDate': self.ymdhms(since, 'T'), 'endDate': self.ymdhms(enddate, 'T')})
        response = await self.publicGetMarketdataInstrumentsIdHistory(self.extend(request, params))
        responseData = self.safe_value(response, 'data', [])
        return self.parse_ohlcvs(responseData)

    async def fetch_trades(self, symbol='BTC/USDT', since=None, limit=None, params={}):
        # Response
        # [
        #     {
        #         "tradeID": "1247307",
        #         "price": "10093.92246491",
        #         "base_volume": "0.0259",
        #         "quote_volume": "261.432591841169",
        #         "trade_timestamp": "1599577070",
        #         "type": "buy"
        #     },
        #     {
        #         "tradeID": "1247309",
        #         "price": "10091.69185435",
        #         "base_volume": "0.0754",
        #         "quote_volume": "760.913565817990",
        #         "trade_timestamp": "1599577128",
        #         "type": "sell"
        #     }
        # ]
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'id': market['id'],
        }
        response = await self.publicbase2GetTradesId(self.extend(request, params))
        return self.parse_trades(response, market, since, limit)

    def parse_trade(self, trade, market=None):
        timestamp = self.safe_string(trade, 'trade_timestamp')
        price = self.safe_float(trade, 'price')
        amount = self.safe_float(trade, 'base_volume')
        symbol = None
        if market is None:
            market = self.safe_value(trade, 'market')
        if market is not None:
            symbol = self.safe_string(market, 'symbol')
        cost = None
        if price is not None:
            if amount is not None:
                if symbol is not None:
                    cost = float(self.cost_to_precision(symbol, price * amount))
        transactionId = self.safe_string(trade, 'tradeID')
        side = self.safe_string(trade, 'type')
        return {
            'info': trade,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': symbol,
            'id': transactionId,
            'order': None,
            'type': None,
            'side': side,
            'takerOrMaker': None,
            'price': price,
            'amount': amount,
            'cost': cost,
            'fee': None,
        }

    def parse_ticker(self, symbol, ticker, market=None, time=None):
        symbol = symbol.replace('/', '_')
        if ticker[symbol]:
            timestamp = time
            last = self.safe_float(ticker[symbol], 'last')
            percentage = self.safe_float(ticker[symbol], 'percentChange')
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': self.iso8601(timestamp),
                'high': self.safe_float(ticker[symbol], 'high24hr'),
                'low': self.safe_float(ticker[symbol], 'low24hr'),
                'bid': self.safe_float(ticker[symbol], 'highestBid'),
                'bidVolume': None,
                'ask': self.safe_float(ticker[symbol], 'lowestAsk'),
                'askVolume': None,
                'vwap': None,
                'open': None,
                'close': last,
                'last': last,
                'previousClose': None,
                'change': None,
                'percentage': percentage,
                'average': None,
                'baseVolume': self.safe_float(ticker[symbol], 'baseVolume'),
                'quoteVolume': self.safe_float(ticker[symbol], 'quoteVolume'),
                'info': ticker[symbol],
            }
        return None

    async def fetch_ticker(self, symbol, params={}):
        # Response
        # {
        #     "BTC_USDT": {
        #         "id": "btc_usdt",
        #         "last": "10978.93578",
        #         "lowestAsk": "10979.0",
        #         "highestBid": "10978.71",
        #         "percentChange": "0.0813730364297798727996051454",
        #         "baseVolume": "6.47119743",
        #         "quoteVolume": "70829.9781692126756",
        #         "isFrozen": "0",
        #         "high24hr": "10985.0049",
        #         "low24hr": "10857.95376"
        #     },
        #     "BTC_USD": {
        #         "id": "btc_usd",
        #         "last": "0",
        #         "lowestAsk": "0",
        #         "highestBid": "0",
        #         "percentChange": "0",
        #         "baseVolume": "0",
        #         "quoteVolume": "0",
        #         "isFrozen": "0",
        #         "high24hr": "0",
        #         "low24hr": "0"
        #     }
        # }
        await self.load_markets()
        response = await self.publicbase2GetSummary(params)
        return self.parse_ticker(symbol, response)

    def handle_errors(self, code, reason, url, method, headers, body, response, requestHeaders, requestBody):
        if response is None:
            return
        error = self.safe_string(response, 'errors')
        if error is None:
            # success
            return
        errorMessages = self.errorMessages
        message = None
        message = self.safe_string(error[0], 'message')
        if message is None:
            message = self.safe_string(errorMessages, code, 'Unknown Error')
        feedback = self.id + ' ' + message
        self.throw_exactly_matched_exception(self.exceptions, code, feedback)
        raise ExchangeError(feedback)