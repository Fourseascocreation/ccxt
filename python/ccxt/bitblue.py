# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange
from ccxt.base.errors import ExchangeError

class bitblue(Exchange):

    def describe(self):
        return self.deep_extend(super(bitblue, self).describe(), {
            'id': 'bitblue',
            'name': 'BitBlue',
            'countries': ['BR'],  # Brazil
            'rateLimit': 1000,
            'version': '',
            'has': {
                'CORS': True,
                'createMarketOrder': False,
                'fetchOrder': True,
                'withdraw': True,
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27837060-e7c58714-60ea-11e7-9192-f05e86adb83f.jpg',
                'api': {
                    'public': 'https://bitblue.com/api',
                    'private': 'https://bitblue.com/api',
                },
                'www': 'https://www.bitblue.com/pt/',
                'doc': [
                    'https://bitblue.com/api-docs.php',
                ],
            },
            'api': {
                'public': {
                    'get': [
                        '/order-book',
                    ],
                },
                'private': {
                    'get': [
                    ],
                    'post': [
                    ],
                },
            },
            'markets': {
                'BTC/BRL': {'id': 'BTC', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL', 'suffix': 'Bitcoin'},
            },
            'fees': {
                'trading': {
                    'maker': 0.3 / 100,
                    'taker': 0.7 / 100,
                },
            },
        })

    def fetch_order_book(self, symbol, params={}):
        arr_b = []
        arr_a = []
        order_book = self.publicGetOrderBook(self.extend({
            'currency': self.market(symbol)['quote']}, params))
        for b in order_book['order-book']['bid']:
            if b['converted_from'] == 'BRL':
                bids = b
        for a in order_book['order-book']['ask']:
            if a['converted_from'] == 'BRL':
                asks = a
        for i in range(0, len(bids)):
            arr_b.append([bids['price'], bids['order_amount']])
        for i in range(0, len(asks)):
            arr_a.append([asks['price'], asks['order_amount']])
        return { 'bids': arr_b, 'asks': arr_a }

    def fetch_ticker(self, symbol, params={}):
        ticker = self.publicGetCurrencyTicker(self.extend({
            'currency': self.market(symbol)['id']}, params))
        return ticker

    def parse_trade(self, trade, market):
        timestamp = trade['date'] * 1000
        return {
            'info': trade,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': market['symbol'],
            'id': str(trade['tid']),
            'order': None,
            'type': None,
            'side': trade['type'],
            'price': trade['price'],
            'amount': trade['amount'],
        }

    def fetch_trades(self, symbol, limit=None, params={}):
        trades = self.publicGetCurrencyTrades(self.extend({
            'currency': self.market(symbol)['id']}, params))
        return trades
        # market = self.market(symbol)
        # method = 'publicGetCoinTrades'
        # request = {
        #     'coin': market['base'],
        # }
        # if since is not None:
        #     method += 'From'
        #     request['from'] = int(since / 1000)
        # to = self.safe_integer(params, 'to')
        # if to is not None:
        #     method += 'To'
        # response = getattr(self, method)(self.extend(request, params))
        # return self.parse_trades(response, market, since, limit)

    def fetch_balance(self, symbol, since=None, limit=None, params={}):
        response = self.privateGetCurrencyTradeBalance(self.extend({
            'currency': self.market(symbol)['id']}, params))
        return response

    def create_order(self, symbol, type, side, amount, price, params={}):
        method = 'privatePostCurrencyTradeCreate'
        response = getattr(self, method)(self.extend({
            'currency': self.market(symbol)['id'],
            'order': side,
            'quantity': amount,
            'price': price,
        }, params))
        response['status'] = '2'
        return response

    def parse_status(self, statusCode):
        status = 2 if statusCode == 'open' else 'wait'
        status = 3 if statusCode == 'canceled' else status
        status = 4 if statusCode == 'order successful' else status
        return status

    def cancel_order(self, id, symbol, params={}):
        if symbol is None:
            raise ExchangeError(self.id + ' cancelOrder() requires a symbol argument')
        self.load_markets()
        market = self.market(symbol)
        print self.id
        return self.privatePostCurrencyTradeCancel(self.extend({
            'currency': market['id'],
            'idOrder': id,
        }, params))

    def parse_order(self, order, market=None):
        side = None
        if 'order_type' in order:
            side = 'buy' if (order['order_type'] == 1) else 'sell'
        status = self.parse_status(order['status'])
        symbol = None
        if market is None:
            if 'coin_pair' in order:
                if order['coin_pair'] in self.markets_by_id:
                    market = self.markets_by_id[order['coin_pair']]
        if market:
            symbol = market['symbol']
        timestamp = None
        if 'created_timestamp' in order:
            timestamp = int(order['created_timestamp']) * 1000
        if 'updated_timestamp' in order:
            timestamp = int(order['updated_timestamp']) * 1000
        fee = {
            'cost': self.safe_float(order, 'fee'),
            'currency': market['quote'],
        }
        price = self.safe_float(order, 'limit_price')
        # price = self.safe_float(order, 'executed_price_avg', price)
        average = self.safe_float(order, 'executed_price_avg')
        amount = self.safe_float(order, 'quantity')
        filled = self.safe_float(order, 'executed_quantity')
        remaining = amount - filled
        cost = amount * average
        result = {
            'info': order,
            'id': str(order['order_id']),
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'lastTradeTimestamp': None,
            'symbol': symbol,
            'type': 'limit',
            'side': side,
            'price': price,
            'cost': cost,
            'average': average,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'status': status,
            'fee': fee,
        }
        return result

    def fetch_order(self, id, symbol, params={}):
        response = self.privateGetCurrencyTradeOrders(self.extend({
            'currency': self.market(symbol)['id']
        }, params))

        if response['orders']['sell'] is not 'none':
            for item in response['orders']['sell']:
                if item['id'] == id:
                    return self.merge_two_dicts(item, {'status': 4})

        if response['orders']['buy'] is not 'none':
            for item in response['orders']['buy']:
                if item['id'] == id:
                    return self.merge_two_dicts(item, {'status': 4})

        return {'id': id, 'status': 2}

    def withdraw(self, currency, amount, address, tag=None, params={}):
        self.check_address(address)
        self.load_markets()
        request = {
            'coin': currency,
            'quantity': '{:.10f}'.format(amount),
            'address': address,
        }
        if currency == 'BRL':
            account_ref = ('account_ref' in list(params.keys()))
            if not account_ref:
                raise ExchangeError(self.id + ' requires account_ref parameter to withdraw ' + currency)
        elif currency != 'LTC':
            tx_fee = ('tx_fee' in list(params.keys()))
            if not tx_fee:
                raise ExchangeError(self.id + ' requires tx_fee parameter to withdraw ' + currency)
        response = self.privatePostWithdrawCoin(self.extend(request, params))
        return {
            'info': response,
            'id': response['response_data']['withdrawal']['id'],
        }

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        url = self.urls['api'][api]
        query = self.omit(params, self.extract_params(path))
        if api == 'public':
            url += self.implode_params(path, params)
            if query:
                url += '?' + self.urlencode(query)
        else:
            url += self.implode_params(path, params)
            if query:
                url += '?' + self.urlencode(query)
            self.check_required_credentials()
            headers = {
                'X-Authentication': self.secret,
                'Content-Type': 'text/html; charset=UTF-8',
            }
        # print url, method, body, headers
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def request(self, path, api='public', method='GET', params={}, headers=None, body=None):
        response = self.fetch2(path, api, method, params, headers, body)
        if 'error_message' in response:
            raise ExchangeError(self.id + ' ' + self.json(response))
        return response
