# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange
from ccxt.base.errors import ExchangeError
import time


class omnitrade(Exchange):

    def describe(self):
        return self.deep_extend(super(omnitrade, self).describe(), {
            'id': 'omnitrade',
            'name': 'OmniTrade',
            'countries': ['BR'],  # Brazil
            'rateLimit': 1000,
            'version': '',
            'has': {
                'CORS': True,
                'createMarketOrder': False,
                'fetchOrder': True,
                'withdraw': True,
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27837060-e7c58714-60ea-11e7-9192-f05e86adb83f.jpg',
                'api': {
                    'public': 'https://omnitrade.io/api/v2',
                    'private': 'https://omnitrade.io/api/v2',
                },
                'www': 'https://www.omnitrade.io/',
                'doc': [
                    'https://omnitrade.io/documents/api_v2',
                ],
            },
            'api': {
                'public': {
                    'get': [
                        '/tickers',
                        '/order_book',
                    ],

                },
                'private': {
                    'get': [
                        '/order',
                        '/orders',
                        '/members/me',
                    ],
                    'post': [
                        '/orders',
                        '/order/delete',
                    ],
                },
            },
            'markets': {
                'BTC/BRL': {'id': 'btcbrl', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL', 'suffix': 'Bitcoin'},
            },
            'fees': {
                'trading': {
                    'maker': 0.3 / 100,
                    'taker': 0.7 / 100,
                },
            },
        })

    def fetch_order_book(self, symbol, asks=10, bids=10, params={}):
        order_book = self.publicGetOrderBook(self.extend({
            'market': self.market(symbol)['id'],
            'asks_limit': asks,
            'bids_limit': bids,
        }, params))
        return {
            'bids': self.get_adjusted_order_book(order_book['bids'], 'price', 'volume'),
            'asks': self.get_adjusted_order_book(order_book['asks'], 'price', 'volume'),
        }

    def fetch_ticker(self, symbol, params={}):
        # 'datetime': datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d %H:%M:%S'),
        result = self.publicGetTickers(self.extend({
            'market': self.market(symbol)['id']}, params))
        ticker = {}
        for key, value in result.iteritems():
            if (key == self.market(symbol)['id']):
                ticker = value
        return {
            'symbol': symbol,
            'timestamp': ticker['at'],
            'datetime': self.iso8601(ticker['at']),
            'high': self.safe_float(ticker['ticker'], 'high'),
            'low': self.safe_float(ticker['ticker'], 'low'),
            'bid': self.safe_float(ticker['ticker'], 'buy'),
            'ask': self.safe_float(ticker['ticker'], 'sell'),
            'baseVolume': self.safe_float(ticker['ticker'], 'vol'),
            'info': ticker['ticker'],
        }

    def parse_trade(self, trade, market):
        timestamp = trade['date'] * 1000
        return {
            'info': trade,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': market['symbol'],
            'id': str(trade['tid']),
            'order': None,
            'type': None,
            'side': trade['type'],
            'price': trade['price'],
            'amount': trade['amount'],
        }

    def fetch_trades(self, symbol, limit=None, params={}):
        trades = self.publicGetCurrencyTrades(self.extend({
            'currency': self.market(symbol)['id']}, params))
        return trades
        # market = self.market(symbol)
        # method = 'publicGetCoinTrades'
        # request = {
        #     'coin': market['base'],
        # }
        # if since is not None:
        #     method += 'From'
        #     request['from'] = int(since / 1000)
        # to = self.safe_integer(params, 'to')
        # if to is not None:
        #     method += 'To'
        # response = getattr(self, method)(self.extend(request, params))
        # return self.parse_trades(response, market, since, limit)

    def fetch_balance(self, symbol='BTC/BRL', since=None, limit=None, params={}):
        str_tonce = str(int(time.time())).ljust(13, '0')
        signature = self.generate_signature(
            self.gen_payload_balance(self.apiKey, str_tonce), self.secret
        )
        response = self.privateGetMembersMe(self.extend({
            'access_key': self.apiKey,
            'tonce': int(str_tonce),
            'signature': signature}, params))
        balances = response['accounts']

        result = {}
        result['info'] = response
        result['used'] = {}
        result['free'] = {}
        result['total'] = {}
        for balance in balances:
            result['used'][balance['currency'].upper()] = float(balance['locked'])
            result['free'][balance['currency'].upper()] = float(balance['balance']) - float(balance['locked'])
            result['total'][balance['currency'].upper()] = float(balance['balance'])
            result[balance['currency'].upper()] = {
                'total': result['total'][balance['currency'].upper()],
                'free': result['free'][balance['currency'].upper()],
                'used': result['used'][balance['currency'].upper()]
            }
        return result

    # def parse_status(self, statusCode):
    #     status = 'open' if statusCode == 2 else 'wait'
    #     status = 'canceled' if statusCode == 3 else status
    #     status = 'done' if statusCode == 4 else status
    #     return statusCode

    def cancel_order(self, id, params={}):
        time.sleep(1)
        str_tonce = str(int(time.time())).ljust(13, '0')
        signature = self.generate_signature(
            self.gen_payload_post_order(self.apiKey, str(id), str_tonce), self.secret
        )
        response = self.privatePostOrderDelete(self.extend({
            'access_key': self.apiKey,
            'tonce': int(str_tonce),
            'signature': signature,
            'id': id,
        }, params))
        return self.parse_order_status(response)

    def parse_order(self, order, market=None):
        side = None
        if 'order_type' in order:
            side = 'buy' if (order['order_type'] == 1) else 'sell'
        status = self.parse_status(order['status'])
        symbol = None
        if market is None:
            if 'coin_pair' in order:
                if order['coin_pair'] in self.markets_by_id:
                    market = self.markets_by_id[order['coin_pair']]
        if market:
            symbol = market['symbol']
        timestamp = None
        if 'created_timestamp' in order:
            timestamp = int(order['created_timestamp']) * 1000
        if 'updated_timestamp' in order:
            timestamp = int(order['updated_timestamp']) * 1000
        fee = {
            'cost': self.safe_float(order, 'fee'),
            'currency': market['quote'],
        }
        price = self.safe_float(order, 'limit_price')
        # price = self.safe_float(order, 'executed_price_avg', price)
        average = self.safe_float(order, 'executed_price_avg')
        amount = self.safe_float(order, 'quantity')
        filled = self.safe_float(order, 'executed_quantity')
        remaining = amount - filled
        cost = amount * average
        result = {
            'info': order,
            'id': str(order['order_id']),
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'lastTradeTimestamp': None,
            'symbol': symbol,
            'type': 'limit',
            'side': side,
            'price': price,
            'cost': cost,
            'average': average,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'status': status,
            'fee': fee,
        }
        return result

    # payload do GetOrders ---
    def gen_payload(self, access_key, limit, market, order_by, page, state, tonce):
        url = self.urls['api']['private']
        uri_data = self.api['private']
        uri = ''
        verb = ''
        for key, value in uri_data.iteritems():
            for i in range(len(key)):
                if key == 'get':
                    uri = value[1]
                    verb = key
                    break
        payload = {
            'verb': verb.upper() + '|',
            'uri': str(url)[20:] + uri + '|',
            'access_key': '=' + access_key + '&',
            'limit': '=' + limit + '&',
            'market': '=' + market + '&',
            'order_by': '=' + order_by + '&',
            'page': '=' + page + '&',
            'state': '=' + state + '&',
            'tonce': '=' + tonce + '@',
        }
        str_payload = ''
        for key in sorted(payload):
            str_payload += key + payload[key]
        str_payload = payload['verb'] + payload['uri'] + str_payload
        return str_payload.split('@')[0]

        # payload do Balances ---

    def gen_payload_balance(self, access_key, tonce):
        url = self.urls['api']['private']
        uri_data = self.api['private']
        uri = ''
        verb = ''
        for key, value in uri_data.iteritems():
            for i in range(len(key)):
                if key == 'get':
                    uri = value[1]
                    verb = key
                    break
        payload = {
            'verb': verb.upper() + '|',
            'uri': '/api/v2/members/me|',
            'access_key': '=' + access_key + '&',
            'tonce': '=' + tonce + '@',
        }
        str_payload = ''
        for key in sorted(payload):
            str_payload += key + payload[key]
        str_payload = payload['verb'] + payload['uri'] + str_payload
        return str_payload.split('@')[0]

    # payload do PostOrders ---
    def gen_payload_post(self, access_key, market, ord_type, price, side, tonce, volume):
        url = self.urls['api']['private']
        uri_data = self.api['private']
        uri = ''
        verb = ''
        for key, value in uri_data.iteritems():
            for i in range(len(key)):
                if key == 'post':
                    uri = value[0]
                    verb = key
                    break
        verb_uri = {
            'verb': verb.upper() + '|',
            'uri': str(url)[20:] + uri + '|',
        }
        payload = {
            'access_key': '=' + access_key + '&',
            'market': '=' + market + '&',
            'ord_type': '=' + ord_type + '&',
            'price': '=' + str(price) + '&',
            'side': '=' + side + '&',
            'tonce': '=' + tonce + '&',
            'volume': '=' + str(volume),
        }
        str_payload = ''
        for key in sorted(payload):
            str_payload += key + payload[key]
        str_payload = verb_uri['verb'] + verb_uri['uri'] + str_payload
        return str_payload

    # payload PostCancelOrder ---
    def gen_payload_post_order(self, access_key, id, tonce):
        url = self.urls['api']['private']
        uri_data = self.api['private']
        uri = ''
        verb = ''
        for key, value in uri_data.iteritems():
            for i in range(len(key)):
                if key == 'post':
                    uri = value[1]
                    verb = key
                    break
        verb_uri = {
            'verb': verb.upper() + '|',
            'uri': str(url)[20:] + uri + '|',
        }
        payload = {
            'access_key': '=' + access_key + '&',
            'id': '=' + id + '&',
            'tonce': '=' + tonce,
        }
        str_payload = ''
        for key in sorted(payload):
            str_payload += key + payload[key]
        str_payload = verb_uri['verb'] + verb_uri['uri'] + str_payload
        return str_payload

    # payload GetOrder ---
    def gen_payload_get_order(self, access_key, id, tonce):
        url = self.urls['api']['private']
        uri_data = self.api['private']
        uri = ''
        verb = ''
        for key, value in uri_data.iteritems():
            for i in range(len(key)):
                if key == 'get':
                    uri = value[0]
                    verb = key
                    break
        verb_uri = {
            'verb': verb.upper() + '|',
            'uri': str(url)[20:] + uri + '|',
        }
        payload = {
            'access_key': '=' + access_key + '&',
            'id': '=' + id + '&',
            'tonce': '=' + tonce,
        }
        str_payload = ''
        for key in sorted(payload):
            str_payload += key + payload[key]
        str_payload = verb_uri['verb'] + verb_uri['uri'] + str_payload
        return str_payload

    # using GET method
    def fetch_orders(self, market, state, limit, page, order_by, params={}):
        str_tonce = str(int(time.time())).ljust(13, '0')
        signature = self.generate_signature(
            self.gen_payload(
                self.apiKey, str(limit), self.market(market)['id'],
                order_by, str(page), state, str_tonce), self.secret
        )
        response = self.privateGetOrders(self.extend({
            'access_key': self.apiKey,
            'tonce': int(str_tonce),
            'signature': signature,
            'market': self.market(market)['id'],
            'state': state,
            'limit': limit,
            'page': page,
            'order_by': order_by,
        }, params))
        return response

    # using POST method
    def create_order(self, market, ord_type, side, volume, price, params={}):
        str_tonce = str(int(time.time())).ljust(13, '0')
        signature = self.generate_signature(
            self.gen_payload_post(
                self.apiKey, self.market(market)['id'], ord_type,
                price, side, str_tonce, volume), self.secret
        )
        response = self.privatePostOrders(self.extend({
            'access_key': self.apiKey,
            'tonce': int(str_tonce),
            'signature': signature,
            'market': self.market(market)['id'],
            'side': side,
            'volume': volume,
            'price': price,
            'ord_type': ord_type,
        }, params))
        return self.parse_order_status(response)

    def fetch_order(self, id, market=None, params={}):
        str_tonce = str(int(time.time())).ljust(13, '0')
        signature = self.generate_signature(
            self.gen_payload_get_order(self.apiKey, str(id), str_tonce), self.secret
        )
        response = self.privateGetOrder(self.extend({
            'access_key': self.apiKey,
            'tonce': int(str_tonce),
            'signature': signature,
            'id': id,
        }, params))
        return self.parse_order_status(response)

    def withdraw(self, currency, amount, address, tag=None, params={}):
        self.check_address(address)
        self.load_markets()
        request = {
            'coin': currency,
            'quantity': '{:.10f}'.format(amount),
            'address': address,
        }
        if currency == 'BRL':
            account_ref = ('account_ref' in list(params.keys()))
            if not account_ref:
                raise ExchangeError(self.id + ' requires account_ref parameter to withdraw ' + currency)
        elif currency != 'LTC':
            tx_fee = ('tx_fee' in list(params.keys()))
            if not tx_fee:
                raise ExchangeError(self.id + ' requires tx_fee parameter to withdraw ' + currency)
        response = self.privatePostWithdrawCoin(self.extend(request, params))
        return {
            'info': response,
            'id': response['response_data']['withdrawal']['id'],
        }

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        url = self.urls['api'][api]
        query = self.omit(params, self.extract_params(path))
        if api == 'public':
            url += self.implode_params(path, params)
            if query:
                url += '?' + self.urlencode(query)
        else:
            url += self.implode_params(path, params)
            if query:
                url += '?' + self.urlencode(query)
            self.check_required_credentials()
            headers = {
                'Content-Type': 'text/html; charset=UTF-8',
            }
        # print url, method, body, headers
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def request(self, path, api='public', method='GET', params={}, headers=None, body=None):
        response = self.fetch2(path, api, method, params, headers, body)
        if 'error_message' in response:
            raise ExchangeError(self.id + ' ' + self.json(response))
        return response

    # generates the status code passing the result of the response
    def parse_order_status(self, lst):
        try:
            if not lst:
                raise ValueError('Resposta vazia!')
            for key in lst.keys():
                if lst[key] == 'done':
                    key = 'status'
                    lst[key] = 4
                elif lst[key] == 'wait':
                    key = 'status'
                    lst[key] = 2
                elif lst[key] == 'cancel':
                    key = 'status'
                    lst[key] = 3
            return lst
        except ValueError as e:
            print(e)
