# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange
from ccxt.base.errors import ExchangeError


class bitcambio(Exchange):

    def describe(self):
        return self.deep_extend(super(bitcambio, self).describe(), {
            'id': 'bitcambio',
            'name': 'BitCambio',
            'countries': ['BR'],
            'has': {
                'CORS': False,
                'createMarketOrder': False,
            },
            'rateLimit': 1000,
            'version': 'v1',
            'urls': {
                'logo': 'https://bitcambio.blinktrade.com/assets/exchange_logos/bitcambio_landing_page_logo.png',
                'api': {
                    'public': 'https://bitcambio_api.blinktrade.com/api',
                    'private': 'https://bitcambio_api.blinktrade.com/tapi',
                },
                'www': 'https://bitcambio.blinktrade.com/',
                'doc': 'https://blinktrade.com/docs',
            },
            'comment': 'Blinktrade API',
            'api': {
                'public': {
                    'get': [
                        '{currency}/ticker',  # ?crypto_currency=BTC
                        '{currency}/orderbook',  # ?crypto_currency=BTC
                        '{currency}/trades',  # ?crypto_currency=BTC&since=<TIMESTAMP>&limit=<NUMBER>
                    ],
                },
                'private': {
                    'post': [
                        'D',  # order
                        'F',  # cancel order
                        'U2',  # balance
                        'U4',  # my orders
                        'U6',  # withdraw
                        'U18',  # deposit
                        'U24',  # confirm withdrawal
                        'U26',  # list withdrawals
                        'U30',  # list deposits
                        'U34',  # ledger
                        'U70',  # cancel withdrawal
                    ],
                },
            },
            'markets': {
                'BTC/BRL': {'id': 'BTCBRL', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL', 'brokerId': 11,
                            'broker': 'BitCambio'}
            },
            'options': {
                'brokerId': '11',  # https://blinktrade.com/docs/#brokers
            },
        })

    def fetch_balance(self, params={}):
        response = self.privatePostU2({
            'BalanceReqID': self.nonce(),
        })
        balances = self.safe_value(response['Responses'][0], self.options['brokerId'])
        result = {'info': response}
        if balances is not None:
            currencyIds = list(self.currencies_by_id.keys())
            for i in range(0, len(currencyIds)):
                currencyId = currencyIds[i]
                currency = self.currencies_by_id[currencyId]
                code = currency['code']
                # we only set the balance for the currency if that currency is present in response
                # otherwise we will lose the info if the currency balance has been funded or traded or not
                if currencyId in balances:
                    account = self.account()
                    account['used'] = float(balances[currencyId + '_locked']) * 1e-8
                    account['total'] = float(balances[currencyId]) * 1e-8
                    account['free'] = account['total'] - account['used']
                    result[code] = account
        return self.parse_balance(result)

    def fetch_order_book(self, symbol, limit=None, params={}):
        market = self.market(symbol)
        orderbook = self.publicGetCurrencyOrderbook(self.extend({
            'currency': market['quote'],
            'crypto_currency': market['base'],
        }, params))
        return self.parse_order_book(orderbook)

    def fetch_order(self, id, symbol=None, params={}):
        response = self.privatePostU4(self.extend({
            'MsgType': 'U4',
            'OrdersReqID': int(id),
            'PageSize': 1000
        }, params))
        index = self.findOrderId(int(id), response['Responses'][0]['OrdListGrp'])
        if index is not None:
            return self.parse_order(response['Responses'][0]['OrdListGrp'][index])
        else:
            return {'status': 999}

    def findOrderId(self, id, orders):
        i = 0
        index = None
        for item in orders:
            # print(item[1], id)
            if item[1] == id:
                index = i
            i += 1
        # print(index)
        return index

    def parse_order(self, order, market=None):
        result = {
            'info': order,
            'id': order[1],
            'lastTradeTimestamp': None,
            'symbol': order[7],
            'type': 'limit',
            'side': 'buy' if order[8] == 1 else 'ask',
            'price': self.satoshi_to_btc(order[11]),
            'amount': self.satoshi_to_btc(order[10]),
            'filled': self.satoshi_to_btc(order[2]),
            'filled_v': order[2],
            'remaining': self.satoshi_to_btc(order[10]) - self.satoshi_to_btc(order[2]),
            'status': int(order[3]) + 1,
        }
        return result

    def fetch_ticker(self, symbol, params={}):
        market = self.market(symbol)
        ticker = self.publicGetCurrencyTicker(self.extend({
            'currency': market['quote'],
            'crypto_currency': market['base'],
        }, params))
        timestamp = self.milliseconds()
        lowercaseQuote = market['quote'].lower()
        quoteVolume = 'vol_' + lowercaseQuote
        last = self.safe_float(ticker, 'last')
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'high': self.safe_float(ticker, 'high'),
            'low': self.safe_float(ticker, 'low'),
            'bid': self.safe_float(ticker, 'buy'),
            'bidVolume': None,
            'ask': self.safe_float(ticker, 'sell'),
            'askVolume': None,
            'vwap': None,
            'open': None,
            'close': last,
            'last': last,
            'previousClose': None,
            'change': None,
            'percentage': None,
            'average': None,
            'baseVolume': self.safe_float(ticker, 'vol'),
            'quoteVolume': float(ticker[quoteVolume]),
            'info': ticker,
        }

    def parse_trade(self, trade, market):
        timestamp = trade['date'] * 1000
        return {
            'id': self.safe_string(trade, 'tid'),
            'info': trade,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': None,
            'side': trade['side'],
            'price': trade['price'],
            'amount': trade['amount'],
        }

    def fetch_trades(self, symbol, since=None, limit=None, params={}):
        market = self.market(symbol)
        response = self.publicGetCurrencyTrades(self.extend({
            'currency': market['quote'],
            'crypto_currency': market['base'],
        }, params))
        return self.parse_trades(response, market, since, limit)

    def create_order(self, symbol, type, side, amount, price=None, params={}):
        if type == 'market':
            raise ExchangeError(self.id + ' allows limit orders only')
        market = self.market(symbol)
        orderSide = '1' if (side == 'buy') else '2'
        order = {
            'ClOrdID': str(self.nonce())[:-3],
            'Symbol': market['id'],
            'Side': orderSide,
            'OrdType': '2',
            'Price': int(price * 100000000),
            'OrderQty': int(amount * 100000000),
            'BrokerID': market['brokerId'],
        }
        response = self.privatePostD(self.extend(order, params))['Responses'][0]
        # try:
        return {
            'info': response,
            'id': response['OrderID'],
            'status': self.parse_status(int(response['OrdStatus'])),
            'quantity': str(self.satoshi_to_btc(response['OrderQty'])),
            'price': str(self.satoshi_to_btc(response['Price']))
        }

    # except:
    #    return response

    def parse_status(self, status):
        if status == 0:
            return 2
        if status == 1:
            return 2
        if status == 2:
            return 2
        if status == 4:
            return 3
        if status == 8:
            return 3
        if status == 'A':
            return 2

    def cancel_order(self, id, symbol=None, params={}):
        cancel = self.privatePostF(self.extend({
            'OrderID': id,
        }, params))
        try:
            return {
                'info': cancel,
                'canceled': True if cancel['Status'] == 200 else False,
                'id': cancel['Responses'][0]['OrderID'],
                'status': self.parse_status(int(cancel['Responses'][0]['OrdStatus'])),
                'quantity': str(self.satoshi_to_btc(cancel['Responses'][0]['OrderQty'])),
                'price': str(self.satoshi_to_btc(cancel['Responses'][0]['Price']))
            }
        except:
            return cancel

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        url = self.urls['api'][api] + '/' + self.version + '/' + self.implode_params(path, params)
        query = self.omit(params, self.extract_params(path))
        if api == 'public':
            if query:
                url += '?' + self.urlencode(query)
        else:
            self.check_required_credentials()
            nonce = str(self.nonce())
            request = self.extend({'MsgType': path}, query)
            body = self.json(request)
            headers = {
                'APIKey': self.apiKey,
                'Nonce': nonce,
                'Signature': self.hmac(self.encode(nonce), self.encode(self.secret)),
                'Content-Type': 'application/json',
            }

        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def request(self, path, api='public', method='GET', params={}, headers=None, body=None):
        response = self.fetch2(path, api, method, params, headers, body)
        if 'Status' in response:
            if response['Status'] != 200:
                raise ExchangeError(self.id + ' ' + self.json(response))
        return response
