import os
import sys

root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))))
sys.path.append(root)

# ----------------------------------------------------------------------------

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

# ----------------------------------------------------------------------------
# -*- coding: utf-8 -*-
import asyncio
import ccxt.pro as ccxtpro
from ccxt import errors
from ccxt.test.base import test_ticker  # noqa E402

async def test_watch_tickers(exchange, symbol):
    method = 'watchTickers'
    tests = [{
    'name': 'spot default - with symbols undefined',
    'symbols': None,
    'params': {},
}, {
    'name': 'default - with empty symbols array',
    'symbols': [],
    'params': {},
}, {
    'name': 'swap - all symbols',
    'symbols': [],
    'params': {
        'type': 'swap',
    },
}, {
    'name': 'spot ticker with one symbol',
    'symbols': [symbol],
    'params': {
        'name': 'ticker',
    },
}, {
    'name': 'spot bookTicker with one symbol',
    'symbols': [symbol],
    'params': {
        'name': 'bookTicker',
    },
}, {
    'name': 'swap bookTicker with one symbol',
    'symbols': ['BTC/USDT:USDT'],
    'params': {
        'name': 'bookTicker',
    },
}, {
    'name': 'spot ticker 1h window with one symbol',
    'symbols': [symbol],
    'params': {
        'name': 'ticker_1h',
    },
}, {
    'name': 'spot ticker 4h window with one symbol',
    'symbols': [symbol],
    'params': {
        'name': 'ticker_4h',
    },
}, {
    'name': 'spot ticker 1d window with one symbol',
    'symbols': [symbol],
    'params': {
        'name': 'ticker_1d',
    },
}, {
    'name': 'spot miniticker window with one symbol',
    'symbols': [symbol],
    'params': {
        'name': 'miniTicker',
    },
}, {
    'name': 'swap - miniticker with one symbol',
    'symbols': ['BTC/USDT:USDT'],
    'params': {
        'name': 'miniTicker',
    },
}, {
    'name': 'delivery - all tickers',
    'symbols': None,
    'params': {},
}]
    for i in range(0, len(tests)):
        params = tests[i]
        response = None
        now = exchange.milliseconds()
        ends = now + 5000
        while now < ends:
            try:
                response = await exchange.watch_tickers(params['symbols'], params['params'])
                assert isinstance(response, dict), exchange.id + ' ' + method + ' ' + ' must return an object. ' + exchange.json(response)
                values = list(response.values())
                for ii in range(0, len(values)):
                    ticker = values[ii]
                    test_ticker(exchange, {}, method, ticker, ticker['symbol'])
            except Exception as e:
                if not (isinstance(e, errors.NetworkError)):
                    exchange.log('[FAILED] - TEST - ' + exchange.id + ' ' + method + ' ' + params['name'])
                    raise e
                break
            now = exchange.milliseconds()
        await exchange.close()
        exchange.log('[OK] - TEST - ' + exchange.id + ' ' + method + ' ' + params['name'])
    return True
binance = ccxtpro.binance()
asyncio.run (test_watch_tickers(binance, 'BTC/USDT'))
