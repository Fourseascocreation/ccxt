# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange

class korbit(Exchange):

    def describe(self):
        return self.deep_extend(super(korbit, self).describe(), {
            'id': 'korbit',
            'name': 'korbit',
            'countries': ['KR'],
            'rateLimit': 1000,
            'version': 'v1',
            'urls': {
                'logo': 'https://www.korbit.co.kr/images/resources/desktop/common/korbit-logo-horizontal-white.png?0febcbd025e0eee5cc8766a5f4d9bf50',
                'www': 'https://www.korbit.co.kr/',
                'api': 'https://api.korbit.co.kr',
                'doc': 'https://apidocs.korbit.co.kr/',
            },
            'has': {
                'createLimitOrder': False,
                'createMarketOrder': False,
                'fetchL2OrderBook': False,
                'fetchTrades': False,
                'fetchMarkets': True,
                'fetchOrderBook': True,
                'fetchTicker': False,  # TODO: 'ticker'
                'fetchBalance': False,  # TODO: 'user/balances'
                'fetchOrder': False,  # TODO: '/user/orders' with id param
                'fetchOpenOrders': False,  # TODO: 'user/orders/open'
                'fetchMyTrades': False,  # TODO: '/user/orders'
                'createOrder': False,  # TODO: 'user/orders/buy'
                'cancelOrder': False,  # TODO: 'user/orders/cancel' with id param
                'cancelAllOrders': False,  # TODO: 'user/orders/cancel'
            },
            'api': {
                'public': {
                    'get': [
                        'constants',
                        'orderbook',
                        'ticker',
                    ],
                },
                'private': {
                    'get': [
                        'user/balances',
                        'user/orders/open',
                        'user/orders'
                    ],
                    'post': [
                        'user/orders/buy',
                        'user/orders/cancel'
                    ],
                },
            },
        })

    def fetch_markets(self, params={}):
        response = self.publicGetConstants(params)
        #
        #     {
        #         "exchange": {
        #             "btc_krw": {
        #                 "tick_size": 500,
        #                 "min_price": 1000,
        #                 "max_price": 100000000,
        #                 "order_min_size": 0.00100000,
        #                 "order_max_size": 100.00000000
        #             },
        #             "eth_krw": {
        #                 "tick_size": 50,
        #                 "min_price": 1000,
        #                 "max_price": 100000000,
        #                 "order_min_size": 0.01000000,
        #                 "order_max_size": 1000.00000000
        #             },
        #             ...
        #         }
        #     }
        #
        result = []
        markets = self.safe_value(response, 'exchange', {})
        keys = list(markets.keys())
        for i in range(0, len(keys)):
            key = keys[i]
            market = markets[key]
            id = key
            baseId, quoteId = key.split('_')
            base = baseId.upper()
            quote = quoteId.upper()
            minimumOrderSize = self.safe_float(market, 'order_min_size')
            maximumOrderSize = self.safe_float(market, 'order_max_size')
            minimumPrice = self.safe_float(market, 'min_price')
            maximumPrice = self.safe_float(market, 'max_price')
            minimumCost = minimumOrderSize * minimumPrice
            maximumCost = maximumOrderSize * maximumPrice

            entry = {
                'id': id,
                'symbol': base + '/' + quote,
                'base': base,
                'quote': quote,
                'baseId': baseId,
                'quoteId': quoteId,
                'active': True,
                'limits': {
                    'amount': {
                        'min': minimumOrderSize,
                        'max': maximumOrderSize,
                    },
                    'price': {
                        'min': minimumPrice,
                        'max': maximumPrice,
                    },
                    'cost': {
                        'min': minimumCost,
                        'max': maximumCost,
                    },
                },
                'info': market,
            }
            result.append(entry)
        return result

    def fetch_order_book(self, symbol='BTC/KRW', params={}):
        self.load_markets()
        market = self.market(symbol)
        request = {
            'currency_pair': market['id'],
        }
        response = self.publicGetOrderbook(self.extend(request, params))
        #
        #     {
        #         "timestamp": 1386135077000,
        #         "bids": [["1100000", "0.0103918", "1"], ["1000000", "0.01000000", "1"], ...],
        #         "asks": [["569000", "0.50000000", "1"], ["568500", "2.00000000", "1"], ...]
        #     }
        #
        result = self.safe_value(response, 'result', {})
        return self.parse_order_book(result)
