# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.async.base.exchange import Exchange
import hashlib
import json
from ccxt.base.errors import ExchangeError


class coinone (Exchange):

    def describe(self):
        return self.deep_extend(super(coinone, self).describe(), {
            'id': 'coinone',
            'name': 'CoinOne',
            'countries': 'KR',  # Korea
            'rateLimit': 90,
            'version': 'v2',
            'has': {
                'CORS': True,
                'publicAPI': True,
                'fetchBalance': True,
                'fetchCurrencies': True,
                'fetchDepositAddress': True,
                'fetchOrders': True,
                'fetchMyTrades': True,
                'fetchOHLCV': True,
                'withdraw': True,
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/629338/35319687-5ca529cc-00fa-11e8-863a-89f169a511e1.png',
                'api': 'https://api.coinone.co.kr/',
                'www': 'https://coinone.co.kr',
                'doc': [
                    'http://doc.coinone.co.kr/',
                ],
            },
            'requiredCredentials': {
                'apiKey': True,
                'secret': True,
            },
            'api': {
                'public': {
                    'get': [
                        'orderbook/',
                        'trades/',
                        'ticker/',
                    ],
                },
                'private': {
                    'post': [
                        'account/btc_deposit_address/',
                        'account/balance/',
                        'account/daily_balance/',
                        'account/user_info/',
                        'account/virtual_account/',
                        'order/cancel_all/',
                        'order/cancel/',
                        'order/limit_buy/',
                        'order/limit_sell/',
                        'order/complete_orders/',
                        'order/limit_orders/',
                        'order/order_info/',
                        'transaction/auth_number/',
                        'transaction/history/',
                        'transaction/krw/history/',
                        'transaction/btc/',
                        'transaction/coin/',
                    ],
                },
            },
            'markets': {
                'BTC/KRW': {
                    'id': 'btc',
                    'symbol': 'BTC/KRW',
                    'base': 'BTC',
                    'quote': 'KRW',
                },
                'BTG/KRW': {
                    'id': 'btg',
                    'symbol': 'BTG/KRW',
                    'base': 'BTG',
                    'quote': 'KRW',
                },
                'IOT/KRW': {
                    'id': 'iota',
                    'symbol': 'IOT/KRW',
                    'base': 'IOT',
                    'quote': 'KRW',
                },
                'LTC/KRW': {
                    'id': 'ltc',
                    'symbol': 'LTC/KRW',
                    'base': 'LTC',
                    'quote': 'KRW',
                },
                'QTUM/KRW': {
                    'id': 'qtum',
                    'symbol': 'QTUM/KRW',
                    'base': 'QTUM',
                    'quote': 'KRW',
                },
                'XRP/KRW': {
                    'id': 'xrp',
                    'symbol': 'XRP/KRW',
                    'base': 'XRP',
                    'quote': 'KRW',
                },
                'ETH/KRW': {
                    'id': 'eth',
                    'symbol': 'ETH/KRW',
                    'base': 'ETH',
                    'quote': 'KRW',
                },
                'ETC/KRW': {
                    'id': 'etc',
                    'symbol': 'ETC/KRW',
                    'base': 'ETC',
                    'quote': 'KRW',
                },
                'BCH/KRW': {
                    'id': 'bch',
                    'symbol': 'BCH/KRW',
                    'base': 'BCH',
                    'quote': 'KRW',
                },
            },
            'fees': {
                'trading': {
                    'tierBased': True,
                    'percentage': True,
                    'taker': 0.1 / 100,
                    'maker': 0.1 / 100,
                    'tiers': {
                        'taker': [
                            [100000000, 0.1 / 100],
                            [10000000000, 0.09 / 100],
                            [50000000000, 0.08 / 100],
                            [100000000000, 0.07 / 100],
                            [200000000000, 0.06 / 100],
                            [300000000000, 0.05 / 100],
                            [400000000000, 0.04 / 100],
                            [500000000000, 0.03 / 100],
                            [999900000000000, 0.02 / 100],
                        ],
                        'maker': [
                            [100000000, 0.1 / 100],
                            [10000000000, 0.08 / 100],
                            [50000000000, 0.06 / 100],
                            [100000000000, 0.04 / 100],
                            [200000000000, 0.02 / 100],
                            [300000000000, 0.01 / 100],
                            [400000000000, 0],
                            [500000000000, 0],
                            [999900000000000, 0],
                        ],
                    },
                },
            },
        })

    async def fetch_balance(self, params={}):
        res = await self.privateGetV2AccountBalance()
        result = {'info': res}
        self.market.forEach((mrk) => {
            id = mrk.id
            if id in res:
                balance = res[id]
                account = {
                    'free': float(balance['avail']),
                    'used': float(balance['balance']) - float(balance['avail']),
                    'total': float(balance['balance']),
                }
                result[mrk.symbol] = account
        })
        return self.parse_balance(result)

    async def fetch_order_book(self, symbol, params={}):
        market = self.market(symbol)
        res = await self.publicGetOrderbook(self.extend({
            'currency': market['id'],
            'format': 'json',
        }, params))
        return self.parse_order_book(res, None, 'bid', 'ask', 'price', 'qty')

    async def fetch_ticker(self, symbol, params={}):
        market = self.market(symbol)
        timestamp = self.milliseconds()
        res = await self.publicGetTicker(self.extend({
            'currency': market['id'],
            'format': 'json',
        }, params))
        ticker = res
        baseVolume = self.safe_float(ticker, 'volume')
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'high': self.safe_float(ticker, 'high'),
            'low': self.safe_float(ticker, 'low'),
            'bid': self.safe_float(ticker, 'last'),
            'ask': self.safe_float(ticker, 'last'),
            'vwap': None,
            'open': None,
            'close': None,
            'first': self.safe_float(ticker, 'first'),
            'last': self.safe_float(ticker, 'last'),
            'change': self.safe_float(ticker, 'yesterday_last') - self.safe_float(ticker, 'last'),
            'percentage': None,
            'average': None,
            'baseVolume': baseVolume,
            'quoteVolume': None,
            'info': ticker,
        }

    def parse_trade(self, trade, symbol=None):
        timestamp = int(trade['timestamp']) * 1000
        side = 'buy'
        return {
            'id': None,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'order': None,
            'symbol': symbol,
            'type': None,
            'side': side,
            'price': self.safe_float(trade, 'price'),
            'amount': self.safe_float(trade, 'qty'),
            'fee': None,
            'info': trade,
        }

    async def fetch_trades(self, symbol, since=None, limit=None, params={}):
        market = self.market(symbol)
        result = await self.publicGetTrades(self.extend({
            'currency': market['id'],
            'period': 'hour',
            'format': 'json',
        }, params))
        trades = result['completeOrders']
        return self.parse_trades(trades, symbol)

    async def cancel_order(self, id, symbol=None, params={}):
        # raise ExchangeError(self.id + ' cancelOrder() is not fully implemented yet')
        method = 'privatePostOrderCancel'
        return await getattr(self, method)({'orderID': id})

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        request = self.implode_params(path, params)
        query = self.omit(params, self.extract_params(path))
        url = self.urls['api'] + '/' + request
        headers = {}
        if api == 'public':
            if query:
                url += '?' + self.urlencode(query)
        else:
            self.check_required_credentials()
            nonce = str(self.nonce())
            plj = {
                'access_token': self.apiKey,
                'nonce': nonce,
            }
            payload = Buffer.from(json.dumps(plj)).toString('base64')
            body = payload
            signature = self.hmac(body, self.encode(self.secret.upper()), hashlib.sha512, 'hex')
            headers = {
                'content-type': 'application/json',
                'X-COINONE-PAYLOAD': body,
                'X-COINONE-SIGNATURE': signature,
            }
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def handle_errors(self, code, reason, url, method, headers, body):
        if code == 200:
            if (body[0] == '{') or (body[0] == '['):
                response = json.loads(body)
                if 'result' in response:
                    success = response['result']
                    if success != 'success':
                        if 'errorCode' in response:
                            raise ExchangeError(self.id + ' malformed response: no "message" in response: ' + body)
                        raise ExchangeError(self.id + ' error returned: ' + body)
                else:
                    raise ExchangeError(self.id + ' malformed response: no "result" in response: ' + body)
            else:
                raise ExchangeError(self.id + ' returned a non-JSON reply: ' + body)
