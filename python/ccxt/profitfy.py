# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange
import hashlib
import math
import time
import uuid
import base64
import json
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import AuthenticationError
from ccxt.base.errors import InvalidOrder

class profitfy(Exchange):

    def describe(self):
        return self.deep_extend(super(profitfy, self).describe(), {
            'id': 'profitfy',
            'name': 'Profitfy',
            'countries': ['BR'],
            'rateLimit': 1000,
            'has': {
                'fetchCurrencies': True,
                'fetchTickers': True,
                'fetchOpenOrders': True,
                'fetchMyTrades': True,
                'fetchDepositAddress': True,
            },
            'urls': {
                'api': 'https://profitfy.trade/api/v1',
                'www': 'https://profitfy.trade/',
                'doc': 'https://profitfy.trade/Home/Api',
                'fees': '',
            },
            'api': {
                'public': {
                    'get': [
                        'orderbook/{coinFrom}/{coinTo}',
                    ],
                },
                'private': {
                    'post': [
                        'orders/buy',
                        'orders/sell',
                    ],
                },
            },
            'commonCurrencies': {
                'EPC': 'Epacoin',
            },
            'fees': {
                'trading': {
                    'maker': 0.005,
                    'taker': 0.005,
                },
            },
            'precision': {
                'amount': 8,
                'price': 8,
            },
            'markets': {
                'BTC/BRL': {'id': 'BTC', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL', 'suffix': 'Bitcoin'},
                'LTC/BRL': {'id': 'LTC', 'symbol': 'LTC/BRL', 'base': 'LTC', 'quote': 'BRL', 'suffix': 'Litecoin'},
                'BCH/BRL': {'id': 'BCH', 'symbol': 'BCH/BRL', 'base': 'BCH', 'quote': 'BRL', 'suffix': 'BCash'},
            },
            'coins': {
                'coinTo': 'btc',
                'coinFrom': 'brl',
            }
        })

    def fetch_currencies(self, params={}):
        currencies = self.publicGetCurrencies(params)
        ids = list(currencies.keys())
        result = {}
        for i in range(0, len(ids)):
            id = ids[i]
            currency = currencies[id]
            precision = self.safe_integer(currency, 'decimal')
            uppercase = id.upper()
            code = self.common_currency_code(uppercase)
            active = self.safe_integer(currency, 'active') == 1
            maintenance = self.safe_integer(currency, 'under_maintenance')
            if maintenance != 0:
                active = False
            canWithdraw = self.safe_integer(currency, 'is_withdrawal_active') == 1
            canDeposit = self.safe_integer(currency, 'is_deposit_active') == 1
            if not canWithdraw or not canDeposit:
                active = False
            result[code] = {
                'id': id,
                'code': code,
                'name': currency['name'],
                'active': active,
                'precision': precision,
                'funding': {
                    'withdraw': {
                        'active': canWithdraw,
                        'fee': currency['txWithdrawalFee'],
                    },
                    'deposit': {
                        'active': canDeposit,
                        'fee': currency['txDepositFee'],
                    },
                },
                'limits': {
                    'amount': {
                        'min': currency['minAmountTrade'],
                        'max': math.pow(10, precision),
                    },
                    'price': {
                        'min': math.pow(10, -precision),
                        'max': math.pow(10, precision),
                    },
                    'cost': {
                        'min': None,
                        'max': None,
                    },
                    'withdraw': {
                        'min': currency['MinWithdrawal'],
                        'max': math.pow(10, precision),
                    },
                    'deposit': {
                        'min': currency['minDeposit'],
                        'max': None,
                    },
                },
                'info': currency,
            }
        return result

    def fetch_markets(self):
        markets = self.publicGetTicker()
        ids = list(markets.keys())
        result = []
        for i in range(0, len(ids)):
            id = ids[i]
            market = markets[id]
            baseId, quoteId = id.split('_')
            base = baseId.upper()
            quote = quoteId.upper()
            base = self.common_currency_code(base)
            quote = self.common_currency_code(quote)
            symbol = base + '/' + quote
            active = self.safe_integer(market, 'active') == 1
            precision = {
                'amount': 8,
                'price': 8,
            }
            lot = math.pow(10, -precision['amount'])
            result.append({
                'id': id,
                'symbol': symbol.upper(),
                'base': base,
                'quote': quote,
                'baseId': baseId,
                'quoteId': quoteId,
                'active': active,
                'lot': lot,
                'precision': precision,
                'limits': {
                    'amount': {
                        'min': lot,
                        'max': math.pow(10, precision['amount']),
                    },
                    'price': {
                        'min': math.pow(10, -precision['price']),
                        'max': math.pow(10, precision['price']),
                    },
                    'cost': {
                        'min': None,
                        'max': None,
                    },
                },
                'info': market,
            })
        return result

    def parse_ticker(self, ticker, market=None):
        symbol = market['symbol']
        timestamp = ticker['date']
        ticker = ticker['ticker']
        last = self.safe_float(ticker, 'last')
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'high': self.safe_float(ticker, 'highestBid24'),
            'low': self.safe_float(ticker, 'lowestAsk24'),
            'bid': self.safe_float(ticker, 'highestBid'),
            'bidVolume': None,
            'ask': self.safe_float(ticker, 'lowestAsk'),
            'askVolume': None,
            'vwap': None,
            'open': None,
            'close': last,
            'last': last,
            'previousClose': None,
            'change': self.safe_float(ticker, 'percentChange'),
            'percentage': None,
            'average': None,
            'baseVolume': self.safe_float(ticker, 'baseVolume24'),
            'quoteVolume': self.safe_float(ticker, 'quoteVolume24'),
            'info': ticker,
        }

    def fetch_ticker(self, symbol, params={}):
        self.load_markets()
        market = self.market(symbol)
        ticker = self.publicGetTickerMarket(self.extend({
            'market': market['id'],
        }, params))
        ticker = {
            'date': self.milliseconds(),
            'ticker': ticker,
        }
        return self.parse_ticker(ticker, market)

    def fetch_tickers(self, symbols=None, params={}):
        self.load_markets()
        tickers = self.publicGetTicker(params)
        result = {}
        timestamp = self.milliseconds()
        ids = list(tickers.keys())
        for i in range(0, len(ids)):
            id = ids[i]
            market = self.markets_by_id[id]
            symbol = market['symbol']
            ticker = {
                'date': timestamp,
                'ticker': tickers[id],
            }
            result[symbol] = self.parse_ticker(ticker, market)
        return result

    def fetch_order_book(self, symbol=None, limit=None, params={}):
        # self.load_markets()
        order_book = self.publicGetOrderbookCoinfromCointo(self.extend({
            'coinFrom': self.coins['coinFrom'],
            'coinTo': self.coins['coinTo'],
        }, params))
        for i in range(len(order_book)):
            return {
                'bids': self.get_adjusted_order_book(order_book[i]['buy'], 'price', 'amount'),
                'asks': self.get_adjusted_order_book(order_book[i]['sell'], 'price', 'amount'),
            }

    def parse_trade(self, trade, market=None):
        timestamp = None
        if 'date_exec' in trade:
            timestamp = self.parse8601(trade['date_exec'])
        else:
            timestamp = self.parse8601(trade['date'])
        price = self.safe_float(trade, 'price')
        amount = self.safe_float(trade, 'amount')
        symbol = market['symbol']
        cost = self.safe_float(trade, 'total')
        orderId = self.safe_string(trade, 'order_number')
        progress = amount * self.safe_float(trade, 'progress')
        return {
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': symbol,
            'id': orderId,
            'order': orderId,
            'type': 'limit',
            'status': 4,
            'side': trade['type'],
            'price': price,
            'amount': amount,
            'filled': progress,
            'cost': cost,
            'fee': None,
            'info': trade,
        }

    def fetch_trades(self, symbol, since=None, limit=None, params={}):
        self.load_markets()
        market = self.market(symbol)
        trades = self.publicGetTradehistoryMarket(self.extend({
            'market': market['id'],
        }, params))
        return self.parse_trades(trades, market, since, limit)

    def fetch_balance(self, params={}):
        self.load_markets()
        balances = self.privatePostCompleteBalance(params)
        print balances
        result = {'info': balances}
        currencies = list(balances.keys())
        for i in range(0, len(currencies)):
            id = currencies[i]
            balance = balances[id]
            if float(balance['total']) > 0:
                currency = self.common_currency_code(id)
                account = {
                    'free': float(balance['available']),
                    'used': 0.0,
                    'total': float(balance['total']),
                }
                account['used'] = account['total'] - account['free']
                result[currency] = account
        return self.parse_balance(result)

    def parse_status(self, status):
        if status == 'open':
            return 2
        if status == 'A':
            return 2
        if status == 'executed_completely':
            return 4
        if status == 'canceled':
            return 3

    def parse_order(self, order, market=None):
        symbol = None
        if market is None:
            marketId = self.safe_string(order, 'market')
            if marketId:
                if marketId in self.markets_by_id:
                    market = self.markets_by_id[marketId]
        if market:
            symbol = market['symbol']
        timestamp = self.safe_value(order, 'timestamp')
        if not timestamp:
            timestamp = self.parse8601(order['date'])
        price = self.safe_float(order, 'price')
        cost = self.safe_float(order, 'total', 0.0)
        amount = self.safe_float(order, 'amount')
        filledPercentage = self.safe_float(order, 'progress')
        filled = filledPercentage
        remaining = self.amount_to_precision(symbol, amount - filled)
        info = order
        if 'info' in info:
            info = order
        status = 2
        if 'status' in order:
            status = self.parse_status(order['status'])

        return {
            'id': order['order_number'],
            'datetime': self.iso8601(timestamp),
            'timestamp': timestamp,
            'lastTradeTimestamp': None,
            'status': status,
            'symbol': symbol,
            'type': 'limit',
            'side': order['type'],
            'price': price,
            'cost': cost,
            'amount': amount,
            'quantity': amount,
            'filled': filled,
            'remaining': remaining,
            'trades': None,
            'fee': self.safe_value(order, 'fee'),
            'info': info,
        }

    def create_order(self, symbol=None, type=None, side=None, amount=None, price=None, params={}):
        response = self.privatePostOrdersBuy(self.extend({
            'coinFrom': self.coins['coinFrom'],
            'coinTo': self.coins['coinTo'],
            'amount': amount,
            'price': price,
        }, params))
        # order = {
        #     'timestamp': response['timestamp'],
        #     'status': response['Ativa'],
        #     'type': response['Buy'],
        #     'coinFrom': response['BTC'],
        #     'coinTo': response['BRL'],
        #     'negotiations': response['negotiations'],
        #     'orderId': response['orderId'],
        #     'userId': response['userId'],
        #     'nickName': response['nickName'],
        #     'price': response['price'],
        #     'amount': response['amount'],
        # }
        print response
        return response

    def cancel_order(self, id, symbol=None, params={}):
        self.load_markets()
        market = self.market(symbol)
        result = self.privatePostCancelOrder(self.extend({
            'order_number': id,
            'market': market['id'],
        }, params))
        return result

    def fetch_order(self, id, symbol=None):

        result = None

        print('Começa aqui...')

        for item in self.fetch_open_orders(symbol):
            if id == item['id']:
                print item['id']
                print id
                result = item
                print('entrou no fetch_open_orders')
                return result

        time.sleep(1)

        for item in self.fetch_my_trades(symbol):
            if id == item['id']:
                print item['id']
                print id
                result = item
                print('entrou no fetch_trades')
                return result

        return {'id': id, 'status': 3, 'filled': '0'}

    def fetch_open_orders(self, symbol=None, since=None, limit=None, params={}):
        self.load_markets()
        time.sleep(1)
        market = self.market(symbol)
        orders = self.privatePostOpenOrders(self.extend({
            'market': market['id'],
        }, params))
        return self.parse_orders(orders['order_open'], market, since, limit)

    def fetch_my_trades(self, symbol=None, since=None, limit=None, params={}):
        self.load_markets()
        time.sleep(1)
        market = self.market(symbol)
        trades = self.privatePostTradeHistory(self.extend({
            'market': market['id'],
        }, params))
        return self.parse_trades(trades['trade_history'], market, since, limit)

    def fetch_deposit_address(self, code, params={}):
        self.load_markets()
        currency = self.currency(code)
        response = self.privatePostDepositAddress(self.extend({
            'currency': currency['id'],
        }, params))
        address = self.safe_string(response, 'deposit_address')
        self.check_address(address)
        tag = self.safe_string(response, 'payment_id')
        return {
            'currency': code,
            'address': address,
            'tag': tag,
            'info': response,
        }

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        url = self.urls['api'] + '/' + api
        query = self.omit(params, self.extract_params(path))
        if api == 'public':
            url += '/' + self.implode_params(path, params)
            if query:
                url += '?' + self.urlencode(query)
        else:
            url += '/' + self.implode_params(path, params)
            path = path.lower()
            method = 'POST'
            nonce = str(uuid.uuid4().hex)
            time_stamp = str(int(time.time()))
            # body_params = 'coinFrom=' + params['coinFrom'] + '&coinTo=' + params['coinTo'] + '&amount=' + params['amount'] + '&price=' + params['price']
            request_base_64 = self.hash(json.dumps({
                'coinFrom': self.coins['coinFrom'],
                'coinTo': self.coins['coinTo'],
                'amount': float(params['amount']),
                'price': float(params['price']),
            }), 'md5', 'base64')
            api_key = base64.b64encode(self.apiKey)
            sig_raw_data = self.apiKey + method + path + time_stamp + nonce + request_base_64
            signature = self.hmac(api_key, sig_raw_data.encode('utf-8'), hashlib.sha256, 'base64')
            print signature

            headers = {
                'Content-type': 'application/json',
                'Authorization': 'amx ' + self.apiKey + ':' + signature + ':' + nonce + ':' + time_stamp,
            }
        print({'url': url, 'method': method, 'body': body, 'headers': headers})
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def request(self, path, api='public', method='GET', params={}, headers=None, body=None):
        response = self.fetch2(path, api, method, params, headers, body)
        if 'success' in response:
            success = self.safe_integer(response, 'success')
        return response
