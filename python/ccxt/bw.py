# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange

# -----------------------------------------------------------------------------

try:
    basestring  # Python 3
except NameError:
    basestring = str  # Python 2
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import AuthenticationError
from ccxt.base.errors import InsufficientFunds
from ccxt.base.errors import OrderNotFound
from ccxt.base.errors import DDoSProtection


class bw (Exchange):

    def describe(self):
        return self.deep_extend(super(bw, self).describe(), {
            'id': 'bw',
            'name': 'bw',
            'countries': ['CN'],
            'version': 'v1',
            'has': {
                'fetchBalance': True,
                'fetchMarkets': True,
                'createOrder': True,
                'cancelOrder': True,
                'cancelOrders': True,
                'fetchTicker': False,
                'fetchTickers': False,
                'fetchMyTrades': False,
                'fetchTrades': True,
                'fetchOHLCV': True,
                'fetchOrder': True,
                'fetchOrders': False,
                'fetchOpenOrders': False,
                'fetchClosedOrders': False,
                'fetchCurrencies': True,
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/bw.jpg',
                'api': 'https://www.bw.com',
                'publicapi': 'https://kline.bw.com',
                'www': 'https://www.bw.com',
                'doc': 'https://www.bw.com/help/restApi',
                'fees': 'https://www.bw.com/help/rate',
                'referral': 'https://www.bw.com/regGetCommission/N2d2NjJEd2FMTHM=?lan=cn',
            },
            'api': {
                'public': {
                    'get': [
                        'exchange/config/controller/website/marketcontroller/getByWebId',
                        'exchange/config/controller/website/currencycontroller/getCurrencyList',
                        'api/data/v1/ticker',
                        'api/data/v1/entrusts',
                        'api/data/v1/trades',
                        'api/data/v1/klines',
                    ],
                },
                'private': {
                    'get':[
                        'exchange/entrust/controller/website/EntrustController/getEntrustById',
                        'exchange/entrust/controller/website/EntrustController/batchCancelEntrustByMarketId',
                    ],
                    'post': [
                        'exchange/entrust/controller/website/EntrustController/getEntrustById',
                        'exchange/fund/controller/website/fundcontroller/findbypage',
                        'exchange/entrust/controller/website/EntrustController/addEntrust',
                        'exchange/entrust/controller/website/EntrustController/cancelEntrust',
                    ],
                },
            },
            'fees': {
                'trading': {
                    'tierBased': False,
                    'percentage': True,
                    'maker': 0.1 / 100,
                    'taker': 0.1 / 100,
                },
                'funding': {
                    'tierBased': False,
                    'percentage': True,
                    'deposit': {},
                    'withdraw': {
                        'BTC': 0.001,
                        'ETH': 0.01,
                        'BCHABC': 0.001,
                        'LTC': 0.03,
                        'ETC': 0.1,
                        'USDT': 5,
                        'GMB': 1000,
                        'BSV': 0.001,
                        'GUSD': 6,
                        'LST': 10,
                        'DOGE': 1500,
                        '1ST': 30,
                        'OMG': 0.7,
                        'MANA': 80,
                        'TRUE': 6,
                        'BTM': 6,
                        'ADA': 10,
                        'XRP': 2,
                        'XWC': 1,
                        'QC': 5,
                        'DASH': 0.02,
                        'NEO': 0,
                        'QTUM': 0.2,
                        'LTC': 0.03,
                        'EOS': 0.5
                    },
                },
            },
            'exceptions': {
                '2012': OrderNotFound,
                '2014': OrderNotFound,
                '2015': OrderNotFound,
                '6895': AuthenticationError,
                '6896': AuthenticationError,
                '6897': AuthenticationError,
                '6898': AuthenticationError
            },
        })

    def fetch_markets(self, params={}):
        response = self.publicGetExchangeConfigControllerWebsiteMarketcontrollerGetByWebId()
        data = response['datas']
        result = []
        for i in range(0, len(data)):
            market = data[i]
            id = market['marketId']
            name = market['name']
            symbolParts = name.split('_')
            baseId = symbolParts[0]
            quoteId = symbolParts[1]
            base = baseId.upper()
            quote = quoteId.upper()
            base = self.common_currency_code(base)
            quote = self.common_currency_code(quote)
            symbol = base + '/' + quote
            active = True
            precision = {
                'amount': market['amountDecimal'],
                'price': market['priceDecimal'],
            }
            limits = {
                'amount': {
                    'min': market['minAmount'],
                    'max': None,
                },
                'price': {
                    'min': None,
                    'max': None,
                },
                'cost': {
                    'min': None,
                    'max': None,
                },
            }
            result.append({
                'id': id,
                'symbol': symbol,
                'base': base,
                'quote': quote,
                'baseId': baseId,
                'quoteId': quoteId,
                'active': active,
                'precision': precision,
                'limits': limits,
                'info': market,
            })
        return result

    def fetch_currencies(self, params={}):
        response = self.publicGetExchangeConfigControllerWebsiteCurrencycontrollerGetCurrencyList()
        data = response['datas']
        result = {}
        for i in range(0, len(data)):
            currency = data[i]
            id = currency['currencyId']
            name = currency['name']
            code = self.common_currency_code(id)
            result[code] = {
                'id': id,
                'code': code,
                'info': currency,
                'name': name
            }
        return result

    def parse_trade(self, trade, market=None):
        symbol = None
        if market is not None:
            symbol = market['symbol']
        timestamp = trade[2]
        id = timestamp
        orderId = None
        amount = float(trade[6])
        price = float(trade[5])
        cost = None
        if price is not None:
            if amount is not None:
                cost = amount * price
        side = trade[4]
        return {
            'info': trade,
            'id': id,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': symbol,
            'type': None,
            'side': side,
            'price': price,
            'amount': amount,
            'cost': cost,
            'order': orderId,
            'fee': None,
        }

    def fetch_trades(self, symbol, since=None, limit=None, params={}):
        self.load_markets()
        market = self.market(symbol)
        request = {
            'marketId': market['id'],
        }
        if limit is not None:
            request['dataSize'] = limit
        response = self.publicGetApiDataV1Trades(self.extend(request, params))
        return self.parse_trades(response['datas'], market, since, limit)

    def fetch_ticker(self, symbol, params={}):
        self.load_markets()
        market = self.market(symbol)
        request = {
            'marketId': market['id'],
        }
        response = self.publicGetApiDataV1Ticker(self.extend(request, params))
        data = response['datas']
        timestamp = self.milliseconds()
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'high': data[2],
            'low': data[3],
            'bid': data[7],
            'bidVolume': None,
            'ask': data[8],
            'askVolume': None,
            'vwap': None,
            'open': None,
            'close': data[1],
            'last': data[1],
            'previousClose': None,
            'change': None,
            'percentage': None,
            'average': None,
            'baseVolume': data[4],
            'quoteVolume': None,
            'info': response,
        }

    def fetch_order_book(self, symbol, limit=None, params={}):
        self.load_markets()
        market = self.market(symbol)
        request = {
            'marketId': market['id'],
        }
        if limit is not None:
            request['size'] = limit
        response = self.publicGetApiDataV1Entrusts(self.extend(request, params))
        data = response['datas']
        timestamp = data['timestamp']
        bidsKey = 'bids'
        asksKey = 'asks'
        priceKey = 0
        amountKey = 1
        orderbook = self.parse_order_book(data, timestamp, bidsKey, asksKey, priceKey, amountKey)
        return orderbook

    def parse_ohlcv(self, ohlcv, market = None, timeframe = '1m', since = None, limit = None):
        return [
            ohlcv[3], # timestamp
            ohlcv[4], # Open
            ohlcv[5], # High
            ohlcv[6], # Low
            ohlcv[7], # Close
            ohlcv[8], # 
        ]

    def fetch_ohlcv(self, symbol, timeframe = '1m', since = None, limit = None, params = {}):
        self.load_markets()
        market = self.market(symbol)
        request = {
            'marketId': market['id'],
            'type': timeframe.upper()
        }
        if limit is not None:
            request['dataSize'] = limit
        response = self.publicGetApiDataV1Klines(self.extend(request, params))
        return self.parse_ohlcvs(response['datas'], market, timeframe.upper(), since, limit)

    def fetch_balance(self, params={'pageSize':200, 'pageNum':1}):
        self.load_markets()
        response = self.privatePostExchangeFundControllerWebsiteFundcontrollerFindbypage(params)
        data = response['datas']['list']
        result = {'info': response}
        for i in range(0, len(data)):
            current = data[i]
            currencyId = current['currencyTypeId']
            code = ''
            if currencyId in self.currencies_by_id:
                code = self.currencies_by_id[currencyId]['name']
            else:
                code = self.common_currency_code(code)
            account = self.account()
            result[code] = account
            result[code]['used'] = self.safe_float(current, 'freeze')
            result[code]['free'] = self.safe_float(current, 'amount')
            result[code]['total'] = result[code]['used'] + result[code]['free']
        return self.parse_balance(result)

    def parse_order_status(self, status):
        statuses = {
            0: 'open',
            1: 'canceled',
            2: 'closed',
            3: 'open',
        }
        return statuses[status] if (status in list(statuses.keys())) else status

    def parse_side(self, sideId):
        if sideId == 1:
            return 'buy'
        elif sideId == 0:
            return 'sell'
        else:
            return None

    def parse_order(self, order, market=None):
        id = self.safe_string(order, 'entrustId')
        timestamp = self.safe_float(order, 'createTime')
        lastTradeTimestamp = None
        symbol = market['symbol']
        sideId = self.safe_integer(order, 'type')
        side = self.parse_side(sideId)
        type = None
        price = self.safe_float(order, 'price')
        amount = self.safe_float(order, 'amount')
        filled = self.safe_float(order, 'completeAmount')
        remaining = amount - filled
        average = self.safe_float(order, 'completeTotalMoney') / filled if filled > 0 else 0
        status = self.parse_order_status(self.safe_integer(order, 'status'))
        cost = filled * price
        
        result = {
            'info': order,
            'id': id,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'lastTradeTimestamp': lastTradeTimestamp,
            'symbol': symbol,
            'type': type,
            'side': side,
            'price': price,
            'cost': cost,
            'average': average,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'status': status,
            'fee': None,
        }
        return result

    def fetch_order(self, id, symbol=None, params={}):
        self.load_markets()
        market = self.market(symbol)
        request = {
            'marketId': market['id'],
            'entrustId': id,
        }
        response = self.privateGetExchangeEntrustControllerWebsiteEntrustControllerGetEntrustById(self.extend(request, params))
        order = self.parse_order(response['datas'], market)
        return order

    def create_order(self, symbol, type, side, amount, price=None, params={}):
        self.load_markets()
        sideId = None
        if side == 'buy':
            sideId = 1
        elif side == 'sell':
            sideId = 0
        request = {
            'marketId': self.market_id(symbol),
            'price': price,
            'amount': amount,
            'rangeType': 0,
            'type': sideId,
        }
        response = self.privatePostExchangeEntrustControllerWebsiteEntrustControllerAddEntrust(self.extend(request, params))
        data = response['datas']
        return {
            'info': response,
            'id': self.safeString (data, 'entrustId'),
            'price': price,
            'amount': amount,
            'side': 1 if side == 'buy' else 2
        }

    def cancel_order(self, id, symbol=None, params={}):
        self.load_markets()
        request = {
            'entrustId': id,
        }
        if symbol is not None:
            request['marketId'] = self.market_id(symbol)
        results = self.privatePostExchangeEntrustControllerWebsiteEntrustControllerCancelEntrust(self.extend(request, params))
        success = results['resMsg']
        returnVal = {'info': results, 'success': success['message']}
        return returnVal
    
    def cancel_all_orders(self, symbol, params={}):
        self.load_markets()
        request = {}
        if symbol is not None:
            request['marketId'] = self.market_id(symbol)
        results = self.privateGetExchangeEntrustControllerWebsiteEntrustControllerBatchCancelEntrustByMarketId(self.extend(request, params))
        success = results['resMsg']
        returnVal = {'info': results, 'success': success['message']}
        return returnVal

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        url = ''
        query = self.omit(params, self.extract_params(path))
        if api == 'public':
            baseUrl = self.urls['publicapi'] if 'api/data/v1' in path else self.urls['api']
            url = baseUrl + '/' + self.implode_params(path, params)
            if query:
                url += '?' + self.urlencode(query)
        else:
            url = self.urls['api'] + '/' + self.implode_params(path, params)
            self.check_required_credentials()
            nonce = str(self.milliseconds())
            payload = ''
            if method == 'GET':
                if query:
                    url += '?' + self.urlencode(query)
                query = self.keysort(query)
                for key in query.keys():
                    payload += key + query[key]
            else:
                query = self.keysort(query)
                payload = self.json(query)
                body = payload
                
            message = self.apiKey + nonce + payload + self.secret
            signature = self.hash(self.encode (message))
            headers = {
                "User-Agent" : "Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3",
                'Apiid' : self.apiKey,
                'Timestamp': nonce,
                'Sign' : signature
            }
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def handle_errors(self, code, reason, url, method, headers, body, response):
        if not isinstance(body, basestring):
            return  # fallback to default error handler
        if (body[0] == '{') or (body[0] == '['):
            feedback = self.id + ' ' + body
            result = self.safe_value(response, 'resMsg')
            if result is not None:
                if result['code'] != '1':
                    code = self.safe_string(result, 'code')
                    if code in self.exceptions:
                        raise self.exceptions[code](feedback)
                    else:
                        raise ExchangeError(feedback)
