namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class Exchange
{
    public async Task<List<Market>> FetchMarkets(Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchMarkets(parameters);
        return ((List<object>)res).Select(item => new Market(item)).ToList<Market>();
    }
    public async Task<Dictionary<string, object>> FetchAccounts(Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchAccounts(parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<List<Trade>> FetchTrades(string symbol, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchTrades(symbol, since, limit, parameters);
        return ((List<object>)res).Select(item => new Trade(item)).ToList<Trade>();
    }
    public async Task<Dictionary<string, object>> FetchDepositAddresses(List<string> codes = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchDepositAddresses(codes, parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<OrderBook> FetchOrderBook(string symbol, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchOrderBook(symbol, limit, parameters);
        return new OrderBook(res);
    }
    public async Task<float> FetchTime(Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchTime(parameters);
        return ((float)res);
    }
    public async Task<Dictionary<string, object>> FetchTradingLimits(List<string> symbols = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchTradingLimits(symbols, parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<List<BorrowRate>> FetchBorrowRates(Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchBorrowRates(parameters);
        return ((List<object>)res).Select(item => new BorrowRate(item)).ToList<BorrowRate>();
    }
    public async Task<Dictionary<string, LeverageTier>> FetchLeverageTiers(List<string> symbols = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchLeverageTiers(symbols, parameters);
        var keys = ((Dictionary<string, object>)res).Keys.ToList();
        var result = new Dictionary<string, LeverageTier>();
        foreach (var key in keys)
        {
            result[key] = new LeverageTier(((Dictionary<string,object>)res)[key]);
        }
        return result;
    }
    public async Task<List<FundingRate>> FetchFundingRates(List<string> symbols = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchFundingRates(symbols, parameters);
        return ((List<object>)res).Select(item => new FundingRate(item)).ToList<FundingRate>();
    }
    public async Task<DepositAddressResponse> CreateDepositAddress(string code, Dictionary<string, object> parameters = null)
    {
        var res = await this.createDepositAddress(code, parameters);
        return new DepositAddressResponse(res);
    }
    public async Task<Dictionary<string, object>> SetLeverage(object leverage, string symbol = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.setLeverage(leverage, symbol, parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<List<OpenInterest>> FetchOpenInterestHistory(string symbol, string timeframe = "1h", Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchOpenInterestHistory(symbol, timeframe, since, limit, parameters);
        return ((List<object>)res).Select(item => new OpenInterest(item)).ToList<OpenInterest>();
    }
    public async Task<OpenInterest> FetchOpenInterest(string symbol, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchOpenInterest(symbol, parameters);
        return new OpenInterest(res);
    }
    public Dictionary<string, object> SetMarkets(object markets, object currencies = null)
    {
        var res = this.setMarkets(markets, currencies);
        return ((Dictionary<string, object>)res);
    }
    public async Task<List<OHLCV>> FetchOHLCV(string symbol, string timeframe = "1m", Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchOHLCV(symbol, timeframe, since, limit, parameters);
        return ((List<object>)res).Select(item => new OHLCV(item)).ToList<OHLCV>();
    }
    public async Task<object> FetchL2OrderBook(string symbol, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchL2OrderBook(symbol, limit, parameters);
        return ((object)res);
    }
    public async Task<object> Fetch2(object path, object api = null, string method = "GET", Dictionary<string, object> parameters = null, object headers = null, object body = null, Dictionary<string, object> config = null)
    {
        var res = await this.fetch2(path, api, method, parameters, headers, body, config);
        return ((object)res);
    }
    public async Task<List<OHLCVC>> FetchOHLCVC(object symbol, string timeframe = "1m", object since = null, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchOHLCVC(symbol, timeframe, since, limit, parameters);
        return ((List<object>)res).Select(item => new OHLCVC(item)).ToList<OHLCVC>();
    }
    public async Task<Order> EditLimitBuyOrder(object id, object symbol, object amount, object price = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.editLimitBuyOrder(id, symbol, amount, price, parameters);
        return new Order(res);
    }
    public async Task<Order> EditLimitSellOrder(object id, object symbol, object amount, object price = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.editLimitSellOrder(id, symbol, amount, price, parameters);
        return new Order(res);
    }
    public async Task<Order> EditLimitOrder(object id, object symbol, object side, object amount, object price = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.editLimitOrder(id, symbol, side, amount, price, parameters);
        return new Order(res);
    }
    public async Task<Order> EditOrder(string id, object symbol, object type, object side, object amount, object price = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.editOrder(id, symbol, type, side, amount, price, parameters);
        return new Order(res);
    }
    public async Task<Dictionary<string, object>> FetchPermissions(Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchPermissions(parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<Position> FetchPosition(string symbol, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchPosition(symbol, parameters);
        return new Position(res);
    }
    public async Task<List<Position>> FetchPositions(List<string> symbols = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchPositions(symbols, parameters);
        return ((List<object>)res).Select(item => new Position(item)).ToList<Position>();
    }
    public async Task<List<Position>> FetchPositionsRisk(List<string> symbols = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchPositionsRisk(symbols, parameters);
        return ((List<object>)res).Select(item => new Position(item)).ToList<Position>();
    }
    public async Task<Dictionary<string, Ticker>> FetchBidsAsks(List<string> symbols = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchBidsAsks(symbols, parameters);
        var keys = ((Dictionary<string, object>)res).Keys.ToList();
        var result = new Dictionary<string, Ticker>();
        foreach (var key in keys)
        {
            result[key] = new Ticker(((Dictionary<string,object>)res)[key]);
        }
        return result;
    }
    public async Task<List<BorrowInterest>> FetchBorrowInterest(string code = null, string symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchBorrowInterest(code, symbol, since, limit, parameters);
        return ((List<object>)res).Select(item => new BorrowInterest(item)).ToList<BorrowInterest>();
    }
    public async Task<Dictionary<string, OrderBook>> FetchOrderBooks(List<string> symbols = null, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchOrderBooks(symbols, limit, parameters);
        var keys = ((Dictionary<string, object>)res).Keys.ToList();
        var result = new Dictionary<string, OrderBook>();
        foreach (var key in keys)
        {
            result[key] = new OrderBook(((Dictionary<string,object>)res)[key]);
        }
        return result;
    }
    public async Task<List<FundingRate>> FetchFundingRateHistory(string symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchFundingRateHistory(symbol, since, limit, parameters);
        return ((List<object>)res).Select(item => new FundingRate(item)).ToList<FundingRate>();
    }
    public async Task<List<LedgerEntry>> FetchLedger(string code = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchLedger(code, since, limit, parameters);
        return ((List<object>)res).Select(item => new LedgerEntry(item)).ToList<LedgerEntry>();
    }
    public async Task<LedgerEntry> FetchLedgerEntry(string id, string code = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchLedgerEntry(id, code, parameters);
        return new LedgerEntry(res);
    }
    public async Task<Balances> FetchBalance(Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchBalance(parameters);
        return new Balances(res);
    }
    public async Task<Balance> FetchPartialBalance(object part, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchPartialBalance(part, parameters);
        return new Balance(res);
    }
    public async Task<Balance> FetchFreeBalance(Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchFreeBalance(parameters);
        return new Balance(res);
    }
    public async Task<Balance> FetchUsedBalance(Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchUsedBalance(parameters);
        return new Balance(res);
    }
    public async Task<Balance> FetchTotalBalance(Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchTotalBalance(parameters);
        return new Balance(res);
    }
    public async Task<object> FetchStatus(Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchStatus(parameters);
        return ((object)res);
    }
    public async Task<Dictionary<string, object>> FetchFundingFee(string code, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchFundingFee(code, parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<Dictionary<string, object>> FetchFundingFees(List<string> codes = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchFundingFees(codes, parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<Dictionary<string, object>> FetchTransactionFee(string code, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchTransactionFee(code, parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<Dictionary<string, object>> FetchTransactionFees(List<string> codes = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchTransactionFees(codes, parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<Dictionary<string, DepositWithdrawFeeNetwork>> FetchDepositWithdrawFees(List<string> codes = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchDepositWithdrawFees(codes, parameters);
        var keys = ((Dictionary<string, object>)res).Keys.ToList();
        var result = new Dictionary<string, DepositWithdrawFeeNetwork>();
        foreach (var key in keys)
        {
            result[key] = new DepositWithdrawFeeNetwork(((Dictionary<string,object>)res)[key]);
        }
        return result;
    }
    public async Task<DepositWithdrawFeeNetwork> FetchDepositWithdrawFee(string code, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchDepositWithdrawFee(code, parameters);
        return new DepositWithdrawFeeNetwork(res);
    }
    public async Task<object> FetchBorrowRate(string code, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchBorrowRate(code, parameters);
        return ((object)res);
    }
    public async Task<Ticker> FetchTicker(string symbol, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchTicker(symbol, parameters);
        return new Ticker(res);
    }
    public async Task<Dictionary<string, Ticker>> FetchTickers(List<string> symbols = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchTickers(symbols, parameters);
        var keys = ((Dictionary<string, object>)res).Keys.ToList();
        var result = new Dictionary<string, Ticker>();
        foreach (var key in keys)
        {
            result[key] = new Ticker(((Dictionary<string,object>)res)[key]);
        }
        return result;
    }
    public async Task<Order> FetchOrder(string id, string symbol = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchOrder(id, symbol, parameters);
        return new Order(res);
    }
    public async Task<string> FetchOrderStatus(string id, string symbol = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchOrderStatus(id, symbol, parameters);
        return ((string)res);
    }
    public async Task<Order> FetchUnifiedOrder(object order, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchUnifiedOrder(order, parameters);
        return new Order(res);
    }
    public async Task<Order> CreateOrder(string symbol, string type, string side, object amount, object price = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.createOrder(symbol, type, side, amount, price, parameters);
        return new Order(res);
    }
    public async Task<Dictionary<string, object>> CancelOrder(string id, string symbol = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.cancelOrder(id, symbol, parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<Dictionary<string, object>> CancelAllOrders(string symbol = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.cancelAllOrders(symbol, parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<Dictionary<string, object>> CancelUnifiedOrder(object order, Dictionary<string, object> parameters = null)
    {
        var res = await this.cancelUnifiedOrder(order, parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<List<Order>> FetchOrders(string symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchOrders(symbol, since, limit, parameters);
        return ((List<object>)res).Select(item => new Order(item)).ToList<Order>();
    }
    public async Task<List<Trade>> FetchOrderTrades(string id, string symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchOrderTrades(id, symbol, since, limit, parameters);
        return ((List<object>)res).Select(item => new Trade(item)).ToList<Trade>();
    }
    public async Task<List<Order>> FetchOpenOrders(string symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchOpenOrders(symbol, since, limit, parameters);
        return ((List<object>)res).Select(item => new Order(item)).ToList<Order>();
    }
    public async Task<List<Order>> FetchClosedOrders(string symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchClosedOrders(symbol, since, limit, parameters);
        return ((List<object>)res).Select(item => new Order(item)).ToList<Order>();
    }
    public async Task<List<Trade>> FetchMyTrades(string symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchMyTrades(symbol, since, limit, parameters);
        return ((List<object>)res).Select(item => new Trade(item)).ToList<Trade>();
    }
    public async Task<List<Transaction>> FetchTransactions(string symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchTransactions(symbol, since, limit, parameters);
        return ((List<object>)res).Select(item => new Transaction(item)).ToList<Transaction>();
    }
    public async Task<List<Transaction>> FetchDeposits(string symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchDeposits(symbol, since, limit, parameters);
        return ((List<object>)res).Select(item => new Transaction(item)).ToList<Transaction>();
    }
    public async Task<List<Transaction>> FetchWithdrawals(string symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchWithdrawals(symbol, since, limit, parameters);
        return ((List<object>)res).Select(item => new Transaction(item)).ToList<Transaction>();
    }
    public async Task<object> FetchDepositAddress(string code, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchDepositAddress(code, parameters);
        return ((object)res);
    }
    public async Task<Order> CreateLimitOrder(string symbol, string side, object amount, object price, Dictionary<string, object> parameters = null)
    {
        var res = await this.createLimitOrder(symbol, side, amount, price, parameters);
        return new Order(res);
    }
    public async Task<Order> CreateMarketOrder(string symbol, string side, object amount, object price = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.createMarketOrder(symbol, side, amount, price, parameters);
        return new Order(res);
    }
    public async Task<Order> CreateLimitBuyOrder(string symbol, object amount, object price, Dictionary<string, object> parameters = null)
    {
        var res = await this.createLimitBuyOrder(symbol, amount, price, parameters);
        return new Order(res);
    }
    public async Task<Order> CreateLimitSellOrder(string symbol, object amount, object price, Dictionary<string, object> parameters = null)
    {
        var res = await this.createLimitSellOrder(symbol, amount, price, parameters);
        return new Order(res);
    }
    public async Task<Order> CreateMarketBuyOrder(string symbol, object amount, Dictionary<string, object> parameters = null)
    {
        var res = await this.createMarketBuyOrder(symbol, amount, parameters);
        return new Order(res);
    }
    public async Task<Order> CreateMarketSellOrder(string symbol, object amount, Dictionary<string, object> parameters = null)
    {
        var res = await this.createMarketSellOrder(symbol, amount, parameters);
        return new Order(res);
    }
    public async Task<object> FetchMarketLeverageTiers(string symbol, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchMarketLeverageTiers(symbol, parameters);
        return ((object)res);
    }
    public async Task<Order> CreatePostOnlyOrder(string symbol, string type, string side, object amount, object price, Dictionary<string, object> parameters = null)
    {
        var res = await this.createPostOnlyOrder(symbol, type, side, amount, price, parameters);
        return new Order(res);
    }
    public async Task<Order> CreateReduceOnlyOrder(string symbol, string type, string side, object amount, object price, Dictionary<string, object> parameters = null)
    {
        var res = await this.createReduceOnlyOrder(symbol, type, side, amount, price, parameters);
        return new Order(res);
    }
    public async Task<Order> CreateStopOrder(string symbol, string type, string side, object amount, object price = null, object stopPrice = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.createStopOrder(symbol, type, side, amount, price, stopPrice, parameters);
        return new Order(res);
    }
    public async Task<Order> CreateStopLimitOrder(string symbol, string side, object amount, object price, object stopPrice, Dictionary<string, object> parameters = null)
    {
        var res = await this.createStopLimitOrder(symbol, side, amount, price, stopPrice, parameters);
        return new Order(res);
    }
    public async Task<Order> CreateStopMarketOrder(string symbol, string side, object amount, object stopPrice, Dictionary<string, object> parameters = null)
    {
        var res = await this.createStopMarketOrder(symbol, side, amount, stopPrice, parameters);
        return new Order(res);
    }
    public async Task<Dictionary<string, object>> FetchLastPrices(List<string> symbols = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchLastPrices(symbols, parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<Dictionary<string, object>> FetchTradingFees(Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchTradingFees(parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<Dictionary<string, object>> FetchTradingFee(string symbol, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchTradingFee(symbol, parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<FundingRate> FetchFundingRate(string symbol, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchFundingRate(symbol, parameters);
        return new FundingRate(res);
    }
    public async Task<List<OHLCV>> FetchMarkOHLCV(object symbol, string timeframe = "1m", Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchMarkOHLCV(symbol, timeframe, since, limit, parameters);
        return ((List<object>)res).Select(item => new OHLCV(item)).ToList<OHLCV>();
    }
    public async Task<List<OHLCV>> FetchIndexOHLCV(string symbol, string timeframe = "1m", Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchIndexOHLCV(symbol, timeframe, since, limit, parameters);
        return ((List<object>)res).Select(item => new OHLCV(item)).ToList<OHLCV>();
    }
    public async Task<List<OHLCV>> FetchPremiumIndexOHLCV(string symbol, string timeframe = "1m", Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchPremiumIndexOHLCV(symbol, timeframe, since, limit, parameters);
        return ((List<object>)res).Select(item => new OHLCV(item)).ToList<OHLCV>();
    }
}
// class wrappers
public class Ace : ace { }
public class Alpaca : alpaca { }
public class Ascendex : ascendex { }
public class Bequant : bequant { }
public class Bigone : bigone { }
public class Binance : binance { }
public class Binancecoinm : binancecoinm { }
public class Binanceus : binanceus { }
public class Binanceusdm : binanceusdm { }
public class Bit2c : bit2c { }
public class Bitbank : bitbank { }
public class Bitbay : bitbay { }
public class Bitbns : bitbns { }
public class Bitcoincom : bitcoincom { }
public class Bitfinex : bitfinex { }
public class Bitfinex2 : bitfinex2 { }
public class Bitflyer : bitflyer { }
public class Bitforex : bitforex { }
public class Bitget : bitget { }
public class Bithumb : bithumb { }
public class Bitmart : bitmart { }
public class Bitmex : bitmex { }
public class Bitopro : bitopro { }
public class Bitpanda : bitpanda { }
public class Bitrue : bitrue { }
public class Bitso : bitso { }
public class Bitstamp : bitstamp { }
public class Bitstamp1 : bitstamp1 { }
public class Bittrex : bittrex { }
public class Bitvavo : bitvavo { }
public class Bkex : bkex { }
public class Bl3p : bl3p { }
public class Blockchaincom : blockchaincom { }
public class Btcalpha : btcalpha { }
public class Btcbox : btcbox { }
public class Btcex : btcex { }
public class Btcmarkets : btcmarkets { }
public class Btctradeua : btctradeua { }
public class Btcturk : btcturk { }
public class Bybit : bybit { }
public class Cex : cex { }
public class Coinbase : coinbase { }
public class Coinbaseprime : coinbaseprime { }
public class Coinbasepro : coinbasepro { }
public class Coincheck : coincheck { }
public class Coinex : coinex { }
public class Coinfalcon : coinfalcon { }
public class Coinmate : coinmate { }
public class Coinone : coinone { }
public class Coinsph : coinsph { }
public class Coinspot : coinspot { }
public class Cryptocom : cryptocom { }
public class Currencycom : currencycom { }
public class Delta : delta { }
public class Deribit : deribit { }
public class Digifinex : digifinex { }
public class Exmo : exmo { }
public class Fmfwio : fmfwio { }
public class Gate : gate { }
public class Gateio : gateio { }
public class Gemini : gemini { }
public class Hitbtc : hitbtc { }
public class Hitbtc3 : hitbtc3 { }
public class Hollaex : hollaex { }
public class Huobi : huobi { }
public class Huobijp : huobijp { }
public class Huobipro : huobipro { }
public class Idex : idex { }
public class Independentreserve : independentreserve { }
public class Indodax : indodax { }
public class Kraken : kraken { }
public class Krakenfutures : krakenfutures { }
public class Kucoin : kucoin { }
public class Kucoinfutures : kucoinfutures { }
public class Kuna : kuna { }
public class Latoken : latoken { }
public class Lbank : lbank { }
public class Lbank2 : lbank2 { }
public class Luno : luno { }
public class Lykke : lykke { }
public class Mercado : mercado { }
public class Mexc : mexc { }
public class Mexc3 : mexc3 { }
public class Ndax : ndax { }
public class Novadax : novadax { }
public class Oceanex : oceanex { }
public class Okcoin : okcoin { }
public class Okex : okex { }
public class Okex5 : okex5 { }
public class Okx : okx { }
public class Paymium : paymium { }
public class Phemex : phemex { }
public class Poloniex : poloniex { }
public class Poloniexfutures : poloniexfutures { }
public class Probit : probit { }
public class Stex : stex { }
public class Tidex : tidex { }
public class Timex : timex { }
public class Tokocrypto : tokocrypto { }
public class Upbit : upbit { }
public class Wavesexchange : wavesexchange { }
public class Wazirx : wazirx { }
public class Whitebit : whitebit { }
public class Woo : woo { }
public class Xt : xt { }
public class Yobit : yobit { }
public class Zaif : zaif { }
public class Zonda : zonda { }