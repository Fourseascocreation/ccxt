namespace ccxt;
// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class binance
{
    public MarketInterface CreateExpiredOptionMarket(object symbol)
    {
        var res = this.createExpiredOptionMarket(symbol);
        return new MarketInterface(res);
    }
    public async Task<float> FetchTime(Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchTime(parameters);
        return ((float)res);
    }
    public async Task<List<object>> FetchMarkets(Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchMarkets(parameters);
        return ((List<object>)res).Select(item => new object(item)).ToList<object>();
    }
    public async Task<Balances> FetchBalance(Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchBalance(parameters);
        return new Balances(res);
    }
    public async Task<OrderBook> FetchOrderBook(string symbol, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchOrderBook(symbol, limit, parameters);
        return new OrderBook(res);
    }
    public async Task<Dictionary<string, object>> FetchStatus(Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchStatus(parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<Ticker> FetchTicker(string symbol, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchTicker(symbol, parameters);
        return new Ticker(res);
    }
    public async Task<Dictionary<string, Ticker>> FetchBidsAsks(Strings symbols = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchBidsAsks(symbols, parameters);
        return ((Dictionary<string, Ticker>)res);
    }
    public async Task<object> FetchLastPrices(Strings symbols = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchLastPrices(symbols, parameters);
        return ((object)res);
    }
    public async Task<Tickers> FetchTickers(Strings symbols = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchTickers(symbols, parameters);
        return new Tickers(res);
    }
    public async Task<List<OHLCV>> FetchOHLCV(string symbol, string timeframe = "1m", Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchOHLCV(symbol, timeframe, since, limit, parameters);
        return ((List<object>)res).Select(item => new OHLCV(item)).ToList<OHLCV>();
    }
    public async Task<List<Trade>> FetchTrades(string symbol, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchTrades(symbol, since, limit, parameters);
        return ((List<object>)res).Select(item => new Trade(item)).ToList<Trade>();
    }
    public async Task<Order> EditSpotOrder(string id, object symbol, object type, object side, object amount, object price = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.editSpotOrder(id, symbol, type, side, amount, price, parameters);
        return new Order(res);
    }
    public object EditSpotOrderRequest(string id, object symbol, object type, object side, object amount, object price = null, Dictionary<string, object> parameters = null)
    {
        var res = this.editSpotOrderRequest(id, symbol, type, side, amount, price, parameters);
        return ((object)res);
    }
    public async Task<Order> EditContractOrder(string id, object symbol, object type, object side, object amount, object price = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.editContractOrder(id, symbol, type, side, amount, price, parameters);
        return new Order(res);
    }
    public async Task<Order> EditOrder(string id, object symbol, object type, object side, object amount = null, object price = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.editOrder(id, symbol, type, side, amount, price, parameters);
        return new Order(res);
    }
    public async Task<List<Order>> CreateOrders(List<OrderRequest> orders, Dictionary<string, object> parameters = null)
    {
        var res = await this.createOrders(orders, parameters);
        return ((List<object>)res).Select(item => new Order(item)).ToList<Order>();
    }
    public async Task<Order> CreateOrder(string symbol, string type, string side, object amount, object price = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.createOrder(symbol, type, side, amount, price, parameters);
        return new Order(res);
    }
    public object CreateOrderRequest(string symbol, string type, string side, object amount, object price = null, Dictionary<string, object> parameters = null)
    {
        var res = this.createOrderRequest(symbol, type, side, amount, price, parameters);
        return ((object)res);
    }
    public async Task<Order> FetchOrder(string id, Str symbol = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchOrder(id, symbol, parameters);
        return new Order(res);
    }
    public async Task<List<Order>> FetchOrders(Str symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchOrders(symbol, since, limit, parameters);
        return ((List<object>)res).Select(item => new Order(item)).ToList<Order>();
    }
    public async Task<List<Order>> FetchOpenOrders(Str symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchOpenOrders(symbol, since, limit, parameters);
        return ((List<object>)res).Select(item => new Order(item)).ToList<Order>();
    }
    public async Task<List<Order>> FetchClosedOrders(Str symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchClosedOrders(symbol, since, limit, parameters);
        return ((List<object>)res).Select(item => new Order(item)).ToList<Order>();
    }
    public async Task<object> FetchCanceledOrders(Str symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchCanceledOrders(symbol, since, limit, parameters);
        return ((object)res);
    }
    public async Task<Order> CancelOrder(string id, Str symbol = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.cancelOrder(id, symbol, parameters);
        return new Order(res);
    }
    public async Task<object> CancelAllOrders(Str symbol = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.cancelAllOrders(symbol, parameters);
        return ((object)res);
    }
    public async Task<List<Order>> CancelOrders(List<float> ids, Str symbol = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.cancelOrders(ids, symbol, parameters);
        return ((List<object>)res).Select(item => new Order(item)).ToList<Order>();
    }
    public async Task<List<Trade>> FetchOrderTrades(string id, Str symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchOrderTrades(id, symbol, since, limit, parameters);
        return ((List<object>)res).Select(item => new Trade(item)).ToList<Trade>();
    }
    public async Task<List<Trade>> FetchMyTrades(Str symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchMyTrades(symbol, since, limit, parameters);
        return ((List<object>)res).Select(item => new Trade(item)).ToList<Trade>();
    }
    public async Task<object> FetchMyDustTrades(Str symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchMyDustTrades(symbol, since, limit, parameters);
        return ((object)res);
    }
    public async Task<List<Transaction>> FetchDeposits(Str code = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchDeposits(code, since, limit, parameters);
        return ((List<object>)res).Select(item => new Transaction(item)).ToList<Transaction>();
    }
    public async Task<List<Transaction>> FetchWithdrawals(Str code = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchWithdrawals(code, since, limit, parameters);
        return ((List<object>)res).Select(item => new Transaction(item)).ToList<Transaction>();
    }
    public async Task<TransferEntry> Transfer(string code, object amount, object fromAccount, object toAccount, Dictionary<string, object> parameters = null)
    {
        var res = await this.transfer(code, amount, fromAccount, toAccount, parameters);
        return new TransferEntry(res);
    }
    public async Task<object> FetchTransfers(Str code = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchTransfers(code, since, limit, parameters);
        return ((object)res);
    }
    public async Task<Dictionary<string, object>> FetchDepositAddress(string code, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchDepositAddress(code, parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<Dictionary<string, object>> FetchTransactionFees(object codes = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchTransactionFees(codes, parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<object> FetchDepositWithdrawFees(Strings codes = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchDepositWithdrawFees(codes, parameters);
        return ((object)res);
    }
    public async Task<Transaction> Withdraw(string code, object amount, object address, object tag = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.withdraw(code, amount, address, tag, parameters);
        return new Transaction(res);
    }
    public async Task<Dictionary<string, object>> FetchTradingFee(string symbol, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchTradingFee(symbol, parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<Dictionary<string, object>> FetchTradingFees(Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchTradingFees(parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<Dictionary<string, object>> FetchFundingRate(string symbol, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchFundingRate(symbol, parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<List<FundingRateHistory>> FetchFundingRateHistory(Str symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchFundingRateHistory(symbol, since, limit, parameters);
        return ((List<object>)res).Select(item => new FundingRateHistory(item)).ToList<FundingRateHistory>();
    }
    public async Task<object> FetchFundingRates(Strings symbols = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchFundingRates(symbols, parameters);
        return ((object)res);
    }
    public async Task<Dictionary<string, object>> FetchLeverageTiers(Strings symbols = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchLeverageTiers(symbols, parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<Position> FetchPosition(string symbol, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchPosition(symbol, parameters);
        return new Position(res);
    }
    public async Task<List<Position>> FetchOptionPositions(Strings symbols = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchOptionPositions(symbols, parameters);
        return ((List<object>)res).Select(item => new Position(item)).ToList<Position>();
    }
    public async Task<List<Position>> FetchPositions(Strings symbols = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchPositions(symbols, parameters);
        return ((List<object>)res).Select(item => new Position(item)).ToList<Position>();
    }
    public async Task<List<Position>> FetchAccountPositions(Strings symbols = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchAccountPositions(symbols, parameters);
        return ((List<object>)res).Select(item => new Position(item)).ToList<Position>();
    }
    public async Task<List<Position>> FetchPositionsRisk(Strings symbols = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchPositionsRisk(symbols, parameters);
        return ((List<object>)res).Select(item => new Position(item)).ToList<Position>();
    }
    public async Task<List<FundingHistory>> FetchFundingHistory(Str symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchFundingHistory(symbol, since, limit, parameters);
        return ((List<object>)res).Select(item => new FundingHistory(item)).ToList<FundingHistory>();
    }
    public async Task<object> SetLeverage(object leverage, Str symbol = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.setLeverage(leverage, symbol, parameters);
        return ((object)res);
    }
    public async Task<object> SetMarginMode(string marginMode, Str symbol = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.setMarginMode(marginMode, symbol, parameters);
        return ((object)res);
    }
    public async Task<object> SetPositionMode(object hedged, Str symbol = null, Dictionary<string, object> parameters = null)
    {
        var res = await this.setPositionMode(hedged, symbol, parameters);
        return ((object)res);
    }
    public async Task<object> FetchSettlementHistory(Str symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchSettlementHistory(symbol, since, limit, parameters);
        return ((object)res);
    }
    public async Task<object> FetchMySettlementHistory(Str symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchMySettlementHistory(symbol, since, limit, parameters);
        return ((object)res);
    }
    public async Task<object> FetchLedger(Str code = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchLedger(code, since, limit, parameters);
        return ((object)res);
    }
    public async Task<Dictionary<string, object>> FetchCrossBorrowRate(string code, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchCrossBorrowRate(code, parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<object> FetchBorrowRateHistory(string code, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchBorrowRateHistory(code, since, limit, parameters);
        return ((object)res);
    }
    public async Task<Dictionary<string, object>> CreateGiftCode(string code, object amount, Dictionary<string, object> parameters = null)
    {
        var res = await this.createGiftCode(code, amount, parameters);
        return ((Dictionary<string, object>)res);
    }
    public async Task<object> FetchBorrowInterest(Str code = null, Str symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchBorrowInterest(code, symbol, since, limit, parameters);
        return ((object)res);
    }
    public async Task<List<OpenInterest>> FetchOpenInterestHistory(string symbol, string timeframe = "5m", Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchOpenInterestHistory(symbol, timeframe, since, limit, parameters);
        return ((List<object>)res).Select(item => new OpenInterest(item)).ToList<OpenInterest>();
    }
    public async Task<OpenInterest> FetchOpenInterest(string symbol, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchOpenInterest(symbol, parameters);
        return new OpenInterest(res);
    }
    public async Task<List<Liquidation>> FetchMyLiquidations(Str symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)
    {
        var since = since2 == 0 ? null : (object)since2;
        var limit = limit2 == 0 ? null : (object)limit2;
        var res = await this.fetchMyLiquidations(symbol, since, limit, parameters);
        return ((List<object>)res).Select(item => new Liquidation(item)).ToList<Liquidation>();
    }
    public async Task<Greeks> FetchGreeks(string symbol, Dictionary<string, object> parameters = null)
    {
        var res = await this.fetchGreeks(symbol, parameters);
        return new Greeks(res);
    }
}
