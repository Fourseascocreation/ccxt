using Main;
namespace Main;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

partial class coinbase : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "coinbase" },
            { "name", "Coinbase" },
            { "countries", new List<object>() {"US"} },
            { "rateLimit", 400 },
            { "version", "v2" },
            { "userAgent", getValue(this.userAgents, "chrome") },
            { "headers", new Dictionary<string, object>() {
                { "CB-VERSION", "2018-05-30" },
            } },
            { "has", new Dictionary<string, object>() {
                { "CORS", true },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelOrder", true },
                { "cancelOrders", true },
                { "createDepositAddress", true },
                { "createLimitBuyOrder", true },
                { "createLimitSellOrder", true },
                { "createMarketBuyOrder", true },
                { "createMarketSellOrder", true },
                { "createOrder", true },
                { "createPostOnlyOrder", true },
                { "createReduceOnlyOrder", false },
                { "createStopLimitOrder", true },
                { "createStopMarketOrder", false },
                { "createStopOrder", true },
                { "fetchAccounts", true },
                { "fetchBalance", true },
                { "fetchBorrowRate", false },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchBorrowRates", false },
                { "fetchBorrowRatesPerSymbol", false },
                { "fetchCanceledOrders", true },
                { "fetchClosedOrders", true },
                { "fetchCurrencies", true },
                { "fetchDeposits", true },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchL2OrderBook", false },
                { "fetchLedger", true },
                { "fetchLeverage", false },
                { "fetchLeverageTiers", false },
                { "fetchMarginMode", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyBuys", true },
                { "fetchMySells", true },
                { "fetchMyTrades", true },
                { "fetchOHLCV", true },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", false },
                { "fetchOrders", true },
                { "fetchPosition", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTime", true },
                { "fetchTrades", true },
                { "fetchTradingFee", false },
                { "fetchTradingFees", false },
                { "fetchWithdrawals", true },
                { "reduceMargin", false },
                { "setLeverage", false },
                { "setMarginMode", false },
                { "setPositionMode", false },
                { "withdraw", null },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/1294454/40811661-b6eceae2-653a-11e8-829e-10bfadb078cf.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "rest", "https://api.coinbase.com" },
                } },
                { "www", "https://www.coinbase.com" },
                { "doc", new List<object>() {"https://developers.coinbase.com/api/v2", "https://docs.cloud.coinbase.com/advanced-trade-api/docs/welcome"} },
                { "fees", new List<object>() {"https://support.coinbase.com/customer/portal/articles/2109597-buy-sell-bank-transfer-fees", "https://www.coinbase.com/advanced-fees"} },
                { "referral", "https://www.coinbase.com/join/58cbe25a355148797479dbd2" },
            } },
            { "requiredCredentials", new Dictionary<string, object>() {
                { "apiKey", true },
                { "secret", true },
            } },
            { "api", new Dictionary<string, object>() {
                { "v2", new Dictionary<string, object>() {
                    { "public", new Dictionary<string, object>() {
                        { "get", new List<object>() {"currencies", "time", "exchange-rates", "users/{user_id}", "prices/{symbol}/buy", "prices/{symbol}/sell", "prices/{symbol}/spot"} },
                    } },
                    { "private", new Dictionary<string, object>() {
                        { "get", new List<object>() {"accounts", "accounts/{account_id}", "accounts/{account_id}/addresses", "accounts/{account_id}/addresses/{address_id}", "accounts/{account_id}/addresses/{address_id}/transactions", "accounts/{account_id}/transactions", "accounts/{account_id}/transactions/{transaction_id}", "accounts/{account_id}/buys", "accounts/{account_id}/buys/{buy_id}", "accounts/{account_id}/sells", "accounts/{account_id}/sells/{sell_id}", "accounts/{account_id}/deposits", "accounts/{account_id}/deposits/{deposit_id}", "accounts/{account_id}/withdrawals", "accounts/{account_id}/withdrawals/{withdrawal_id}", "payment-methods", "payment-methods/{payment_method_id}", "user", "user/auth"} },
                        { "post", new List<object>() {"accounts", "accounts/{account_id}/primary", "accounts/{account_id}/addresses", "accounts/{account_id}/transactions", "accounts/{account_id}/transactions/{transaction_id}/complete", "accounts/{account_id}/transactions/{transaction_id}/resend", "accounts/{account_id}/buys", "accounts/{account_id}/buys/{buy_id}/commit", "accounts/{account_id}/sells", "accounts/{account_id}/sells/{sell_id}/commit", "accounts/{account_id}/deposits", "accounts/{account_id}/deposits/{deposit_id}/commit", "accounts/{account_id}/withdrawals", "accounts/{account_id}/withdrawals/{withdrawal_id}/commit"} },
                        { "put", new List<object>() {"accounts/{account_id}", "user"} },
                        { "delete", new List<object>() {"accounts/{id}", "accounts/{account_id}/transactions/{transaction_id}"} },
                    } },
                } },
                { "v3", new Dictionary<string, object>() {
                    { "private", new Dictionary<string, object>() {
                        { "get", new List<object>() {"brokerage/accounts", "brokerage/accounts/{account_uuid}", "brokerage/orders/historical/batch", "brokerage/orders/historical/fills", "brokerage/orders/historical/{order_id}", "brokerage/products", "brokerage/products/{product_id}", "brokerage/products/{product_id}/candles", "brokerage/products/{product_id}/ticker", "brokerage/transaction_summary"} },
                        { "post", new List<object>() {"brokerage/orders", "brokerage/orders/batch_cancel"} },
                    } },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "taker", this.parseNumber("0.006") },
                    { "maker", this.parseNumber("0.004") },
                    { "tierBased", true },
                    { "percentage", true },
                    { "tiers", new Dictionary<string, object>() {
                        { "taker", new List<object>() {new List<object> {this.parseNumber("0"), this.parseNumber("0.006")}, new List<object> {this.parseNumber("10000"), this.parseNumber("0.004")}, new List<object> {this.parseNumber("50000"), this.parseNumber("0.0025")}, new List<object> {this.parseNumber("100000"), this.parseNumber("0.002")}, new List<object> {this.parseNumber("1000000"), this.parseNumber("0.0018")}, new List<object> {this.parseNumber("15000000"), this.parseNumber("0.0016")}, new List<object> {this.parseNumber("75000000"), this.parseNumber("0.0012")}, new List<object> {this.parseNumber("250000000"), this.parseNumber("0.0008")}, new List<object> {this.parseNumber("400000000"), this.parseNumber("0.0005")}} },
                        { "maker", new List<object>() {new List<object> {this.parseNumber("0"), this.parseNumber("0.004")}, new List<object> {this.parseNumber("10000"), this.parseNumber("0.0025")}, new List<object> {this.parseNumber("50000"), this.parseNumber("0.0015")}, new List<object> {this.parseNumber("100000"), this.parseNumber("0.001")}, new List<object> {this.parseNumber("1000000"), this.parseNumber("0.0008")}, new List<object> {this.parseNumber("15000000"), this.parseNumber("0.0006")}, new List<object> {this.parseNumber("75000000"), this.parseNumber("0.0003")}, new List<object> {this.parseNumber("250000000"), this.parseNumber("0.0")}, new List<object> {this.parseNumber("400000000"), this.parseNumber("0.0")}} },
                    } },
                } },
            } },
            { "precisionMode", TICK_SIZE },
            { "exceptions", new Dictionary<string, object>() {
                { "exact", new Dictionary<string, object>() {
                    { "two_factor_required", typeof(AuthenticationError) },
                    { "param_required", typeof(ExchangeError) },
                    { "validation_error", typeof(ExchangeError) },
                    { "invalid_request", typeof(ExchangeError) },
                    { "personal_details_required", typeof(AuthenticationError) },
                    { "identity_verification_required", typeof(AuthenticationError) },
                    { "jumio_verification_required", typeof(AuthenticationError) },
                    { "jumio_face_match_verification_required", typeof(AuthenticationError) },
                    { "unverified_email", typeof(AuthenticationError) },
                    { "authentication_error", typeof(AuthenticationError) },
                    { "invalid_authentication_method", typeof(AuthenticationError) },
                    { "invalid_token", typeof(AuthenticationError) },
                    { "revoked_token", typeof(AuthenticationError) },
                    { "expired_token", typeof(AuthenticationError) },
                    { "invalid_scope", typeof(AuthenticationError) },
                    { "not_found", typeof(ExchangeError) },
                    { "rate_limit_exceeded", typeof(RateLimitExceeded) },
                    { "internal_server_error", typeof(ExchangeError) },
                } },
                { "broad", new Dictionary<string, object>() {
                    { "request timestamp expired", typeof(InvalidNonce) },
                    { "order with this orderID was not found", typeof(OrderNotFound) },
                } },
            } },
            { "timeframes", new Dictionary<string, object>() {
                { "1m", "ONE_MINUTE" },
                { "5m", "FIVE_MINUTE" },
                { "15m", "FIFTEEN_MINUTE" },
                { "30m", "THIRTY_MINUTE" },
                { "1h", "ONE_HOUR" },
                { "2h", "TWO_HOUR" },
                { "6h", "SIX_HOUR" },
                { "1d", "ONE_DAY" },
            } },
            { "commonCurrencies", new Dictionary<string, object>() {
                { "CGLD", "CELO" },
            } },
            { "options", new Dictionary<string, object>() {
                { "stablePairs", new List<object>() {"BUSD-USD", "CBETH-ETH", "DAI-USD", "GUSD-USD", "GYEN-USD", "PAX-USD", "PAX-USDT", "USDC-EUR", "USDC-GBP", "USDT-EUR", "USDT-GBP", "USDT-USD", "USDT-USDC", "WBTC-BTC"} },
                { "fetchCurrencies", new Dictionary<string, object>() {
                    { "expires", 5000 },
                } },
                { "accounts", new List<object>() {"wallet", "fiat"} },
                { "createMarketBuyOrderRequiresPrice", true },
                { "advanced", true },
                { "fetchMarkets", "fetchMarketsV3" },
                { "fetchTicker", "fetchTickerV3" },
                { "fetchTickers", "fetchTickersV3" },
                { "fetchAccounts", "fetchAccountsV3" },
            } },
        });
    }

    public async override Task<object> fetchTime(object parameters = null)
    {
        /**
        * @method
        * @name coinbase#fetchTime
        * @description fetches the current integer timestamp in milliseconds from the exchange server
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {int} the current integer timestamp in milliseconds from the exchange server
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.v2PublicGetTime(parameters);
        //
        //     {
        //         "data": {
        //             "epoch": 1589295679,
        //             "iso": "2020-05-12T15:01:19Z"
        //         }
        //     }
        //
        object data = this.safeValue(response, "data", new Dictionary<string, object>() {});
        return this.safeTimestamp(data, "epoch");
    }

    public async override Task<object> fetchAccounts(object parameters = null)
    {
        /**
        * @method
        * @name coinbase#fetchAccounts
        * @description fetch all the accounts associated with a profile
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {object} a dictionary of [account structures]{@link https://docs.ccxt.com/#/?id=account-structure} indexed by the account type
        */
        parameters ??= new Dictionary<string, object>();
        object method = this.safeString(this.options, "fetchAccounts", "fetchAccountsV3");
        if (isTrue(isEqual(method, "fetchAccountsV3")))
        {
            return await this.fetchAccountsV3(parameters);
        }
        return await this.fetchAccountsV2(parameters);
    }

    public async virtual Task<object> fetchAccountsV2(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "limit", 100 },
        };
        object response = await this.v2PrivateGetAccounts(this.extend(request, parameters));
        //
        //     {
        //         "pagination": {
        //             "ending_before": null,
        //             "starting_after": null,
        //             "previous_ending_before": null,
        //             "next_starting_after": null,
        //             "limit": 244,
        //             "order": "desc",
        //             "previous_uri": null,
        //             "next_uri": null
        //         },
        //         "data": [
        //             {
        //                 "id": "XLM",
        //                 "name": "XLM Wallet",
        //                 "primary": false,
        //                 "type": "wallet",
        //                 "currency": {
        //                     "code": "XLM",
        //                     "name": "Stellar Lumens",
        //                     "color": "#000000",
        //                     "sort_index": 127,
        //                     "exponent": 7,
        //                     "type": "crypto",
        //                     "address_regex": "^G[A-Z2-7]{55}$",
        //                     "asset_id": "13b83335-5ede-595b-821e-5bcdfa80560f",
        //                     "destination_tag_name": "XLM Memo ID",
        //                     "destination_tag_regex": "^[ -~]{1,28}$"
        //                 },
        //                 "balance": {
        //                     "amount": "0.0000000",
        //                     "currency": "XLM"
        //                 },
        //                 "created_at": null,
        //                 "updated_at": null,
        //                 "resource": "account",
        //                 "resource_path": "/v2/accounts/XLM",
        //                 "allow_deposits": true,
        //                 "allow_withdrawals": true
        //             },
        //         ]
        //     }
        //
        object data = this.safeValue(response, "data", new List<object>() {});
        return this.parseAccounts(data, parameters);
    }

    public async virtual Task<object> fetchAccountsV3(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "limit", 100 },
        };
        object response = await this.v3PrivateGetBrokerageAccounts(this.extend(request, parameters));
        //
        //     {
        //         "accounts": [
        //             {
        //                 "uuid": "11111111-1111-1111-1111-111111111111",
        //                 "name": "USDC Wallet",
        //                 "currency": "USDC",
        //                 "available_balance": {
        //                     "value": "0.0000000000000000",
        //                     "currency": "USDC"
        //                 },
        //                 "default": true,
        //                 "active": true,
        //                 "created_at": "2023-01-04T06:20:06.456Z",
        //                 "updated_at": "2023-01-04T06:20:07.181Z",
        //                 "deleted_at": null,
        //                 "type": "ACCOUNT_TYPE_CRYPTO",
        //                 "ready": false,
        //                 "hold": {
        //                     "value": "0.0000000000000000",
        //                     "currency": "USDC"
        //                 }
        //             },
        //             ...
        //         ],
        //         "has_next": false,
        //         "cursor": "",
        //         "size": 9
        //     }
        //
        object data = this.safeValue(response, "accounts", new List<object>() {});
        return this.parseAccounts(data, parameters);
    }

    public override object parseAccount(object account)
    {
        //
        // fetchAccountsV2
        //
        //     {
        //         "id": "XLM",
        //         "name": "XLM Wallet",
        //         "primary": false,
        //         "type": "wallet",
        //         "currency": {
        //             "code": "XLM",
        //             "name": "Stellar Lumens",
        //             "color": "#000000",
        //             "sort_index": 127,
        //             "exponent": 7,
        //             "type": "crypto",
        //             "address_regex": "^G[A-Z2-7]{55}$",
        //             "asset_id": "13b83335-5ede-595b-821e-5bcdfa80560f",
        //             "destination_tag_name": "XLM Memo ID",
        //             "destination_tag_regex": "^[ -~]{1,28}$"
        //         },
        //         "balance": {
        //             "amount": "0.0000000",
        //             "currency": "XLM"
        //         },
        //         "created_at": null,
        //         "updated_at": null,
        //         "resource": "account",
        //         "resource_path": "/v2/accounts/XLM",
        //         "allow_deposits": true,
        //         "allow_withdrawals": true
        //     }
        //
        // fetchAccountsV3
        //
        //     {
        //         "uuid": "11111111-1111-1111-1111-111111111111",
        //         "name": "USDC Wallet",
        //         "currency": "USDC",
        //         "available_balance": {
        //             "value": "0.0000000000000000",
        //             "currency": "USDC"
        //         },
        //         "default": true,
        //         "active": true,
        //         "created_at": "2023-01-04T06:20:06.456Z",
        //         "updated_at": "2023-01-04T06:20:07.181Z",
        //         "deleted_at": null,
        //         "type": "ACCOUNT_TYPE_CRYPTO",
        //         "ready": false,
        //         "hold": {
        //             "value": "0.0000000000000000",
        //             "currency": "USDC"
        //         }
        //     }
        //
        object active = this.safeValue(account, "active");
        object currencyIdV3 = this.safeString(account, "currency");
        object currency = this.safeValue(account, "currency", new Dictionary<string, object>() {});
        object currencyId = this.safeString(currency, "code", currencyIdV3);
        object typeV3 = this.safeString(account, "name");
        object typeV2 = this.safeString(account, "type");
        object parts = ((string)typeV3).Split((string)" ").ToList<object>();
        return new Dictionary<string, object>() {
            { "id", this.safeString2(account, "id", "uuid") },
            { "type", ((bool) isTrue((!isEqual(active, null)))) ? this.safeStringLower(parts, 1) : typeV2 },
            { "code", this.safeCurrencyCode(currencyId) },
            { "info", account },
        };
    }

    public async override Task<object> createDepositAddress(object code, object parameters = null)
    {
        /**
        * @method
        * @name coinbase#createDepositAddress
        * @description create a currency deposit address
        * @param {string} code unified currency code of the currency for the deposit address
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object accountId = this.safeString(parameters, "account_id");
        parameters = this.omit(parameters, "account_id");
        if (isTrue(isEqual(accountId, null)))
        {
            await this.loadAccounts();
            for (object i = 0; isLessThan(i, getArrayLength(this.accounts)); postFixIncrement(ref i))
            {
                object account = getValue(this.accounts, i);
                if (isTrue(isTrue(isEqual(getValue(account, "code"), code)) && isTrue(isEqual(getValue(account, "type"), "wallet"))))
                {
                    accountId = getValue(account, "id");
                    break;
                }
            }
        }
        if (isTrue(isEqual(accountId, null)))
        {
            throw new ExchangeError ((string)add(this.id, " createDepositAddress() could not find the account with matching currency code, specify an `account_id` extra param")) ;
        }
        object request = new Dictionary<string, object>() {
            { "account_id", accountId },
        };
        object response = await this.v2PrivatePostAccountsAccountIdAddresses(this.extend(request, parameters));
        //
        //     {
        //         "data": {
        //             "id": "05b1ebbf-9438-5dd4-b297-2ddedc98d0e4",
        //             "address": "coinbasebase",
        //             "address_info": {
        //                 "address": "coinbasebase",
        //                 "destination_tag": "287594668"
        //             },
        //             "name": null,
        //             "created_at": "2019-07-01T14:39:29Z",
        //             "updated_at": "2019-07-01T14:39:29Z",
        //             "network": "eosio",
        //             "uri_scheme": "eosio",
        //             "resource": "address",
        //             "resource_path": "/v2/accounts/14cfc769-e852-52f3-b831-711c104d194c/addresses/05b1ebbf-9438-5dd4-b297-2ddedc98d0e4",
        //             "warnings": [
        //                 {
        //                     "title": "Only send EOS (EOS) to this address",
        //                     "details": "Sending any other cryptocurrency will result in permanent loss.",
        //                     "image_url": "https://dynamic-assets.coinbase.com/deaca3d47b10ed4a91a872e9618706eec34081127762d88f2476ac8e99ada4b48525a9565cf2206d18c04053f278f693434af4d4629ca084a9d01b7a286a7e26/asset_icons/1f8489bb280fb0a0fd643c1161312ba49655040e9aaaced5f9ad3eeaf868eadc.png"
        //                 },
        //                 {
        //                     "title": "Both an address and EOS memo are required to receive EOS",
        //                     "details": "If you send funds without an EOS memo or with an incorrect EOS memo, your funds cannot be credited to your account.",
        //                     "image_url": "https://www.coinbase.com/assets/receive-warning-2f3269d83547a7748fb39d6e0c1c393aee26669bfea6b9f12718094a1abff155.png"
        //                 }
        //             ],
        //             "warning_title": "Only send EOS (EOS) to this address",
        //             "warning_details": "Sending any other cryptocurrency will result in permanent loss.",
        //             "destination_tag": "287594668",
        //             "deposit_uri": "eosio:coinbasebase?dt=287594668",
        //             "callback_url": null
        //         }
        //     }
        //
        object data = this.safeValue(response, "data", new Dictionary<string, object>() {});
        object tag = this.safeString(data, "destination_tag");
        object address = this.safeString(data, "address");
        return new Dictionary<string, object>() {
            { "currency", code },
            { "tag", tag },
            { "address", address },
            { "info", response },
        };
    }

    public async virtual Task<object> fetchMySells(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbase#fetchMySells
        * @description fetch sells
        * @param {string|undefined} symbol not used by coinbase fetchMySells ()
        * @param {int|undefined} since timestamp in ms of the earliest sell, default is undefined
        * @param {int|undefined} limit max number of sells to return, default is undefined
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {object} a [list of order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        // v2 did't have an endpoint for all historical trades
        parameters ??= new Dictionary<string, object>();
        object request = this.prepareAccountRequest(limit, parameters);
        await this.loadMarkets();
        object query = this.omit(parameters, new List<object>() {"account_id", "accountId"});
        object sells = await this.v2PrivateGetAccountsAccountIdSells(this.extend(request, query));
        return this.parseTrades(getValue(sells, "data"), null, since, limit);
    }

    public async virtual Task<object> fetchMyBuys(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbase#fetchMyBuys
        * @description fetch buys
        * @param {string|undefined} symbol not used by coinbase fetchMyBuys ()
        * @param {int|undefined} since timestamp in ms of the earliest buy, default is undefined
        * @param {int|undefined} limit max number of buys to return, default is undefined
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {object} a list of  [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        // v2 did't have an endpoint for all historical trades
        parameters ??= new Dictionary<string, object>();
        object request = this.prepareAccountRequest(limit, parameters);
        await this.loadMarkets();
        object query = this.omit(parameters, new List<object>() {"account_id", "accountId"});
        object buys = await this.v2PrivateGetAccountsAccountIdBuys(this.extend(request, query));
        return this.parseTrades(getValue(buys, "data"), null, since, limit);
    }

    public async virtual Task<object> fetchTransactionsWithMethod(object method, object code = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object request = await this.prepareAccountRequestWithCurrencyCode(code, limit, parameters);
        await this.loadMarkets();
        object query = this.omit(parameters, new List<object>() {"account_id", "accountId"});
        object response = await this.callAsync(method, this.extend(request, query));
        return this.parseTransactions(getValue(response, "data"), null, since, limit);
    }

    public async override Task<object> fetchWithdrawals(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbase#fetchWithdrawals
        * @description fetch all withdrawals made from an account
        * @param {string|undefined} code unified currency code
        * @param {int|undefined} since the earliest time in ms to fetch withdrawals for
        * @param {int|undefined} limit the maximum number of withdrawals structures to retrieve
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        // fiat only, for crypto transactions use fetchLedger
        parameters ??= new Dictionary<string, object>();
        return await this.fetchTransactionsWithMethod("v2PrivateGetAccountsAccountIdWithdrawals", code, since, limit, parameters);
    }

    public async override Task<object> fetchDeposits(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbase#fetchDeposits
        * @description fetch all deposits made to an account
        * @param {string|undefined} code unified currency code
        * @param {int|undefined} since the earliest time in ms to fetch deposits for
        * @param {int|undefined} limit the maximum number of deposits structures to retrieve
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        // fiat only, for crypto transactions use fetchLedger
        parameters ??= new Dictionary<string, object>();
        return await this.fetchTransactionsWithMethod("v2PrivateGetAccountsAccountIdDeposits", code, since, limit, parameters);
    }

    public virtual object parseTransactionStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "created", "pending" },
            { "completed", "ok" },
            { "canceled", "canceled" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseTransaction(object transaction, object market = null)
    {
        //
        // fiat deposit
        //
        //     {
        //         "id": "f34c19f3-b730-5e3d-9f72",
        //         "status": "completed",
        //         "payment_method": {
        //             "id": "a022b31d-f9c7-5043-98f2",
        //             "resource": "payment_method",
        //             "resource_path": "/v2/payment-methods/a022b31d-f9c7-5043-98f2"
        //         },
        //         "transaction": {
        //             "id": "04ed4113-3732-5b0c-af86-b1d2146977d0",
        //             "resource": "transaction",
        //             "resource_path": "/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/transactions/04ed4113-3732-5b0c-af86"
        //         },
        //         "user_reference": "2VTYTH",
        //         "created_at": "2017-02-09T07:01:18Z",
        //         "updated_at": "2017-02-09T07:01:26Z",
        //         "resource": "deposit",
        //         "resource_path": "/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/deposits/f34c19f3-b730-5e3d-9f72",
        //         "committed": true,
        //         "payout_at": "2017-02-12T07:01:17Z",
        //         "instant": false,
        //         "fee": { "amount": "0.00", "currency": "EUR" },
        //         "amount": { "amount": "114.02", "currency": "EUR" },
        //         "subtotal": { "amount": "114.02", "currency": "EUR" },
        //         "hold_until": null,
        //         "hold_days": 0,
        //         "hold_business_days": 0,
        //         "next_step": null
        //     }
        //
        // fiat_withdrawal
        //
        //     {
        //         "id": "cfcc3b4a-eeb6-5e8c-8058",
        //         "status": "completed",
        //         "payment_method": {
        //             "id": "8b94cfa4-f7fd-5a12-a76a",
        //             "resource": "payment_method",
        //             "resource_path": "/v2/payment-methods/8b94cfa4-f7fd-5a12-a76a"
        //         },
        //         "transaction": {
        //             "id": "fcc2550b-5104-5f83-a444",
        //             "resource": "transaction",
        //             "resource_path": "/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/transactions/fcc2550b-5104-5f83-a444"
        //         },
        //         "user_reference": "MEUGK",
        //         "created_at": "2018-07-26T08:55:12Z",
        //         "updated_at": "2018-07-26T08:58:18Z",
        //         "resource": "withdrawal",
        //         "resource_path": "/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/withdrawals/cfcc3b4a-eeb6-5e8c-8058",
        //         "committed": true,
        //         "payout_at": "2018-07-31T08:55:12Z",
        //         "instant": false,
        //         "fee": { "amount": "0.15", "currency": "EUR" },
        //         "amount": { "amount": "13130.69", "currency": "EUR" },
        //         "subtotal": { "amount": "13130.84", "currency": "EUR" },
        //         "idem": "e549dee5-63ed-4e79-8a96",
        //         "next_step": null
        //     }
        //
        object subtotalObject = this.safeValue(transaction, "subtotal", new Dictionary<string, object>() {});
        object feeObject = this.safeValue(transaction, "fee", new Dictionary<string, object>() {});
        object id = this.safeString(transaction, "id");
        object timestamp = this.parse8601(this.safeValue(transaction, "created_at"));
        object updated = this.parse8601(this.safeValue(transaction, "updated_at"));
        object type = this.safeString(transaction, "resource");
        object amount = this.safeNumber(subtotalObject, "amount");
        object currencyId = this.safeString(subtotalObject, "currency");
        object currency = this.safeCurrencyCode(currencyId);
        object feeCost = this.safeNumber(feeObject, "amount");
        object feeCurrencyId = this.safeString(feeObject, "currency");
        object feeCurrency = this.safeCurrencyCode(feeCurrencyId);
        object fee = new Dictionary<string, object>() {
            { "cost", feeCost },
            { "currency", feeCurrency },
        };
        object status = this.parseTransactionStatus(this.safeString(transaction, "status"));
        if (isTrue(isEqual(status, null)))
        {
            object committed = this.safeValue(transaction, "committed");
            status = ((bool) isTrue(committed)) ? "ok" : "pending";
        }
        return new Dictionary<string, object>() {
            { "info", transaction },
            { "id", id },
            { "txid", id },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "network", null },
            { "address", null },
            { "addressTo", null },
            { "addressFrom", null },
            { "tag", null },
            { "tagTo", null },
            { "tagFrom", null },
            { "type", type },
            { "amount", amount },
            { "currency", currency },
            { "status", status },
            { "updated", updated },
            { "fee", fee },
        };
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // fetchMyBuys, fetchMySells
        //
        //     {
        //         "id": "67e0eaec-07d7-54c4-a72c-2e92826897df",
        //         "status": "completed",
        //         "payment_method": {
        //             "id": "83562370-3e5c-51db-87da-752af5ab9559",
        //             "resource": "payment_method",
        //             "resource_path": "/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
        //         },
        //         "transaction": {
        //             "id": "441b9494-b3f0-5b98-b9b0-4d82c21c252a",
        //             "resource": "transaction",
        //             "resource_path": "/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a"
        //         },
        //         "amount": { "amount": "1.00000000", "currency": "BTC" },
        //         "total": { "amount": "10.25", "currency": "USD" },
        //         "subtotal": { "amount": "10.10", "currency": "USD" },
        //         "created_at": "2015-01-31T20:49:02Z",
        //         "updated_at": "2015-02-11T16:54:02-08:00",
        //         "resource": "buy",
        //         "resource_path": "/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/buys/67e0eaec-07d7-54c4-a72c-2e92826897df",
        //         "committed": true,
        //         "instant": false,
        //         "fee": { "amount": "0.15", "currency": "USD" },
        //         "payout_at": "2015-02-18T16:54:00-08:00"
        //     }
        //
        // fetchTrades
        //
        //     {
        //         "trade_id": "10092327",
        //         "product_id": "BTC-USDT",
        //         "price": "17488.12",
        //         "size": "0.0000623",
        //         "time": "2023-01-11T00:52:37.557001Z",
        //         "side": "BUY",
        //         "bid": "",
        //         "ask": ""
        //     }
        //
        // fetchMyTrades
        //
        //     {
        //         "entry_id": "b88b82cc89e326a2778874795102cbafd08dd979a2a7a3c69603fc4c23c2e010",
        //         "trade_id": "cdc39e45-bbd3-44ec-bf02-61742dfb16a1",
        //         "order_id": "813a53c5-3e39-47bb-863d-2faf685d22d8",
        //         "trade_time": "2023-01-18T01:37:38.091377090Z",
        //         "trade_type": "FILL",
        //         "price": "21220.64",
        //         "size": "0.0046830664333996",
        //         "commission": "0.0000280983986004",
        //         "product_id": "BTC-USDT",
        //         "sequence_timestamp": "2023-01-18T01:37:38.092520Z",
        //         "liquidity_indicator": "UNKNOWN_LIQUIDITY_INDICATOR",
        //         "size_in_quote": true,
        //         "user_id": "1111111-1111-1111-1111-111111111111",
        //         "side": "BUY"
        //     }
        //
        object symbol = null;
        object totalObject = this.safeValue(trade, "total", new Dictionary<string, object>() {});
        object amountObject = this.safeValue(trade, "amount", new Dictionary<string, object>() {});
        object subtotalObject = this.safeValue(trade, "subtotal", new Dictionary<string, object>() {});
        object feeObject = this.safeValue(trade, "fee", new Dictionary<string, object>() {});
        object marketId = this.safeString(trade, "product_id");
        market = this.safeMarket(marketId, market, "-");
        if (isTrue(!isEqual(market, null)))
        {
            symbol = getValue(market, "symbol");
        } else
        {
            object baseId = this.safeString(amountObject, "currency");
            object quoteId = this.safeString(totalObject, "currency");
            if (isTrue(isTrue((!isEqual(baseId, null))) && isTrue((!isEqual(quoteId, null)))))
            {
                object bs = this.safeCurrencyCode(baseId);
                object quote = this.safeCurrencyCode(quoteId);
                symbol = add(add(bs, "/"), quote);
            }
        }
        object sizeInQuote = this.safeValue(trade, "size_in_quote");
        object v3Price = this.safeString(trade, "price");
        object v3Amount = ((bool) isTrue((sizeInQuote))) ? null : this.safeString(trade, "size");
        object v3Cost = ((bool) isTrue((sizeInQuote))) ? this.safeString(trade, "size") : null;
        object v3FeeCost = this.safeString(trade, "commission");
        object amountString = this.safeString(amountObject, "amount", v3Amount);
        object costString = this.safeString(subtotalObject, "amount", v3Cost);
        object priceString = null;
        object cost = null;
        if (isTrue(isTrue((!isEqual(costString, null))) && isTrue((!isEqual(amountString, null)))))
        {
            priceString = Precise.stringDiv(costString, amountString);
        } else
        {
            priceString = v3Price;
        }
        if (isTrue(isTrue((!isEqual(priceString, null))) && isTrue((!isEqual(amountString, null)))))
        {
            cost = Precise.stringMul(priceString, amountString);
        } else
        {
            cost = costString;
        }
        object feeCurrencyId = this.safeString(feeObject, "currency");
        object datetime = this.safeStringN(trade, new List<object>() {"created_at", "trade_time", "time"});
        object side = this.safeStringLower2(trade, "resource", "side");
        object takerOrMaker = this.safeStringLower(trade, "liquidity_indicator");
        return this.safeTrade(new Dictionary<string, object>() {
            { "info", trade },
            { "id", this.safeString2(trade, "id", "trade_id") },
            { "order", this.safeString(trade, "order_id") },
            { "timestamp", this.parse8601(datetime) },
            { "datetime", datetime },
            { "symbol", symbol },
            { "type", null },
            { "side", ((bool) isTrue((isEqual(side, "unknown_order_side")))) ? null : side },
            { "takerOrMaker", ((bool) isTrue((isEqual(takerOrMaker, "unknown_liquidity_indicator")))) ? null : takerOrMaker },
            { "price", priceString },
            { "amount", amountString },
            { "cost", cost },
            { "fee", new Dictionary<string, object>() {
                { "cost", this.safeNumber(feeObject, "amount", this.parseNumber(v3FeeCost)) },
                { "currency", this.safeCurrencyCode(feeCurrencyId) },
            } },
        });
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name coinbase#fetchMarkets
        * @description retrieves data on all markets for coinbase
        * @param {object} params extra parameters specific to the exchange api endpoint
        * @returns {[object]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object method = this.safeString(this.options, "fetchMarkets", "fetchMarketsV3");
        return await this.callAsync(method, parameters);
    }

    public async virtual Task<object> fetchMarketsV2(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object response = await this.fetchCurrenciesFromCache(parameters);
        object currencies = this.safeValue(response, "currencies", new Dictionary<string, object>() {});
        object exchangeRates = this.safeValue(response, "exchangeRates", new Dictionary<string, object>() {});
        object data = this.safeValue(currencies, "data", new List<object>() {});
        object dataById = this.indexBy(data, "id");
        object rates = this.safeValue(this.safeValue(exchangeRates, "data", new Dictionary<string, object>() {}), "rates", new Dictionary<string, object>() {});
        object baseIds = new List<string>(((Dictionary<string,object>)rates).Keys);
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(baseIds)); postFixIncrement(ref i))
        {
            object baseId = getValue(baseIds, i);
            object bs = this.safeCurrencyCode(baseId);
            object type = ((bool) isTrue((((Dictionary<string,object>)dataById).ContainsKey(toStringOrNull(baseId))))) ? "fiat" : "crypto";
            // https://github.com/ccxt/ccxt/issues/6066
            if (isTrue(isEqual(type, "crypto")))
            {
                for (object j = 0; isLessThan(j, getArrayLength(data)); postFixIncrement(ref j))
                {
                    object quoteCurrency = getValue(data, j);
                    object quoteId = this.safeString(quoteCurrency, "id");
                    object quote = this.safeCurrencyCode(quoteId);
                    ((List<object>)result).Add(new Dictionary<string, object>() {
                        { "id", add(add(baseId, "-"), quoteId) },
                        { "symbol", add(add(bs, "/"), quote) },
                        { "base", bs },
                        { "quote", quote },
                        { "settle", null },
                        { "baseId", baseId },
                        { "quoteId", quoteId },
                        { "settleId", null },
                        { "type", "spot" },
                        { "spot", true },
                        { "margin", false },
                        { "swap", false },
                        { "future", false },
                        { "option", false },
                        { "active", null },
                        { "contract", false },
                        { "linear", null },
                        { "inverse", null },
                        { "contractSize", null },
                        { "expiry", null },
                        { "expiryDatetime", null },
                        { "strike", null },
                        { "optionType", null },
                        { "precision", new Dictionary<string, object>() {
                            { "amount", null },
                            { "price", null },
                        } },
                        { "limits", new Dictionary<string, object>() {
                            { "leverage", new Dictionary<string, object>() {
                                { "min", null },
                                { "max", null },
                            } },
                            { "amount", new Dictionary<string, object>() {
                                { "min", null },
                                { "max", null },
                            } },
                            { "price", new Dictionary<string, object>() {
                                { "min", null },
                                { "max", null },
                            } },
                            { "cost", new Dictionary<string, object>() {
                                { "min", this.safeNumber(quoteCurrency, "min_size") },
                                { "max", null },
                            } },
                        } },
                        { "info", quoteCurrency },
                    });
                }
            }
        }
        return result;
    }

    public async virtual Task<object> fetchMarketsV3(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object response = await this.v3PrivateGetBrokerageProducts(parameters);
        //
        //     [
        //         {
        //             "product_id": "TONE-USD",
        //             "price": "0.01523",
        //             "price_percentage_change_24h": "1.94109772423025",
        //             "volume_24h": "19773129",
        //             "volume_percentage_change_24h": "437.0170530929949",
        //             "base_increment": "1",
        //             "quote_increment": "0.00001",
        //             "quote_min_size": "1",
        //             "quote_max_size": "10000000",
        //             "base_min_size": "26.7187147229469674",
        //             "base_max_size": "267187147.2294696735908216",
        //             "base_name": "TE-FOOD",
        //             "quote_name": "US Dollar",
        //             "watched": false,
        //             "is_disabled": false,
        //             "new": false,
        //             "status": "online",
        //             "cancel_only": false,
        //             "limit_only": false,
        //             "post_only": false,
        //             "trading_disabled": false,
        //             "auction_mode": false,
        //             "product_type": "SPOT",
        //             "quote_currency_id": "USD",
        //             "base_currency_id": "TONE",
        //             "fcm_trading_session_details": null,
        //             "mid_market_price": ""
        //         },
        //         ...
        //     ]
        //
        object fees = await this.v3PrivateGetBrokerageTransactionSummary(parameters);
        //
        //     {
        //         "total_volume": 0,
        //         "total_fees": 0,
        //         "fee_tier": {
        //             "pricing_tier": "",
        //             "usd_from": "0",
        //             "usd_to": "10000",
        //             "taker_fee_rate": "0.006",
        //             "maker_fee_rate": "0.004"
        //         },
        //         "margin_rate": null,
        //         "goods_and_services_tax": null,
        //         "advanced_trade_only_volume": 0,
        //         "advanced_trade_only_fees": 0,
        //         "coinbase_pro_volume": 0,
        //         "coinbase_pro_fees": 0
        //     }
        //
        object feeTier = this.safeValue(fees, "fee_tier", new Dictionary<string, object>() {});
        object data = this.safeValue(response, "products", new List<object>() {});
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(data)); postFixIncrement(ref i))
        {
            object market = getValue(data, i);
            object id = this.safeString(market, "product_id");
            object baseId = this.safeString(market, "base_currency_id");
            object quoteId = this.safeString(market, "quote_currency_id");
            object bs = this.safeCurrencyCode(baseId);
            object quote = this.safeCurrencyCode(quoteId);
            object marketType = this.safeStringLower(market, "product_type");
            object tradingDisabled = this.safeValue(market, "trading_disabled");
            object stablePairs = this.safeValue(this.options, "stablePairs", new List<object>() {});
            ((List<object>)result).Add(new Dictionary<string, object>() {
                { "id", id },
                { "symbol", add(add(bs, "/"), quote) },
                { "base", bs },
                { "quote", quote },
                { "settle", null },
                { "baseId", baseId },
                { "quoteId", quoteId },
                { "settleId", null },
                { "type", marketType },
                { "spot", (isEqual(marketType, "spot")) },
                { "margin", null },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "active", !isTrue(tradingDisabled) },
                { "contract", false },
                { "linear", null },
                { "inverse", null },
                { "taker", ((bool) isTrue(this.inArray(id, stablePairs))) ? 0.00001 : this.safeNumber(feeTier, "taker_fee_rate") },
                { "maker", ((bool) isTrue(this.inArray(id, stablePairs))) ? 0 : this.safeNumber(feeTier, "maker_fee_rate") },
                { "contractSize", null },
                { "expiry", null },
                { "expiryDatetime", null },
                { "strike", null },
                { "optionType", null },
                { "precision", new Dictionary<string, object>() {
                    { "amount", this.safeNumber(market, "base_increment") },
                    { "price", this.safeNumber(market, "quote_increment") },
                } },
                { "limits", new Dictionary<string, object>() {
                    { "leverage", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "amount", new Dictionary<string, object>() {
                        { "min", this.safeNumber(market, "base_min_size") },
                        { "max", this.safeNumber(market, "base_max_size") },
                    } },
                    { "price", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "cost", new Dictionary<string, object>() {
                        { "min", this.safeNumber(market, "quote_min_size") },
                        { "max", this.safeNumber(market, "quote_max_size") },
                    } },
                } },
                { "info", market },
            });
        }
        return result;
    }

    public async virtual Task<object> fetchCurrenciesFromCache(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object options = this.safeValue(this.options, "fetchCurrencies", new Dictionary<string, object>() {});
        object timestamp = this.safeInteger(options, "timestamp");
        object expires = this.safeInteger(options, "expires", 1000);
        object now = this.milliseconds();
        if (isTrue(isTrue((isEqual(timestamp, null))) || isTrue((isGreaterThan((subtract(now, timestamp)), expires)))))
        {
            object currencies = await this.v2PublicGetCurrencies(parameters);
            object exchangeRates = await this.v2PublicGetExchangeRates(parameters);
            ((Dictionary<string, object>)this.options)["fetchCurrencies"] = this.extend(options, new Dictionary<string, object>() {
                { "currencies", currencies },
                { "exchangeRates", exchangeRates },
                { "timestamp", now },
            });
        }
        return this.safeValue(this.options, "fetchCurrencies", new Dictionary<string, object>() {});
    }

    public async override Task<object> fetchCurrencies(object parameters = null)
    {
        /**
        * @method
        * @name coinbase#fetchCurrencies
        * @description fetches all available currencies on an exchange
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {object} an associative dictionary of currencies
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.fetchCurrenciesFromCache(parameters);
        object currencies = this.safeValue(response, "currencies", new Dictionary<string, object>() {});
        //
        //     {
        //         "data":[
        //             {"id":"AED","name":"United Arab Emirates Dirham","min_size":"0.01000000"},
        //             {"id":"AFN","name":"Afghan Afghani","min_size":"0.01000000"},
        //             {"id":"ALL","name":"Albanian Lek","min_size":"0.01000000"},
        //             {"id":"AMD","name":"Armenian Dram","min_size":"0.01000000"},
        //             {"id":"ANG","name":"Netherlands Antillean Gulden","min_size":"0.01000000"},
        //             ...
        //         ],
        //     }
        //
        object exchangeRates = this.safeValue(response, "exchangeRates", new Dictionary<string, object>() {});
        //
        //     {
        //         "data":{
        //             "currency":"USD",
        //             "rates":{
        //                 "AED":"3.67",
        //                 "AFN":"78.21",
        //                 "ALL":"110.42",
        //                 "AMD":"474.18",
        //                 "ANG":"1.75",
        //                 ...
        //             },
        //         }
        //     }
        //
        object data = this.safeValue(currencies, "data", new List<object>() {});
        object dataById = this.indexBy(data, "id");
        object rates = this.safeValue(this.safeValue(exchangeRates, "data", new Dictionary<string, object>() {}), "rates", new Dictionary<string, object>() {});
        object keys = new List<string>(((Dictionary<string,object>)rates).Keys);
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
        {
            object key = getValue(keys, i);
            object type = ((bool) isTrue((((Dictionary<string,object>)dataById).ContainsKey(toStringOrNull(key))))) ? "fiat" : "crypto";
            object currency = this.safeValue(dataById, key, new Dictionary<string, object>() {});
            object id = this.safeString(currency, "id", key);
            object name = this.safeString(currency, "name");
            object code = this.safeCurrencyCode(id);
            ((Dictionary<string, object>)result)[(string)code] = new Dictionary<string, object>() {
                { "id", id },
                { "code", code },
                { "info", currency },
                { "type", type },
                { "name", name },
                { "active", true },
                { "deposit", null },
                { "withdraw", null },
                { "fee", null },
                { "precision", null },
                { "limits", new Dictionary<string, object>() {
                    { "amount", new Dictionary<string, object>() {
                        { "min", this.safeNumber(currency, "min_size") },
                        { "max", null },
                    } },
                    { "withdraw", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                } },
            };
        }
        return result;
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbase#fetchTickers
        * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
        * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object method = this.safeString(this.options, "fetchTickers", "fetchTickersV3");
        if (isTrue(isEqual(method, "fetchTickersV3")))
        {
            return await this.fetchTickersV3(symbols, parameters);
        }
        return await this.fetchTickersV2(symbols, parameters);
    }

    public async virtual Task<object> fetchTickersV2(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object request = new Dictionary<string, object>() {};
        object response = await this.v2PublicGetExchangeRates(this.extend(request, parameters));
        //
        //     {
        //         "data":{
        //             "currency":"USD",
        //             "rates":{
        //                 "AED":"3.6731",
        //                 "AFN":"103.163942",
        //                 "ALL":"106.973038",
        //             }
        //         }
        //     }
        //
        object data = this.safeValue(response, "data", new Dictionary<string, object>() {});
        object rates = this.safeValue(data, "rates", new Dictionary<string, object>() {});
        object quoteId = this.safeString(data, "currency");
        object result = new Dictionary<string, object>() {};
        object baseIds = new List<string>(((Dictionary<string,object>)rates).Keys);
        object delimiter = "-";
        for (object i = 0; isLessThan(i, getArrayLength(baseIds)); postFixIncrement(ref i))
        {
            object baseId = getValue(baseIds, i);
            object marketId = add(add(baseId, delimiter), quoteId);
            object market = this.safeMarket(marketId, null, delimiter);
            object symbol = getValue(market, "symbol");
            ((Dictionary<string, object>)result)[(string)symbol] = this.parseTicker(getValue(rates, baseId), market);
        }
        return this.filterByArray(result, "symbol", symbols);
    }

    public async virtual Task<object> fetchTickersV3(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object response = await this.v3PrivateGetBrokerageProducts(parameters);
        //
        //     {
        //         'products': [
        //             {
        //                 "product_id": "TONE-USD",
        //                 "price": "0.01523",
        //                 "price_percentage_change_24h": "1.94109772423025",
        //                 "volume_24h": "19773129",
        //                 "volume_percentage_change_24h": "437.0170530929949",
        //                 "base_increment": "1",
        //                 "quote_increment": "0.00001",
        //                 "quote_min_size": "1",
        //                 "quote_max_size": "10000000",
        //                 "base_min_size": "26.7187147229469674",
        //                 "base_max_size": "267187147.2294696735908216",
        //                 "base_name": "TE-FOOD",
        //                 "quote_name": "US Dollar",
        //                 "watched": false,
        //                 "is_disabled": false,
        //                 "new": false,
        //                 "status": "online",
        //                 "cancel_only": false,
        //                 "limit_only": false,
        //                 "post_only": false,
        //                 "trading_disabled": false,
        //                 "auction_mode": false,
        //                 "product_type": "SPOT",
        //                 "quote_currency_id": "USD",
        //                 "base_currency_id": "TONE",
        //                 "fcm_trading_session_details": null,
        //                 "mid_market_price": ""
        //             },
        //             ...
        //         ],
        //         "num_products": 549
        //     }
        //
        object data = this.safeValue(response, "products", new List<object>() {});
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(data)); postFixIncrement(ref i))
        {
            object entry = getValue(data, i);
            object marketId = this.safeString(entry, "product_id");
            object market = this.safeMarket(marketId, null, "-");
            object symbol = getValue(market, "symbol");
            ((Dictionary<string, object>)result)[(string)symbol] = this.parseTicker(entry, market);
        }
        return this.filterByArray(result, "symbol", symbols);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name coinbase#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object method = this.safeString(this.options, "fetchTicker", "fetchTickerV3");
        if (isTrue(isEqual(method, "fetchTickerV3")))
        {
            return await this.fetchTickerV3(symbol, parameters);
        }
        return await this.fetchTickerV2(symbol, parameters);
    }

    public async virtual Task<object> fetchTickerV2(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = this.extend(new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        }, parameters);
        object spot = await this.v2PublicGetPricesSymbolSpot(request);
        //
        //     {"data":{"base":"BTC","currency":"USD","amount":"48691.23"}}
        //
        object ask = await this.v2PublicGetPricesSymbolBuy(request);
        //
        //     {"data":{"base":"BTC","currency":"USD","amount":"48691.23"}}
        //
        object bid = await this.v2PublicGetPricesSymbolSell(request);
        //
        //     {"data":{"base":"BTC","currency":"USD","amount":"48691.23"}}
        //
        object spotData = this.safeValue(spot, "data", new Dictionary<string, object>() {});
        object askData = this.safeValue(ask, "data", new Dictionary<string, object>() {});
        object bidData = this.safeValue(bid, "data", new Dictionary<string, object>() {});
        object bidAskLast = new Dictionary<string, object>() {
            { "bid", this.safeNumber(bidData, "amount") },
            { "ask", this.safeNumber(askData, "amount") },
            { "price", this.safeNumber(spotData, "amount") },
        };
        return this.parseTicker(bidAskLast, market);
    }

    public async virtual Task<object> fetchTickerV3(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "product_id", getValue(market, "id") },
            { "limit", 1 },
        };
        object response = await this.v3PrivateGetBrokerageProductsProductIdTicker(this.extend(request, parameters));
        //
        //     {
        //         "trades": [
        //             {
        //                 "trade_id": "10209805",
        //                 "product_id": "BTC-USDT",
        //                 "price": "19381.27",
        //                 "size": "0.1",
        //                 "time": "2023-01-13T20:35:41.865970Z",
        //                 "side": "BUY",
        //                 "bid": "",
        //                 "ask": ""
        //             }
        //         ]
        //     }
        //
        object data = this.safeValue(response, "trades", new List<object>() {});
        return this.parseTicker(getValue(data, 0), market);
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        // fetchTickerV2
        //
        //     {
        //         "bid": 20713.37,
        //         "ask": 20924.65,
        //         "price": 20809.83
        //     }
        //
        // fetchTickerV3
        //
        //     {
        //         "trade_id": "10209805",
        //         "product_id": "BTC-USDT",
        //         "price": "19381.27",
        //         "size": "0.1",
        //         "time": "2023-01-13T20:35:41.865970Z",
        //         "side": "BUY",
        //         "bid": "",
        //         "ask": ""
        //     }
        //
        // fetchTickersV2
        //
        //     "48691.23"
        //
        // fetchTickersV3
        //
        //     [
        //         {
        //             "product_id": "TONE-USD",
        //             "price": "0.01523",
        //             "price_percentage_change_24h": "1.94109772423025",
        //             "volume_24h": "19773129",
        //             "volume_percentage_change_24h": "437.0170530929949",
        //             "base_increment": "1",
        //             "quote_increment": "0.00001",
        //             "quote_min_size": "1",
        //             "quote_max_size": "10000000",
        //             "base_min_size": "26.7187147229469674",
        //             "base_max_size": "267187147.2294696735908216",
        //             "base_name": "TE-FOOD",
        //             "quote_name": "US Dollar",
        //             "watched": false,
        //             "is_disabled": false,
        //             "new": false,
        //             "status": "online",
        //             "cancel_only": false,
        //             "limit_only": false,
        //             "post_only": false,
        //             "trading_disabled": false,
        //             "auction_mode": false,
        //             "product_type": "SPOT",
        //             "quote_currency_id": "USD",
        //             "base_currency_id": "TONE",
        //             "fcm_trading_session_details": null,
        //             "mid_market_price": ""
        //         },
        //         ...
        //     ]
        //
        object marketId = this.safeString(ticker, "product_id");
        object last = this.safeNumber(ticker, "price");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", this.safeSymbol(marketId, market) },
            { "timestamp", null },
            { "datetime", null },
            { "bid", this.safeNumber(ticker, "bid") },
            { "ask", this.safeNumber(ticker, "ask") },
            { "last", last },
            { "high", null },
            { "low", null },
            { "bidVolume", null },
            { "askVolume", null },
            { "vwap", null },
            { "open", null },
            { "close", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", this.safeNumber(ticker, "price_percentage_change_24h") },
            { "average", null },
            { "baseVolume", null },
            { "quoteVolume", null },
            { "info", ticker },
        }, market);
    }

    public virtual object parseBalance(object response, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object balances = this.safeValue(response, "data", new List<object>() {});
        object accounts = this.safeValue(parameters, "type", getValue(this.options, "accounts"));
        object result = new Dictionary<string, object>() {
            { "info", response },
        };
        for (object b = 0; isLessThan(b, getArrayLength(balances)); postFixIncrement(ref b))
        {
            object balance = getValue(balances, b);
            object type = this.safeString(balance, "type");
            if (isTrue(this.inArray(type, accounts)))
            {
                object value = this.safeValue(balance, "balance");
                if (isTrue(!isEqual(value, null)))
                {
                    object currencyId = this.safeString(value, "currency");
                    object code = this.safeCurrencyCode(currencyId);
                    object total = this.safeString(value, "amount");
                    object free = total;
                    object account = this.safeValue(result, code);
                    if (isTrue(isEqual(account, null)))
                    {
                        account = this.account();
                        ((Dictionary<string, object>)account)["free"] = free;
                        ((Dictionary<string, object>)account)["total"] = total;
                    } else
                    {
                        ((Dictionary<string, object>)account)["free"] = Precise.stringAdd(getValue(account, "free"), total);
                        ((Dictionary<string, object>)account)["total"] = Precise.stringAdd(getValue(account, "total"), total);
                    }
                    ((Dictionary<string, object>)result)[(string)code] = account;
                }
            }
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name coinbase#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "limit", 100 },
        };
        object response = await this.v2PrivateGetAccounts(this.extend(request, parameters));
        //
        //     {
        //         "pagination":{
        //             "ending_before":null,
        //             "starting_after":null,
        //             "previous_ending_before":null,
        //             "next_starting_after":"6b17acd6-2e68-5eb0-9f45-72d67cef578b",
        //             "limit":100,
        //             "order":"desc",
        //             "previous_uri":null,
        //             "next_uri":"/v2/accounts?limit=100\u0026starting_after=6b17acd6-2e68-5eb0-9f45-72d67cef578b"
        //         },
        //         "data":[
        //             {
        //                 "id":"94ad58bc-0f15-5309-b35a-a4c86d7bad60",
        //                 "name":"MINA Wallet",
        //                 "primary":false,
        //                 "type":"wallet",
        //                 "currency":{
        //                     "code":"MINA",
        //                     "name":"Mina",
        //                     "color":"#EA6B48",
        //                     "sort_index":397,
        //                     "exponent":9,
        //                     "type":"crypto",
        //                     "address_regex":"^(B62)[A-Za-z0-9]{52}$",
        //                     "asset_id":"a4ffc575-942c-5e26-b70c-cb3befdd4229",
        //                     "slug":"mina"
        //                 },
        //                 "balance":{"amount":"0.000000000","currency":"MINA"},
        //                 "created_at":"2022-03-25T00:36:16Z",
        //                 "updated_at":"2022-03-25T00:36:16Z",
        //                 "resource":"account",
        //                 "resource_path":"/v2/accounts/94ad58bc-0f15-5309-b35a-a4c86d7bad60",
        //                 "allow_deposits":true,
        //                 "allow_withdrawals":true
        //             },
        //         ]
        //     }
        //
        return this.parseBalance(response, parameters);
    }

    public async virtual Task<object> fetchLedger(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbase#fetchLedger
        * @description fetch the history of changes, actions done by the user or operations that altered balance of the user
        * @param {string|undefined} code unified currency code, default is undefined
        * @param {int|undefined} since timestamp in ms of the earliest ledger entry, default is undefined
        * @param {int|undefined} limit max number of ledger entrys to return, default is undefined
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {object} a [ledger structure]{@link https://docs.ccxt.com/#/?id=ledger-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = null;
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
        }
        object request = await this.prepareAccountRequestWithCurrencyCode(code, limit, parameters);
        object query = this.omit(parameters, new List<object>() {"account_id", "accountId"});
        // for pagination use parameter 'starting_after'
        // the value for the next page can be obtained from the result of the previous call in the 'pagination' field
        // eg: instance.last_json_response.pagination.next_starting_after
        object response = await this.v2PrivateGetAccountsAccountIdTransactions(this.extend(request, query));
        return this.parseLedger(getValue(response, "data"), currency, since, limit);
    }

    public virtual object parseLedgerEntryStatus(object status)
    {
        object types = new Dictionary<string, object>() {
            { "completed", "ok" },
        };
        return this.safeString(types, status, status);
    }

    public virtual object parseLedgerEntryType(object type)
    {
        object types = new Dictionary<string, object>() {
            { "buy", "trade" },
            { "sell", "trade" },
            { "fiat_deposit", "transaction" },
            { "fiat_withdrawal", "transaction" },
            { "exchange_deposit", "transaction" },
            { "exchange_withdrawal", "transaction" },
            { "send", "transaction" },
            { "pro_deposit", "transaction" },
            { "pro_withdrawal", "transaction" },
        };
        return this.safeString(types, type, type);
    }

    public override object parseLedgerEntry(object item, object currency = null)
    {
        //
        // crypto deposit transaction
        //
        //     {
        //         id: '34e4816b-4c8c-5323-a01c-35a9fa26e490',
        //         type: 'send',
        //         status: 'completed',
        //         amount: { amount: '28.31976528', currency: 'BCH' },
        //         native_amount: { amount: '2799.65', currency: 'GBP' },
        //         description: null,
        //         created_at: '2019-02-28T12:35:20Z',
        //         updated_at: '2019-02-28T12:43:24Z',
        //         resource: 'transaction',
        //         resource_path: '/v2/accounts/c01d7364-edd7-5f3a-bd1d-de53d4cbb25e/transactions/34e4816b-4c8c-5323-a01c-35a9fa26e490',
        //         instant_exchange: false,
        //         network: {
        //             status: 'confirmed',
        //             hash: '56222d865dae83774fccb2efbd9829cf08c75c94ce135bfe4276f3fb46d49701',
        //             transaction_url: 'https://bch.btc.com/56222d865dae83774fccb2efbd9829cf08c75c94ce135bfe4276f3fb46d49701'
        //         },
        //         from: { resource: 'bitcoin_cash_network', currency: 'BCH' },
        //         details: { title: 'Received Bitcoin Cash', subtitle: 'From Bitcoin Cash address' }
        //     }
        //
        // crypto withdrawal transaction
        //
        //     {
        //         id: '459aad99-2c41-5698-ac71-b6b81a05196c',
        //         type: 'send',
        //         status: 'completed',
        //         amount: { amount: '-0.36775642', currency: 'BTC' },
        //         native_amount: { amount: '-1111.65', currency: 'GBP' },
        //         description: null,
        //         created_at: '2019-03-20T08:37:07Z',
        //         updated_at: '2019-03-20T08:49:33Z',
        //         resource: 'transaction',
        //         resource_path: '/v2/accounts/c6afbd34-4bd0-501e-8616-4862c193cd84/transactions/459aad99-2c41-5698-ac71-b6b81a05196c',
        //         instant_exchange: false,
        //         network: {
        //             status: 'confirmed',
        //             hash: '2732bbcf35c69217c47b36dce64933d103895277fe25738ffb9284092701e05b',
        //             transaction_url: 'https://blockchain.info/tx/2732bbcf35c69217c47b36dce64933d103895277fe25738ffb9284092701e05b',
        //             transaction_fee: { amount: '0.00000000', currency: 'BTC' },
        //             transaction_amount: { amount: '0.36775642', currency: 'BTC' },
        //             confirmations: 15682
        //         },
        //         to: {
        //             resource: 'bitcoin_address',
        //             address: '1AHnhqbvbYx3rnZx8uC7NbFZaTe4tafFHX',
        //             currency: 'BTC',
        //             address_info: { address: '1AHnhqbvbYx3rnZx8uC7NbFZaTe4tafFHX' }
        //         },
        //         idem: 'da0a2f14-a2af-4c5a-a37e-d4484caf582bsend',
        //         application: {
        //             id: '5756ab6e-836b-553b-8950-5e389451225d',
        //             resource: 'application',
        //             resource_path: '/v2/applications/5756ab6e-836b-553b-8950-5e389451225d'
        //         },
        //         details: { title: 'Sent Bitcoin', subtitle: 'To Bitcoin address' }
        //     }
        //
        // withdrawal transaction from coinbase to coinbasepro
        //
        //     {
        //         id: '5b1b9fb8-5007-5393-b923-02903b973fdc',
        //         type: 'pro_deposit',
        //         status: 'completed',
        //         amount: { amount: '-0.00001111', currency: 'BCH' },
        //         native_amount: { amount: '0.00', currency: 'GBP' },
        //         description: null,
        //         created_at: '2019-02-28T13:31:58Z',
        //         updated_at: '2019-02-28T13:31:58Z',
        //         resource: 'transaction',
        //         resource_path: '/v2/accounts/c01d7364-edd7-5f3a-bd1d-de53d4cbb25e/transactions/5b1b9fb8-5007-5393-b923-02903b973fdc',
        //         instant_exchange: false,
        //         application: {
        //             id: '5756ab6e-836b-553b-8950-5e389451225d',
        //             resource: 'application',
        //             resource_path: '/v2/applications/5756ab6e-836b-553b-8950-5e389451225d'
        //         },
        //         details: { title: 'Transferred Bitcoin Cash', subtitle: 'To Coinbase Pro' }
        //     }
        //
        // withdrawal transaction from coinbase to gdax
        //
        //     {
        //         id: 'badb7313-a9d3-5c07-abd0-00f8b44199b1',
        //         type: 'exchange_deposit',
        //         status: 'completed',
        //         amount: { amount: '-0.43704149', currency: 'BCH' },
        //         native_amount: { amount: '-51.90', currency: 'GBP' },
        //         description: null,
        //         created_at: '2019-03-19T10:30:40Z',
        //         updated_at: '2019-03-19T10:30:40Z',
        //         resource: 'transaction',
        //         resource_path: '/v2/accounts/c01d7364-edd7-5f3a-bd1d-de53d4cbb25e/transactions/badb7313-a9d3-5c07-abd0-00f8b44199b1',
        //         instant_exchange: false,
        //         details: { title: 'Transferred Bitcoin Cash', subtitle: 'To GDAX' }
        //     }
        //
        // deposit transaction from gdax to coinbase
        //
        //     {
        //         id: '9c4b642c-8688-58bf-8962-13cef64097de',
        //         type: 'exchange_withdrawal',
        //         status: 'completed',
        //         amount: { amount: '0.57729420', currency: 'BTC' },
        //         native_amount: { amount: '4418.72', currency: 'GBP' },
        //         description: null,
        //         created_at: '2018-02-17T11:33:33Z',
        //         updated_at: '2018-02-17T11:33:33Z',
        //         resource: 'transaction',
        //         resource_path: '/v2/accounts/c6afbd34-4bd0-501e-8616-4862c193cd84/transactions/9c4b642c-8688-58bf-8962-13cef64097de',
        //         instant_exchange: false,
        //         details: { title: 'Transferred Bitcoin', subtitle: 'From GDAX' }
        //     }
        //
        // deposit transaction from coinbasepro to coinbase
        //
        //     {
        //         id: '8d6dd0b9-3416-568a-889d-8f112fae9e81',
        //         type: 'pro_withdrawal',
        //         status: 'completed',
        //         amount: { amount: '0.40555386', currency: 'BTC' },
        //         native_amount: { amount: '1140.27', currency: 'GBP' },
        //         description: null,
        //         created_at: '2019-03-04T19:41:58Z',
        //         updated_at: '2019-03-04T19:41:58Z',
        //         resource: 'transaction',
        //         resource_path: '/v2/accounts/c6afbd34-4bd0-501e-8616-4862c193cd84/transactions/8d6dd0b9-3416-568a-889d-8f112fae9e81',
        //         instant_exchange: false,
        //         application: {
        //             id: '5756ab6e-836b-553b-8950-5e389451225d',
        //             resource: 'application',
        //             resource_path: '/v2/applications/5756ab6e-836b-553b-8950-5e389451225d'
        //         },
        //         details: { title: 'Transferred Bitcoin', subtitle: 'From Coinbase Pro' }
        //     }
        //
        // sell trade
        //
        //     {
        //         id: 'a9409207-df64-585b-97ab-a50780d2149e',
        //         type: 'sell',
        //         status: 'completed',
        //         amount: { amount: '-9.09922880', currency: 'BTC' },
        //         native_amount: { amount: '-7285.73', currency: 'GBP' },
        //         description: null,
        //         created_at: '2017-03-27T15:38:34Z',
        //         updated_at: '2017-03-27T15:38:34Z',
        //         resource: 'transaction',
        //         resource_path: '/v2/accounts/c6afbd34-4bd0-501e-8616-4862c193cd84/transactions/a9409207-df64-585b-97ab-a50780d2149e',
        //         instant_exchange: false,
        //         sell: {
        //             id: 'e3550b4d-8ae6-5de3-95fe-1fb01ba83051',
        //             resource: 'sell',
        //             resource_path: '/v2/accounts/c6afbd34-4bd0-501e-8616-4862c193cd84/sells/e3550b4d-8ae6-5de3-95fe-1fb01ba83051'
        //         },
        //         details: {
        //             title: 'Sold Bitcoin',
        //             subtitle: 'Using EUR Wallet',
        //             payment_method_name: 'EUR Wallet'
        //         }
        //     }
        //
        // buy trade
        //
        //     {
        //         id: '63eeed67-9396-5912-86e9-73c4f10fe147',
        //         type: 'buy',
        //         status: 'completed',
        //         amount: { amount: '2.39605772', currency: 'ETH' },
        //         native_amount: { amount: '98.31', currency: 'GBP' },
        //         description: null,
        //         created_at: '2017-03-27T09:07:56Z',
        //         updated_at: '2017-03-27T09:07:57Z',
        //         resource: 'transaction',
        //         resource_path: '/v2/accounts/8902f85d-4a69-5d74-82fe-8e390201bda7/transactions/63eeed67-9396-5912-86e9-73c4f10fe147',
        //         instant_exchange: false,
        //         buy: {
        //             id: '20b25b36-76c6-5353-aa57-b06a29a39d82',
        //             resource: 'buy',
        //             resource_path: '/v2/accounts/8902f85d-4a69-5d74-82fe-8e390201bda7/buys/20b25b36-76c6-5353-aa57-b06a29a39d82'
        //         },
        //         details: {
        //             title: 'Bought Ethereum',
        //             subtitle: 'Using EUR Wallet',
        //             payment_method_name: 'EUR Wallet'
        //         }
        //     }
        //
        // fiat deposit transaction
        //
        //     {
        //         id: '04ed4113-3732-5b0c-af86-b1d2146977d0',
        //         type: 'fiat_deposit',
        //         status: 'completed',
        //         amount: { amount: '114.02', currency: 'EUR' },
        //         native_amount: { amount: '97.23', currency: 'GBP' },
        //         description: null,
        //         created_at: '2017-02-09T07:01:21Z',
        //         updated_at: '2017-02-09T07:01:22Z',
        //         resource: 'transaction',
        //         resource_path: '/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/transactions/04ed4113-3732-5b0c-af86-b1d2146977d0',
        //         instant_exchange: false,
        //         fiat_deposit: {
        //             id: 'f34c19f3-b730-5e3d-9f72-96520448677a',
        //             resource: 'fiat_deposit',
        //             resource_path: '/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/deposits/f34c19f3-b730-5e3d-9f72-96520448677a'
        //         },
        //         details: {
        //             title: 'Deposited funds',
        //             subtitle: 'From SEPA Transfer (GB47 BARC 20..., reference CBADVI)',
        //             payment_method_name: 'SEPA Transfer (GB47 BARC 20..., reference CBADVI)'
        //         }
        //     }
        //
        // fiat withdrawal transaction
        //
        //     {
        //         id: '957d98e2-f80e-5e2f-a28e-02945aa93079',
        //         type: 'fiat_withdrawal',
        //         status: 'completed',
        //         amount: { amount: '-11000.00', currency: 'EUR' },
        //         native_amount: { amount: '-9698.22', currency: 'GBP' },
        //         description: null,
        //         created_at: '2017-12-06T13:19:19Z',
        //         updated_at: '2017-12-06T13:19:19Z',
        //         resource: 'transaction',
        //         resource_path: '/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/transactions/957d98e2-f80e-5e2f-a28e-02945aa93079',
        //         instant_exchange: false,
        //         fiat_withdrawal: {
        //             id: 'f4bf1fd9-ab3b-5de7-906d-ed3e23f7a4e7',
        //             resource: 'fiat_withdrawal',
        //             resource_path: '/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/withdrawals/f4bf1fd9-ab3b-5de7-906d-ed3e23f7a4e7'
        //         },
        //         details: {
        //             title: 'Withdrew funds',
        //             subtitle: 'To HSBC BANK PLC (GB74 MIDL...)',
        //             payment_method_name: 'HSBC BANK PLC (GB74 MIDL...)'
        //         }
        //     }
        //
        object amountInfo = this.safeValue(item, "amount", new Dictionary<string, object>() {});
        object amount = this.safeString(amountInfo, "amount");
        object direction = null;
        if (isTrue(Precise.stringLt(amount, "0")))
        {
            direction = "out";
            amount = Precise.stringNeg(amount);
        } else
        {
            direction = "in";
        }
        object currencyId = this.safeString(amountInfo, "currency");
        object code = this.safeCurrencyCode(currencyId, currency);
        //
        // the address and txid do not belong to the unified ledger structure
        //
        //     let address = undefined;
        //     if (item['to']) {
        //         address = this.safeString (item['to'], 'address');
        //     }
        //     let txid = undefined;
        //
        object fee = null;
        object networkInfo = this.safeValue(item, "network", new Dictionary<string, object>() {});
        // txid = network['hash']; // txid does not belong to the unified ledger structure
        object feeInfo = this.safeValue(networkInfo, "transaction_fee");
        if (isTrue(!isEqual(feeInfo, null)))
        {
            object feeCurrencyId = this.safeString(feeInfo, "currency");
            object feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId, currency);
            object feeAmount = this.safeNumber(feeInfo, "amount");
            fee = new Dictionary<string, object>() {
                { "cost", feeAmount },
                { "currency", feeCurrencyCode },
            };
        }
        object timestamp = this.parse8601(this.safeValue(item, "created_at"));
        object id = this.safeString(item, "id");
        object type = this.parseLedgerEntryType(this.safeString(item, "type"));
        object status = this.parseLedgerEntryStatus(this.safeString(item, "status"));
        object path = this.safeString(item, "resource_path");
        object accountId = null;
        if (isTrue(!isEqual(path, null)))
        {
            object parts = ((string)path).Split((string)"/").ToList<object>();
            object numParts = getArrayLength(parts);
            if (isTrue(isGreaterThan(numParts, 3)))
            {
                accountId = getValue(parts, 3);
            }
        }
        return new Dictionary<string, object>() {
            { "info", item },
            { "id", id },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "direction", direction },
            { "account", accountId },
            { "referenceId", null },
            { "referenceAccount", null },
            { "type", type },
            { "currency", code },
            { "amount", this.parseNumber(amount) },
            { "before", null },
            { "after", null },
            { "status", status },
            { "fee", fee },
        };
    }

    public async virtual Task<object> findAccountId(object code)
    {
        await this.loadMarkets();
        await this.loadAccounts();
        for (object i = 0; isLessThan(i, getArrayLength(this.accounts)); postFixIncrement(ref i))
        {
            object account = getValue(this.accounts, i);
            if (isTrue(isEqual(getValue(account, "code"), code)))
            {
                return getValue(account, "id");
            }
        }
        return null;
    }

    public virtual object prepareAccountRequest(object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object accountId = this.safeString2(parameters, "account_id", "accountId");
        if (isTrue(isEqual(accountId, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " prepareAccountRequest() method requires an account_id (or accountId) parameter")) ;
        }
        object request = new Dictionary<string, object>() {
            { "account_id", accountId },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((Dictionary<string, object>)request)["limit"] = limit;
        }
        return request;
    }

    public async virtual Task<object> prepareAccountRequestWithCurrencyCode(object code = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object accountId = this.safeString2(parameters, "account_id", "accountId");
        if (isTrue(isEqual(accountId, null)))
        {
            if (isTrue(isEqual(code, null)))
            {
                throw new ArgumentsRequired ((string)add(this.id, " prepareAccountRequestWithCurrencyCode() method requires an account_id (or accountId) parameter OR a currency code argument")) ;
            }
            accountId = await this.findAccountId(code);
            if (isTrue(isEqual(accountId, null)))
            {
                throw new ExchangeError ((string)add(add(this.id, " prepareAccountRequestWithCurrencyCode() could not find account id for "), code)) ;
            }
        }
        object request = new Dictionary<string, object>() {
            { "account_id", accountId },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((Dictionary<string, object>)request)["limit"] = limit;
        }
        return request;
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbase#createOrder
        * @description create a trade order
        * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_postorder
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much you want to trade in units of the base currency, quote currency for 'market' 'buy' orders
        * @param {float|undefined} price the price to fulfill the order, in units of the quote currency, ignored in market orders
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @param {float|undefined} params.stopPrice price to trigger stop orders
        * @param {float|undefined} params.triggerPrice price to trigger stop orders
        * @param {float|undefined} params.stopLossPrice price to trigger stop-loss orders
        * @param {float|undefined} params.takeProfitPrice price to trigger take-profit orders
        * @param {bool|undefined} params.postOnly true or false
        * @param {string|undefined} params.timeInForce 'GTC', 'IOC', 'GTD' or 'PO'
        * @param {string|undefined} params.stop_direction 'UNKNOWN_STOP_DIRECTION', 'STOP_DIRECTION_STOP_UP', 'STOP_DIRECTION_STOP_DOWN' the direction the stopPrice is triggered from
        * @param {string|undefined} params.end_time '2023-05-25T17:01:05.092Z' for 'GTD' orders
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "client_order_id", this.uuid() },
            { "product_id", getValue(market, "id") },
            { "side", ((string)side).ToUpper() },
        };
        object stopPrice = this.safeNumberN(parameters, new List<object>() {"stopPrice", "stop_price", "triggerPrice"});
        object stopLossPrice = this.safeNumber(parameters, "stopLossPrice");
        object takeProfitPrice = this.safeNumber(parameters, "takeProfitPrice");
        object isStop = !isEqual(stopPrice, null);
        object isStopLoss = !isEqual(stopLossPrice, null);
        object isTakeProfit = !isEqual(takeProfitPrice, null);
        object timeInForce = this.safeString(parameters, "timeInForce");
        object postOnly = ((bool) isTrue((isEqual(timeInForce, "PO")))) ? true : this.safeValue2(parameters, "postOnly", "post_only", false);
        object endTime = this.safeString(parameters, "end_time");
        object stopDirection = this.safeString(parameters, "stop_direction");
        if (isTrue(isEqual(type, "limit")))
        {
            if (isTrue(isStop))
            {
                if (isTrue(isEqual(stopDirection, null)))
                {
                    stopDirection = ((bool) isTrue((isEqual(side, "buy")))) ? "STOP_DIRECTION_STOP_DOWN" : "STOP_DIRECTION_STOP_UP";
                }
                if (isTrue(isTrue((isEqual(timeInForce, "GTD"))) || isTrue((!isEqual(endTime, null)))))
                {
                    if (isTrue(isEqual(endTime, null)))
                    {
                        throw new ExchangeError ((string)add(this.id, " createOrder() requires an end_time parameter for a GTD order")) ;
                    }
                    ((Dictionary<string, object>)request)["order_configuration"] = new Dictionary<string, object>() {
                        { "stop_limit_stop_limit_gtd", new Dictionary<string, object>() {
                            { "base_size", this.amountToPrecision(symbol, amount) },
                            { "limit_price", this.priceToPrecision(symbol, price) },
                            { "stop_price", this.priceToPrecision(symbol, stopPrice) },
                            { "stop_direction", stopDirection },
                            { "end_time", endTime },
                        } },
                    };
                } else
                {
                    ((Dictionary<string, object>)request)["order_configuration"] = new Dictionary<string, object>() {
                        { "stop_limit_stop_limit_gtc", new Dictionary<string, object>() {
                            { "base_size", this.amountToPrecision(symbol, amount) },
                            { "limit_price", this.priceToPrecision(symbol, price) },
                            { "stop_price", this.priceToPrecision(symbol, stopPrice) },
                            { "stop_direction", stopDirection },
                        } },
                    };
                }
            } else if (isTrue(isTrue(isStopLoss) || isTrue(isTakeProfit)))
            {
                object triggerPrice = null;
                if (isTrue(isStopLoss))
                {
                    if (isTrue(isEqual(stopDirection, null)))
                    {
                        stopDirection = ((bool) isTrue((isEqual(side, "buy")))) ? "STOP_DIRECTION_STOP_UP" : "STOP_DIRECTION_STOP_DOWN";
                    }
                    triggerPrice = this.priceToPrecision(symbol, stopLossPrice);
                } else
                {
                    if (isTrue(isEqual(stopDirection, null)))
                    {
                        stopDirection = ((bool) isTrue((isEqual(side, "buy")))) ? "STOP_DIRECTION_STOP_DOWN" : "STOP_DIRECTION_STOP_UP";
                    }
                    triggerPrice = this.priceToPrecision(symbol, takeProfitPrice);
                }
                ((Dictionary<string, object>)request)["order_configuration"] = new Dictionary<string, object>() {
                    { "stop_limit_stop_limit_gtc", new Dictionary<string, object>() {
                        { "base_size", this.amountToPrecision(symbol, amount) },
                        { "limit_price", this.priceToPrecision(symbol, price) },
                        { "stop_price", triggerPrice },
                        { "stop_direction", stopDirection },
                    } },
                };
            } else
            {
                if (isTrue(isTrue((isEqual(timeInForce, "GTD"))) || isTrue((!isEqual(endTime, null)))))
                {
                    if (isTrue(isEqual(endTime, null)))
                    {
                        throw new ExchangeError ((string)add(this.id, " createOrder() requires an end_time parameter for a GTD order")) ;
                    }
                    ((Dictionary<string, object>)request)["order_configuration"] = new Dictionary<string, object>() {
                        { "limit_limit_gtd", new Dictionary<string, object>() {
                            { "base_size", this.amountToPrecision(symbol, amount) },
                            { "limit_price", this.priceToPrecision(symbol, price) },
                            { "end_time", endTime },
                            { "post_only", postOnly },
                        } },
                    };
                } else
                {
                    ((Dictionary<string, object>)request)["order_configuration"] = new Dictionary<string, object>() {
                        { "limit_limit_gtc", new Dictionary<string, object>() {
                            { "base_size", this.amountToPrecision(symbol, amount) },
                            { "limit_price", this.priceToPrecision(symbol, price) },
                            { "post_only", postOnly },
                        } },
                    };
                }
            }
        } else
        {
            if (isTrue(isTrue(isTrue(isStop) || isTrue(isStopLoss)) || isTrue(isTakeProfit)))
            {
                throw new NotSupported ((string)add(this.id, " createOrder() only stop limit orders are supported")) ;
            }
            if (isTrue(isEqual(side, "buy")))
            {
                object createMarketBuyOrderRequiresPrice = this.safeValue(this.options, "createMarketBuyOrderRequiresPrice", true);
                object total = null;
                if (isTrue(createMarketBuyOrderRequiresPrice))
                {
                    if (isTrue(isEqual(price, null)))
                    {
                        throw new InvalidOrder ((string)add(this.id, " createOrder() requires a price argument for market buy orders on spot markets to calculate the total amount to spend (amount * price), alternatively set the createMarketBuyOrderRequiresPrice option to false and pass in the cost to spend into the amount parameter")) ;
                    } else
                    {
                        object amountString = this.numberToString(amount);
                        object priceString = this.numberToString(price);
                        object cost = this.parseNumber(Precise.stringMul(amountString, priceString));
                        total = this.priceToPrecision(symbol, cost);
                    }
                } else
                {
                    total = this.priceToPrecision(symbol, amount);
                }
                ((Dictionary<string, object>)request)["order_configuration"] = new Dictionary<string, object>() {
                    { "market_market_ioc", new Dictionary<string, object>() {
                        { "quote_size", total },
                    } },
                };
            } else
            {
                ((Dictionary<string, object>)request)["order_configuration"] = new Dictionary<string, object>() {
                    { "market_market_ioc", new Dictionary<string, object>() {
                        { "base_size", this.amountToPrecision(symbol, amount) },
                    } },
                };
            }
        }
        parameters = this.omit(parameters, new List<object>() {"timeInForce", "triggerPrice", "stopLossPrice", "takeProfitPrice", "stopPrice", "stop_price", "stopDirection", "stop_direction", "clientOrderId", "postOnly", "post_only", "end_time"});
        object response = await this.v3PrivatePostBrokerageOrders(this.extend(request, parameters));
        //
        //     {
        //         "success": true,
        //         "failure_reason": "UNKNOWN_FAILURE_REASON",
        //         "order_id": "52cfe5e2-0b29-4c19-a245-a6a773de5030",
        //         "success_response": {
        //             "order_id": "52cfe5e2-0b29-4c19-a245-a6a773de5030",
        //             "product_id": "LTC-BTC",
        //             "side": "SELL",
        //             "client_order_id": "4d760580-6fca-4094-a70b-ebcca8626288"
        //         },
        //         "order_configuration": null
        //     }
        //
        object success = this.safeValue(response, "success");
        if (isTrue(!isEqual(success, true)))
        {
            throw new BadRequest ((string)add(this.id, " createOrder() has failed, check your arguments and parameters")) ;
        }
        object data = this.safeValue(response, "success_response", new Dictionary<string, object>() {});
        return this.parseOrder(data, market);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // createOrder
        //
        //     {
        //         "order_id": "52cfe5e2-0b29-4c19-a245-a6a773de5030",
        //         "product_id": "LTC-BTC",
        //         "side": "SELL",
        //         "client_order_id": "4d760580-6fca-4094-a70b-ebcca8626288"
        //     }
        //
        // cancelOrder, cancelOrders
        //
        //     {
        //         "success": true,
        //         "failure_reason": "UNKNOWN_CANCEL_FAILURE_REASON",
        //         "order_id": "bb8851a3-4fda-4a2c-aa06-9048db0e0f0d"
        //     }
        //
        // fetchOrder, fetchOrders, fetchOpenOrders, fetchClosedOrders, fetchCanceledOrders
        //
        //     {
        //         "order_id": "9bc1eb3b-5b46-4b71-9628-ae2ed0cca75b",
        //         "product_id": "LTC-BTC",
        //         "user_id": "1111111-1111-1111-1111-111111111111",
        //         "order_configuration": {
        //             "limit_limit_gtc": {
        //                 "base_size": "0.2",
        //                 "limit_price": "0.006",
        //                 "post_only": false
        //             }
        //         },
        //         "side": "SELL",
        //         "client_order_id": "e5fe8482-05bb-428f-ad4d-dbc8ce39239c",
        //         "status": "OPEN",
        //         "time_in_force": "GOOD_UNTIL_CANCELLED",
        //         "created_time": "2023-01-16T23:37:23.947030Z",
        //         "completion_percentage": "0",
        //         "filled_size": "0",
        //         "average_filled_price": "0",
        //         "fee": "",
        //         "number_of_fills": "0",
        //         "filled_value": "0",
        //         "pending_cancel": false,
        //         "size_in_quote": false,
        //         "total_fees": "0",
        //         "size_inclusive_of_fees": false,
        //         "total_value_after_fees": "0",
        //         "trigger_status": "INVALID_ORDER_TYPE",
        //         "order_type": "LIMIT",
        //         "reject_reason": "REJECT_REASON_UNSPECIFIED",
        //         "settled": false,
        //         "product_type": "SPOT",
        //         "reject_message": "",
        //         "cancel_message": ""
        //     }
        //
        object marketId = this.safeString(order, "product_id");
        object symbol = this.safeSymbol(marketId, market, "-");
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object orderConfiguration = this.safeValue(order, "order_configuration", new Dictionary<string, object>() {});
        object limitGTC = this.safeValue(orderConfiguration, "limit_limit_gtc", new Dictionary<string, object>() {});
        object limitGTD = this.safeValue(orderConfiguration, "limit_limit_gtd", new Dictionary<string, object>() {});
        object stopLimitGTC = this.safeValue(orderConfiguration, "stop_limit_stop_limit_gtc", new Dictionary<string, object>() {});
        object stopLimitGTD = this.safeValue(orderConfiguration, "stop_limit_stop_limit_gtd", new Dictionary<string, object>() {});
        object marketIOC = this.safeValue(orderConfiguration, "market_market_ioc", new Dictionary<string, object>() {});
        object isLimit = (isTrue((!isEqual(limitGTC, null))) || isTrue((!isEqual(limitGTD, null))));
        object isStop = (isTrue((!isEqual(stopLimitGTC, null))) || isTrue((!isEqual(stopLimitGTD, null))));
        object price = null;
        object amount = null;
        object postOnly = null;
        object triggerPrice = null;
        if (isTrue(isLimit))
        {
            object target = ((bool) isTrue((!isEqual(limitGTC, null)))) ? limitGTC : limitGTD;
            price = this.safeString(target, "limit_price");
            amount = this.safeString(target, "base_size");
            postOnly = this.safeValue(target, "post_only");
        } else if (isTrue(isStop))
        {
            object stopTarget = ((bool) isTrue((!isEqual(stopLimitGTC, null)))) ? stopLimitGTC : stopLimitGTD;
            price = this.safeString(stopTarget, "limit_price");
            amount = this.safeString(stopTarget, "base_size");
            postOnly = this.safeValue(stopTarget, "post_only");
            triggerPrice = this.safeString(stopTarget, "stop_price");
        } else
        {
            amount = this.safeString(marketIOC, "base_size");
        }
        object datetime = this.safeString(order, "created_time");
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "id", this.safeString(order, "order_id") },
            { "clientOrderId", this.safeString(order, "client_order_id") },
            { "timestamp", this.parse8601(datetime) },
            { "datetime", datetime },
            { "lastTradeTimestamp", null },
            { "symbol", symbol },
            { "type", this.parseOrderType(this.safeString(order, "order_type")) },
            { "timeInForce", this.parseTimeInForce(this.safeString(order, "time_in_force")) },
            { "postOnly", postOnly },
            { "side", this.safeStringLower(order, "side") },
            { "price", price },
            { "stopPrice", triggerPrice },
            { "triggerPrice", triggerPrice },
            { "amount", amount },
            { "filled", this.safeString(order, "filled_size") },
            { "remaining", null },
            { "cost", null },
            { "average", this.safeString(order, "average_filled_price") },
            { "status", this.parseOrderStatus(this.safeString(order, "status")) },
            { "fee", new Dictionary<string, object>() {
                { "cost", this.safeString(order, "total_fees") },
                { "currency", null },
            } },
            { "trades", null },
        }, market);
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "OPEN", "open" },
            { "FILLED", "closed" },
            { "CANCELLED", "canceled" },
            { "EXPIRED", "canceled" },
            { "FAILED", "canceled" },
            { "UNKNOWN_ORDER_STATUS", null },
        };
        return this.safeString(statuses, status, status);
    }

    public virtual object parseOrderType(object type)
    {
        if (isTrue(isEqual(type, "UNKNOWN_ORDER_TYPE")))
        {
            return null;
        }
        object types = new Dictionary<string, object>() {
            { "MARKET", "market" },
            { "LIMIT", "limit" },
            { "STOP", "limit" },
            { "STOP_LIMIT", "limit" },
        };
        return this.safeString(types, type, type);
    }

    public virtual object parseTimeInForce(object timeInForce)
    {
        object timeInForces = new Dictionary<string, object>() {
            { "GOOD_UNTIL_CANCELLED", "GTC" },
            { "GOOD_UNTIL_DATE_TIME", "GTD" },
            { "IMMEDIATE_OR_CANCEL", "IOC" },
            { "FILL_OR_KILL", "FOK" },
            { "UNKNOWN_TIME_IN_FORCE", null },
        };
        return this.safeString(timeInForces, timeInForce, timeInForce);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbase#cancelOrder
        * @description cancels an open order
        * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_cancelorders
        * @param {string} id order id
        * @param {string|undefined} symbol not used by coinbase cancelOrder()
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object orders = await this.cancelOrders(new List<object>() {id}, symbol, parameters);
        return this.safeValue(orders, 0, new Dictionary<string, object>() {});
    }

    public async virtual Task<object> cancelOrders(object ids, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbase#cancelOrders
        * @description cancel multiple orders
        * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_cancelorders
        * @param {[string]} ids order ids
        * @param {string|undefined} symbol not used by coinbase cancelOrders()
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {object} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object request = new Dictionary<string, object>() {
            { "order_ids", ids },
        };
        object response = await this.v3PrivatePostBrokerageOrdersBatchCancel(this.extend(request, parameters));
        //
        //     {
        //         "results": [
        //             {
        //                 "success": true,
        //                 "failure_reason": "UNKNOWN_CANCEL_FAILURE_REASON",
        //                 "order_id": "bb8851a3-4fda-4a2c-aa06-9048db0e0f0d"
        //             }
        //         ]
        //     }
        //
        object orders = this.safeValue(response, "results", new List<object>() {});
        for (object i = 0; isLessThan(i, getArrayLength(orders)); postFixIncrement(ref i))
        {
            object success = this.safeValue(getValue(orders, i), "success");
            if (isTrue(!isEqual(success, true)))
            {
                throw new BadRequest ((string)add(this.id, " cancelOrders() has failed, check your arguments and parameters")) ;
            }
        }
        return this.parseOrders(orders, market);
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbase#fetchOrder
        * @description fetches information on an order made by the user
        * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_gethistoricalorder
        * @param {string} id the order id
        * @param {string|undefined} symbol unified market symbol that the order was made in
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object request = new Dictionary<string, object>() {
            { "order_id", id },
        };
        object response = await this.v3PrivateGetBrokerageOrdersHistoricalOrderId(this.extend(request, parameters));
        //
        //     {
        //         "order": {
        //             "order_id": "9bc1eb3b-5b46-4b71-9628-ae2ed0cca75b",
        //             "product_id": "LTC-BTC",
        //             "user_id": "1111111-1111-1111-1111-111111111111",
        //             "order_configuration": {
        //                 "limit_limit_gtc": {
        //                     "base_size": "0.2",
        //                     "limit_price": "0.006",
        //                     "post_only": false
        //                 }
        //             },
        //             "side": "SELL",
        //             "client_order_id": "e5fe8482-05bb-428f-ad4d-dbc8ce39239c",
        //             "status": "OPEN",
        //             "time_in_force": "GOOD_UNTIL_CANCELLED",
        //             "created_time": "2023-01-16T23:37:23.947030Z",
        //             "completion_percentage": "0",
        //             "filled_size": "0",
        //             "average_filled_price": "0",
        //             "fee": "",
        //             "number_of_fills": "0",
        //             "filled_value": "0",
        //             "pending_cancel": false,
        //             "size_in_quote": false,
        //             "total_fees": "0",
        //             "size_inclusive_of_fees": false,
        //             "total_value_after_fees": "0",
        //             "trigger_status": "INVALID_ORDER_TYPE",
        //             "order_type": "LIMIT",
        //             "reject_reason": "REJECT_REASON_UNSPECIFIED",
        //             "settled": false,
        //             "product_type": "SPOT",
        //             "reject_message": "",
        //             "cancel_message": ""
        //         }
        //     }
        //
        object order = this.safeValue(response, "order", new Dictionary<string, object>() {});
        return this.parseOrder(order, market);
    }

    public async override Task<object> fetchOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbase#fetchOrders
        * @description fetches information on multiple orders made by the user
        * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_gethistoricalorders
        * @param {string|undefined} symbol unified market symbol that the orders were made in
        * @param {int|undefined} since the earliest time in ms to fetch orders
        * @param {int|undefined} limit the maximum number of order structures to retrieve
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        limit ??= 100;
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(market, null)))
        {
            ((Dictionary<string, object>)request)["product_id"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((Dictionary<string, object>)request)["limit"] = limit;
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((Dictionary<string, object>)request)["start_date"] = this.parse8601(since);
        }
        object response = await this.v3PrivateGetBrokerageOrdersHistoricalBatch(this.extend(request, parameters));
        //
        //     {
        //         "orders": [
        //             {
        //                 "order_id": "813a53c5-3e39-47bb-863d-2faf685d22d8",
        //                 "product_id": "BTC-USDT",
        //                 "user_id": "1111111-1111-1111-1111-111111111111",
        //                 "order_configuration": {
        //                     "market_market_ioc": {
        //                         "quote_size": "6.36"
        //                     }
        //                 },
        //                 "side": "BUY",
        //                 "client_order_id": "18eb9947-db49-4874-8e7b-39b8fe5f4317",
        //                 "status": "FILLED",
        //                 "time_in_force": "IMMEDIATE_OR_CANCEL",
        //                 "created_time": "2023-01-18T01:37:37.975552Z",
        //                 "completion_percentage": "100",
        //                 "filled_size": "0.000297920684505",
        //                 "average_filled_price": "21220.6399999973697697",
        //                 "fee": "",
        //                 "number_of_fills": "2",
        //                 "filled_value": "6.3220675944333996",
        //                 "pending_cancel": false,
        //                 "size_in_quote": true,
        //                 "total_fees": "0.0379324055666004",
        //                 "size_inclusive_of_fees": true,
        //                 "total_value_after_fees": "6.36",
        //                 "trigger_status": "INVALID_ORDER_TYPE",
        //                 "order_type": "MARKET",
        //                 "reject_reason": "REJECT_REASON_UNSPECIFIED",
        //                 "settled": true,
        //                 "product_type": "SPOT",
        //                 "reject_message": "",
        //                 "cancel_message": "Internal error"
        //             },
        //         ],
        //         "sequence": "0",
        //         "has_next": false,
        //         "cursor": ""
        //     }
        //
        object orders = this.safeValue(response, "orders", new List<object>() {});
        return this.parseOrders(orders, market, since, limit);
    }

    public async virtual Task<object> fetchOrdersByStatus(object status, object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object request = new Dictionary<string, object>() {
            { "order_status", status },
        };
        if (isTrue(!isEqual(market, null)))
        {
            ((Dictionary<string, object>)request)["product_id"] = getValue(market, "id");
        }
        if (isTrue(isEqual(limit, null)))
        {
            limit = 100;
        }
        ((Dictionary<string, object>)request)["limit"] = limit;
        if (isTrue(!isEqual(since, null)))
        {
            ((Dictionary<string, object>)request)["start_date"] = this.parse8601(since);
        }
        object response = await this.v3PrivateGetBrokerageOrdersHistoricalBatch(this.extend(request, parameters));
        //
        //     {
        //         "orders": [
        //             {
        //                 "order_id": "813a53c5-3e39-47bb-863d-2faf685d22d8",
        //                 "product_id": "BTC-USDT",
        //                 "user_id": "1111111-1111-1111-1111-111111111111",
        //                 "order_configuration": {
        //                     "market_market_ioc": {
        //                         "quote_size": "6.36"
        //                     }
        //                 },
        //                 "side": "BUY",
        //                 "client_order_id": "18eb9947-db49-4874-8e7b-39b8fe5f4317",
        //                 "status": "FILLED",
        //                 "time_in_force": "IMMEDIATE_OR_CANCEL",
        //                 "created_time": "2023-01-18T01:37:37.975552Z",
        //                 "completion_percentage": "100",
        //                 "filled_size": "0.000297920684505",
        //                 "average_filled_price": "21220.6399999973697697",
        //                 "fee": "",
        //                 "number_of_fills": "2",
        //                 "filled_value": "6.3220675944333996",
        //                 "pending_cancel": false,
        //                 "size_in_quote": true,
        //                 "total_fees": "0.0379324055666004",
        //                 "size_inclusive_of_fees": true,
        //                 "total_value_after_fees": "6.36",
        //                 "trigger_status": "INVALID_ORDER_TYPE",
        //                 "order_type": "MARKET",
        //                 "reject_reason": "REJECT_REASON_UNSPECIFIED",
        //                 "settled": true,
        //                 "product_type": "SPOT",
        //                 "reject_message": "",
        //                 "cancel_message": "Internal error"
        //             },
        //         ],
        //         "sequence": "0",
        //         "has_next": false,
        //         "cursor": ""
        //     }
        //
        object orders = this.safeValue(response, "orders", new List<object>() {});
        return this.parseOrders(orders, market, since, limit);
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbase#fetchOpenOrders
        * @description fetches information on all currently open orders
        * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_gethistoricalorders
        * @param {string|undefined} symbol unified market symbol of the orders
        * @param {int|undefined} since timestamp in ms of the earliest order, default is undefined
        * @param {int|undefined} limit the maximum number of open order structures to retrieve
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        return await this.fetchOrdersByStatus("OPEN", symbol, since, limit, parameters);
    }

    public async override Task<object> fetchClosedOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbase#fetchClosedOrders
        * @description fetches information on multiple closed orders made by the user
        * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_gethistoricalorders
        * @param {string|undefined} symbol unified market symbol of the orders
        * @param {int|undefined} since timestamp in ms of the earliest order, default is undefined
        * @param {int|undefined} limit the maximum number of closed order structures to retrieve
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        return await this.fetchOrdersByStatus("FILLED", symbol, since, limit, parameters);
    }

    public async virtual Task<object> fetchCanceledOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbase#fetchCanceledOrders
        * @description fetches information on multiple canceled orders made by the user
        * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_gethistoricalorders
        * @param {string} symbol unified market symbol of the orders
        * @param {int|undefined} since timestamp in ms of the earliest order, default is undefined
        * @param {int|undefined} limit the maximum number of canceled order structures to retrieve
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {object} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        return await this.fetchOrdersByStatus("CANCELLED", symbol, since, limit, parameters);
    }

    public async override Task<object> fetchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbase#fetchOHLCV
        * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_getcandles
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe the length of time each candle represents
        * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
        * @param {int|undefined} limit the maximum amount of candles to fetch, not used by coinbase
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object end = ((object)this.seconds()).ToString();
        object request = new Dictionary<string, object>() {
            { "product_id", getValue(market, "id") },
            { "granularity", this.safeString(this.timeframes, timeframe, timeframe) },
            { "end", end },
        };
        if (isTrue(!isEqual(since, null)))
        {
            object sinceString = ((object)since).ToString();
            object timeframeToSeconds = Precise.stringDiv(sinceString, "1000");
            ((Dictionary<string, object>)request)["start"] = this.decimalToPrecision(timeframeToSeconds, TRUNCATE, 0, DECIMAL_PLACES);
        } else
        {
            ((Dictionary<string, object>)request)["start"] = Precise.stringSub(end, "18000"); // default to 5h in seconds, max 300 candles
        }
        object response = await this.v3PrivateGetBrokerageProductsProductIdCandles(this.extend(request, parameters));
        //
        //     {
        //         "candles": [
        //             {
        //                 "start": "1673391780",
        //                 "low": "17414.36",
        //                 "high": "17417.99",
        //                 "open": "17417.74",
        //                 "close": "17417.38",
        //                 "volume": "1.87780853"
        //             },
        //         ]
        //     }
        //
        object candles = this.safeValue(response, "candles", new List<object>() {});
        return this.parseOHLCVs(candles, market, timeframe, since, limit);
    }

    public override object parseOHLCV(object ohlcv, object market = null)
    {
        //
        //     [
        //         {
        //             "start": "1673391780",
        //             "low": "17414.36",
        //             "high": "17417.99",
        //             "open": "17417.74",
        //             "close": "17417.38",
        //             "volume": "1.87780853"
        //         },
        //     ]
        //
        return new List<object> {this.safeTimestamp(ohlcv, "start"), this.safeNumber(ohlcv, "open"), this.safeNumber(ohlcv, "high"), this.safeNumber(ohlcv, "low"), this.safeNumber(ohlcv, "close"), this.safeNumber(ohlcv, "volume")};
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbase#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_getmarkettrades
        * @param {string} symbol unified market symbol of the trades
        * @param {int|undefined} since not used by coinbase fetchTrades
        * @param {int|undefined} limit the maximum number of trade structures to fetch
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "product_id", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((Dictionary<string, object>)request)["limit"] = limit;
        }
        object response = await this.v3PrivateGetBrokerageProductsProductIdTicker(this.extend(request, parameters));
        //
        //     {
        //         "trades": [
        //             {
        //                 "trade_id": "10092327",
        //                 "product_id": "BTC-USDT",
        //                 "price": "17488.12",
        //                 "size": "0.0000623",
        //                 "time": "2023-01-11T00:52:37.557001Z",
        //                 "side": "BUY",
        //                 "bid": "",
        //                 "ask": ""
        //             },
        //         ]
        //     }
        //
        object trades = this.safeValue(response, "trades", new List<object>() {});
        return this.parseTrades(trades, market, since, limit);
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbase#fetchMyTrades
        * @description fetch all trades made by the user
        * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_getfills
        * @param {string} symbol unified market symbol of the trades
        * @param {int|undefined} since timestamp in ms of the earliest order, default is undefined
        * @param {int|undefined} limit the maximum number of trade structures to fetch
        * @param {object} params extra parameters specific to the coinbase api endpoint
        * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(market, null)))
        {
            ((Dictionary<string, object>)request)["product_id"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((Dictionary<string, object>)request)["limit"] = limit;
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((Dictionary<string, object>)request)["start_sequence_timestamp"] = this.iso8601(since);
        }
        object response = await this.v3PrivateGetBrokerageOrdersHistoricalFills(this.extend(request, parameters));
        //
        //     {
        //         "fills": [
        //             {
        //                 "entry_id": "b88b82cc89e326a2778874795102cbafd08dd979a2a7a3c69603fc4c23c2e010",
        //                 "trade_id": "cdc39e45-bbd3-44ec-bf02-61742dfb16a1",
        //                 "order_id": "813a53c5-3e39-47bb-863d-2faf685d22d8",
        //                 "trade_time": "2023-01-18T01:37:38.091377090Z",
        //                 "trade_type": "FILL",
        //                 "price": "21220.64",
        //                 "size": "0.0046830664333996",
        //                 "commission": "0.0000280983986004",
        //                 "product_id": "BTC-USDT",
        //                 "sequence_timestamp": "2023-01-18T01:37:38.092520Z",
        //                 "liquidity_indicator": "UNKNOWN_LIQUIDITY_INDICATOR",
        //                 "size_in_quote": true,
        //                 "user_id": "1111111-1111-1111-1111-111111111111",
        //                 "side": "BUY"
        //             },
        //         ],
        //         "cursor": ""
        //     }
        //
        object trades = this.safeValue(response, "fills", new List<object>() {});
        return this.parseTrades(trades, market, since, limit);
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= new List<object>();
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object version = getValue(api, 0);
        object signed = isEqual(getValue(api, 1), "private");
        object pathPart = ((bool) isTrue((isEqual(version, "v3")))) ? "api/v3" : "v2";
        object fullPath = add(add(add("/", pathPart), "/"), this.implodeParams(path, parameters));
        object query = this.omit(parameters, this.extractParams(path));
        object savedPath = fullPath;
        if (isTrue(isEqual(method, "GET")))
        {
            if (isTrue(getArrayLength(new List<string>(((Dictionary<string,object>)query).Keys))))
            {
                fullPath = add(fullPath, add("?", this.urlencode(query)));
            }
        }
        object url = add(getValue(getValue(this.urls, "api"), "rest"), fullPath);
        if (isTrue(signed))
        {
            object authorization = this.safeString(this.headers, "Authorization");
            if (isTrue(!isEqual(authorization, null)))
            {
                headers = new Dictionary<string, object>() {
                    { "Authorization", authorization },
                    { "Content-Type", "application/json" },
                };
            } else if (isTrue(this.token))
            {
                headers = new Dictionary<string, object>() {
                    { "Authorization", add("Bearer ", this.token) },
                    { "Content-Type", "application/json" },
                };
            } else
            {
                this.checkRequiredCredentials();
                object nonce = ((object)this.nonce()).ToString();
                object payload = "";
                if (isTrue(!isEqual(method, "GET")))
                {
                    if (isTrue(getArrayLength(new List<string>(((Dictionary<string,object>)query).Keys))))
                    {
                        body = this.json(query);
                        payload = body;
                    }
                }
                object auth = null;
                if (isTrue(isEqual(version, "v3")))
                {
                    auth = add(add(add(nonce, method), savedPath), payload);
                } else
                {
                    auth = add(add(add(nonce, method), fullPath), payload);
                }
                object signature = this.hmac(this.encode(auth), this.encode(this.secret), sha256);
                headers = new Dictionary<string, object>() {
                    { "CB-ACCESS-KEY", this.apiKey },
                    { "CB-ACCESS-SIGN", signature },
                    { "CB-ACCESS-TIMESTAMP", nonce },
                    { "Content-Type", "application/json" },
                };
            }
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object code, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;  // fallback to default error handler
        }
        object feedback = add(add(this.id, " "), body);
        //
        //    {"error": "invalid_request", "error_description": "The request is missing a required parameter, includes an unsupported parameter value, or is otherwise malformed."}
        //
        // or
        //
        //    {
        //      "errors": [
        //        {
        //          "id": "not_found",
        //          "message": "Not found"
        //        }
        //      ]
        //    }
        //
        object errorCode = this.safeString(response, "error");
        if (isTrue(!isEqual(errorCode, null)))
        {
            object errorMessage = this.safeString(response, "error_description");
            this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), errorCode, feedback);
            this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), errorMessage, feedback);
            throw new ExchangeError ((string)feedback) ;
        }
        object errors = this.safeValue(response, "errors");
        if (isTrue(!isEqual(errors, null)))
        {
            if (isTrue((errors.GetType().IsGenericType && errors.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>)))))
            {
                object numErrors = getArrayLength(errors);
                if (isTrue(isGreaterThan(numErrors, 0)))
                {
                    errorCode = this.safeString(getValue(errors, 0), "id");
                    object errorMessage = this.safeString(getValue(errors, 0), "message");
                    if (isTrue(!isEqual(errorCode, null)))
                    {
                        this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), errorCode, feedback);
                        this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), errorMessage, feedback);
                        throw new ExchangeError ((string)feedback) ;
                    }
                }
            }
        }
        object advancedTrade = getValue(this.options, "advanced");
        object data = this.safeValue(response, "data");
        if (isTrue(isTrue((isEqual(data, null))) && isTrue((!isTrue(advancedTrade)))))
        {
            throw new ExchangeError ((string)add(add(this.id, " failed due to a malformed response "), this.json(response))) ;
        }
        return null;
    }
}
