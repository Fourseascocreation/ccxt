using ccxt;
namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

partial class coinone : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "coinone" },
            { "name", "CoinOne" },
            { "countries", new List<object>() {"KR"} },
            { "rateLimit", 667 },
            { "version", "v2" },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelOrder", true },
                { "createMarketOrder", false },
                { "createOrder", true },
                { "createReduceOnlyOrder", false },
                { "createStopLimitOrder", false },
                { "createStopMarketOrder", false },
                { "createStopOrder", false },
                { "fetchBalance", true },
                { "fetchBorrowRate", false },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchBorrowRates", false },
                { "fetchBorrowRatesPerSymbol", false },
                { "fetchClosedOrders", false },
                { "fetchDepositAddresses", true },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchLeverage", false },
                { "fetchLeverageTiers", false },
                { "fetchMarginMode", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", true },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchPosition", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTrades", true },
                { "reduceMargin", false },
                { "setLeverage", false },
                { "setMarginMode", false },
                { "setPositionMode", false },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/1294454/38003300-adc12fba-323f-11e8-8525-725f53c4a659.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "rest", "https://api.coinone.co.kr" },
                } },
                { "www", "https://coinone.co.kr" },
                { "doc", "https://doc.coinone.co.kr" },
            } },
            { "requiredCredentials", new Dictionary<string, object>() {
                { "apiKey", true },
                { "secret", true },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new List<object>() {"orderbook/", "trades/", "ticker/"} },
                } },
                { "private", new Dictionary<string, object>() {
                    { "post", new List<object>() {"account/deposit_address/", "account/btc_deposit_address/", "account/balance/", "account/daily_balance/", "account/user_info/", "account/virtual_account/", "order/cancel_all/", "order/cancel/", "order/limit_buy/", "order/limit_sell/", "order/complete_orders/", "order/limit_orders/", "order/order_info/", "transaction/auth_number/", "transaction/history/", "transaction/krw/history/", "transaction/btc/", "transaction/coin/"} },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "tierBased", false },
                    { "percentage", true },
                    { "taker", 0.002 },
                    { "maker", 0.002 },
                } },
            } },
            { "precisionMode", TICK_SIZE },
            { "exceptions", new Dictionary<string, object>() {
                { "405", typeof(OnMaintenance) },
                { "104", typeof(OrderNotFound) },
                { "108", typeof(BadSymbol) },
                { "107", typeof(BadRequest) },
            } },
            { "commonCurrencies", new Dictionary<string, object>() {
                { "SOC", "Soda Coin" },
            } },
        });
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name coinone#fetchMarkets
        * @description retrieves data on all markets for coinone
        * @param {object} params extra parameters specific to the exchange api endpoint
        * @returns {[object]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "currency", "all" },
        };
        object response = await this.publicGetTicker(request);
        //
        //    {
        //        "result": "success",
        //        "errorCode": "0",
        //        "timestamp": "1643676668",
        //        "xec": {
        //          "currency": "xec",
        //          "first": "0.0914",
        //          "low": "0.0894",
        //          "high": "0.096",
        //          "last": "0.0937",
        //          "volume": "1673283662.9797",
        //          "yesterday_first": "0.0929",
        //          "yesterday_low": "0.0913",
        //          "yesterday_high": "0.0978",
        //          "yesterday_last": "0.0913",
        //          "yesterday_volume": "1167285865.4571"
        //        },
        //        ...
        //    }
        //
        object result = new List<object>() {};
        object quoteId = "krw";
        object quote = this.safeCurrencyCode(quoteId);
        object baseIds = new List<object>(((Dictionary<string,object>)response).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(baseIds)); postFixIncrement(ref i))
        {
            object baseId = getValue(baseIds, i);
            object ticker = this.safeValue(response, baseId, new Dictionary<string, object>() {});
            object currency = this.safeValue(ticker, "currency");
            if (isTrue(isEqual(currency, null)))
            {

            }
            object bs = this.safeCurrencyCode(baseId);
            ((List<object>)result).Add(new Dictionary<string, object>() {
                { "id", baseId },
                { "symbol", add(add(bs, "/"), quote) },
                { "base", bs },
                { "quote", quote },
                { "settle", null },
                { "baseId", baseId },
                { "quoteId", quoteId },
                { "settleId", null },
                { "type", "spot" },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "active", null },
                { "contract", false },
                { "linear", null },
                { "inverse", null },
                { "contractSize", null },
                { "expiry", null },
                { "expiryDatetime", null },
                { "strike", null },
                { "optionType", null },
                { "precision", new Dictionary<string, object>() {
                    { "amount", this.parseNumber("1e-4") },
                    { "price", this.parseNumber("1e-4") },
                    { "cost", this.parseNumber("1e-8") },
                } },
                { "limits", new Dictionary<string, object>() {
                    { "leverage", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "amount", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "price", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "cost", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                } },
                { "info", ticker },
            });
        }
        return result;
    }

    public virtual object parseBalance(object response)
    {
        object result = new Dictionary<string, object>() {
            { "info", response },
        };
        object balances = this.omit(response, new List<object>() {"errorCode", "result", "normalWallets"});
        object currencyIds = new List<object>(((Dictionary<string,object>)balances).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(currencyIds)); postFixIncrement(ref i))
        {
            object currencyId = getValue(currencyIds, i);
            object balance = getValue(balances, currencyId);
            object code = this.safeCurrencyCode(currencyId);
            object account = this.account();
            ((Dictionary<string, object>)account)["free"] = this.safeString(balance, "avail");
            ((Dictionary<string, object>)account)["total"] = this.safeString(balance, "balance");
            ((Dictionary<string, object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name coinone#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @param {object} params extra parameters specific to the coinone api endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privatePostAccountBalance(parameters);
        return this.parseBalance(response);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinone#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int|undefined} limit the maximum amount of order book entries to return
        * @param {object} params extra parameters specific to the coinone api endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(market, "id") },
            { "format", "json" },
        };
        object response = await this.publicGetOrderbook(this.extend(request, parameters));
        object timestamp = this.safeTimestamp(response, "timestamp");
        return this.parseOrderBook(response, getValue(market, "symbol"), timestamp, "bid", "ask", "price", "qty");
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name coinone#fetchTickers
        * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
        * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} params extra parameters specific to the coinone api endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object request = new Dictionary<string, object>() {
            { "currency", "all" },
            { "format", "json" },
        };
        object response = await this.publicGetTicker(this.extend(request, parameters));
        object result = new Dictionary<string, object>() {};
        object ids = new List<object>(((Dictionary<string,object>)response).Keys);
        object timestamp = this.safeTimestamp(response, "timestamp");
        for (object i = 0; isLessThan(i, getArrayLength(ids)); postFixIncrement(ref i))
        {
            object id = getValue(ids, i);
            object market = this.safeMarket(id);
            object symbol = getValue(market, "symbol");
            object ticker = getValue(response, id);
            ((Dictionary<string, object>)result)[(string)symbol] = this.parseTicker(ticker, market);
            ((Dictionary<string, object>)getValue(result, symbol))["timestamp"] = timestamp;
        }
        return this.filterByArray(result, "symbol", symbols);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name coinone#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} params extra parameters specific to the coinone api endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(market, "id") },
            { "format", "json" },
        };
        object response = await this.publicGetTicker(this.extend(request, parameters));
        return this.parseTicker(response, market);
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        //     {
        //         "currency":"xec",
        //         "first":"0.1069",
        //         "low":"0.09",
        //         "high":"0.1069",
        //         "last":"0.0911",
        //         "volume":"4591217267.4974",
        //         "yesterday_first":"0.1128",
        //         "yesterday_low":"0.1035",
        //         "yesterday_high":"0.1167",
        //         "yesterday_last":"0.1069",
        //         "yesterday_volume":"4014832231.5102"
        //     }
        //
        object timestamp = this.safeTimestamp(ticker, "timestamp");
        object open = this.safeString(ticker, "first");
        object last = this.safeString(ticker, "last");
        object previousClose = this.safeString(ticker, "yesterday_last");
        object symbol = this.safeSymbol(null, market);
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "high") },
            { "low", this.safeString(ticker, "low") },
            { "bid", null },
            { "bidVolume", null },
            { "ask", null },
            { "askVolume", null },
            { "vwap", null },
            { "open", open },
            { "close", last },
            { "last", last },
            { "previousClose", previousClose },
            { "change", null },
            { "percentage", null },
            { "average", null },
            { "baseVolume", this.safeString(ticker, "volume") },
            { "quoteVolume", null },
            { "info", ticker },
        }, market);
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // fetchTrades (public)
        //
        //     {
        //         "timestamp": "1416893212",
        //         "price": "420000.0",
        //         "qty": "0.1",
        //         "is_ask": "1"
        //     }
        //
        // fetchMyTrades (private)
        //
        //     {
        //         "timestamp": "1416561032",
        //         "price": "419000.0",
        //         "type": "bid",
        //         "qty": "0.001",
        //         "feeRate": "-0.0015",
        //         "fee": "-0.0000015",
        //         "orderId": "E84A1AC2-8088-4FA0-B093-A3BCDB9B3C85"
        //     }
        //
        object timestamp = this.safeTimestamp(trade, "timestamp");
        market = this.safeMarket(null, market);
        object is_ask = this.safeString(trade, "is_ask");
        object side = this.safeString(trade, "type");
        if (isTrue(!isEqual(is_ask, null)))
        {
            if (isTrue(isEqual(is_ask, "1")))
            {
                side = "sell";
            } else if (isTrue(isEqual(is_ask, "0")))
            {
                side = "buy";
            }
        } else
        {
            if (isTrue(isEqual(side, "ask")))
            {
                side = "sell";
            } else if (isTrue(isEqual(side, "bid")))
            {
                side = "buy";
            }
        }
        object priceString = this.safeString(trade, "price");
        object amountString = this.safeString(trade, "qty");
        object orderId = this.safeString(trade, "orderId");
        object feeCostString = this.safeString(trade, "fee");
        object fee = null;
        if (isTrue(!isEqual(feeCostString, null)))
        {
            feeCostString = Precise.stringAbs(feeCostString);
            object feeRateString = this.safeString(trade, "feeRate");
            feeRateString = Precise.stringAbs(feeRateString);
            object feeCurrencyCode = ((bool) isTrue((isEqual(side, "sell")))) ? getValue(market, "quote") : getValue(market, "base");
            fee = new Dictionary<string, object>() {
                { "cost", feeCostString },
                { "currency", feeCurrencyCode },
                { "rate", feeRateString },
            };
        }
        return this.safeTrade(new Dictionary<string, object>() {
            { "id", this.safeString(trade, "id") },
            { "info", trade },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "order", orderId },
            { "symbol", getValue(market, "symbol") },
            { "type", null },
            { "side", side },
            { "takerOrMaker", null },
            { "price", priceString },
            { "amount", amountString },
            { "cost", null },
            { "fee", fee },
        }, market);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinone#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
        * @param {int|undefined} limit the maximum amount of trades to fetch
        * @param {object} params extra parameters specific to the coinone api endpoint
        * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(market, "id") },
            { "format", "json" },
        };
        object response = await this.publicGetTrades(this.extend(request, parameters));
        //
        //     {
        //         "result": "success",
        //         "errorCode": "0",
        //         "timestamp": "1416895635",
        //         "currency": "btc",
        //         "completeOrders": [
        //             {
        //                 "timestamp": "1416893212",
        //                 "price": "420000.0",
        //                 "qty": "0.1",
        //                 "is_ask": "1"
        //             }
        //         ]
        //     }
        //
        object completeOrders = this.safeValue(response, "completeOrders", new List<object>() {});
        return this.parseTrades(completeOrders, market, since, limit);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name coinone#createOrder
        * @description create a trade order
        * @see https://doc.coinone.co.kr/#tag/Order-V2/operation/v2_order_limit_buy
        * @see https://doc.coinone.co.kr/#tag/Order-V2/operation/v2_order_limit_sell
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type must be 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} params extra parameters specific to the coinone api endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(!isEqual(type, "limit")))
        {
            throw new ExchangeError ((string)add(this.id, " createOrder() allows limit orders only")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "price", price },
            { "currency", getValue(market, "id") },
            { "qty", amount },
        };
        object method = add(add("privatePostOrder", this.capitalize(type)), this.capitalize(side));
        object response = await ((Task<object>)callDynamically(this, method, new object[] { this.extend(request, parameters) }));
        //
        //     {
        //         "result": "success",
        //         "errorCode": "0",
        //         "orderId": "8a82c561-40b4-4cb3-9bc0-9ac9ffc1d63b"
        //     }
        //
        return this.parseOrder(response, market);
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name coinone#fetchOrder
        * @description fetches information on an order made by the user
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} params extra parameters specific to the coinone api endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOrder() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "order_id", id },
            { "currency", getValue(market, "id") },
        };
        object response = await this.privatePostOrderOrderInfo(this.extend(request, parameters));
        //
        //     {
        //         "result": "success",
        //         "errorCode": "0",
        //         "status": "live",
        //         "info": {
        //             "orderId": "32FF744B-D501-423A-8BA1-05BB6BE7814A",
        //             "currency": "BTC",
        //             "type": "bid",
        //             "price": "2922000.0",
        //             "qty": "115.4950",
        //             "remainQty": "45.4950",
        //             "feeRate": "0.0003",
        //             "fee": "0",
        //             "timestamp": "1499340941"
        //         }
        //     }
        //
        object info = this.safeValue(response, "info", new Dictionary<string, object>() {});
        ((Dictionary<string, object>)info)["status"] = this.safeString(info, "status");
        return this.parseOrder(info, market);
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "live", "open" },
            { "partially_filled", "open" },
            { "filled", "closed" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // createOrder
        //
        //     {
        //         "result": "success",
        //         "errorCode": "0",
        //         "orderId": "8a82c561-40b4-4cb3-9bc0-9ac9ffc1d63b"
        //     }
        //
        // fetchOrder
        //
        //     {
        //         "status": "live", // injected in fetchOrder
        //         "orderId": "32FF744B-D501-423A-8BA1-05BB6BE7814A",
        //         "currency": "BTC",
        //         "type": "bid",
        //         "price": "2922000.0",
        //         "qty": "115.4950",
        //         "remainQty": "45.4950",
        //         "feeRate": "0.0003",
        //         "fee": "0",
        //         "timestamp": "1499340941"
        //     }
        //
        // fetchOpenOrders
        //
        //     {
        //         "index": "0",
        //         "orderId": "68665943-1eb5-4e4b-9d76-845fc54f5489",
        //         "timestamp": "1449037367",
        //         "price": "444000.0",
        //         "qty": "0.3456",
        //         "type": "ask",
        //         "feeRate": "-0.0015"
        //     }
        //
        object id = this.safeString(order, "orderId");
        object priceString = this.safeString(order, "price");
        object timestamp = this.safeTimestamp(order, "timestamp");
        object side = this.safeString(order, "type");
        if (isTrue(isEqual(side, "ask")))
        {
            side = "sell";
        } else if (isTrue(isEqual(side, "bid")))
        {
            side = "buy";
        }
        object remainingString = this.safeString(order, "remainQty");
        object amountString = this.safeString(order, "qty");
        object status = this.safeString(order, "status");
        // https://github.com/ccxt/ccxt/pull/7067
        if (isTrue(isEqual(status, "live")))
        {
            if (isTrue(isTrue((!isEqual(remainingString, null))) && isTrue((!isEqual(amountString, null)))))
            {
                object isLessThan = Precise.stringLt(remainingString, amountString);
                if (isTrue(isLessThan))
                {
                    status = "canceled";
                }
            }
        }
        status = this.parseOrderStatus(status);
        object symbol = getValue(market, "symbol");
        object bs = getValue(market, "base");
        object quote = getValue(market, "quote");
        object fee = null;
        object feeCostString = this.safeString(order, "fee");
        if (isTrue(!isEqual(feeCostString, null)))
        {
            object feeCurrencyCode = ((bool) isTrue((isEqual(side, "sell")))) ? quote : bs;
            fee = new Dictionary<string, object>() {
                { "cost", feeCostString },
                { "rate", this.safeString(order, "feeRate") },
                { "currency", feeCurrencyCode },
            };
        }
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "id", id },
            { "clientOrderId", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "symbol", symbol },
            { "type", "limit" },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", side },
            { "price", priceString },
            { "stopPrice", null },
            { "triggerPrice", null },
            { "cost", null },
            { "average", null },
            { "amount", amountString },
            { "filled", null },
            { "remaining", remainingString },
            { "status", status },
            { "fee", fee },
            { "trades", null },
        }, market);
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinone#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @param {string} symbol unified market symbol
        * @param {int|undefined} since the earliest time in ms to fetch open orders for
        * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
        * @param {object} params extra parameters specific to the coinone api endpoint
        * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        // The returned amount might not be same as the ordered amount. If an order is partially filled, the returned amount means the remaining amount.
        // For the same reason, the returned amount and remaining are always same, and the returned filled and cost are always zero.
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ExchangeError ((string)add(this.id, " fetchOpenOrders() allows fetching closed orders with a specific symbol")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(market, "id") },
        };
        object response = await this.privatePostOrderLimitOrders(this.extend(request, parameters));
        //
        //     {
        //         "result": "success",
        //         "errorCode": "0",
        //         "limitOrders": [
        //             {
        //                 "index": "0",
        //                 "orderId": "68665943-1eb5-4e4b-9d76-845fc54f5489",
        //                 "timestamp": "1449037367",
        //                 "price": "444000.0",
        //                 "qty": "0.3456",
        //                 "type": "ask",
        //                 "feeRate": "-0.0015"
        //             }
        //         ]
        //     }
        //
        object limitOrders = this.safeValue(response, "limitOrders", new List<object>() {});
        return this.parseOrders(limitOrders, market, since, limit);
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinone#fetchMyTrades
        * @description fetch all trades made by the user
        * @param {string} symbol unified market symbol
        * @param {int|undefined} since the earliest time in ms to fetch trades for
        * @param {int|undefined} limit the maximum number of trades structures to retrieve
        * @param {object} params extra parameters specific to the coinone api endpoint
        * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchMyTrades() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(market, "id") },
        };
        object response = await this.privatePostOrderCompleteOrders(this.extend(request, parameters));
        //
        // despite the name of the endpoint it returns trades which may have a duplicate orderId
        // https://github.com/ccxt/ccxt/pull/7067
        //
        //     {
        //         "result": "success",
        //         "errorCode": "0",
        //         "completeOrders": [
        //             {
        //                 "timestamp": "1416561032",
        //                 "price": "419000.0",
        //                 "type": "bid",
        //                 "qty": "0.001",
        //                 "feeRate": "-0.0015",
        //                 "fee": "-0.0000015",
        //                 "orderId": "E84A1AC2-8088-4FA0-B093-A3BCDB9B3C85"
        //             }
        //         ]
        //     }
        //
        object completeOrders = this.safeValue(response, "completeOrders", new List<object>() {});
        return this.parseTrades(completeOrders, market, since, limit);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name coinone#cancelOrder
        * @description cancels an open order
        * @param {string} id order id
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} params extra parameters specific to the coinone api endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " cancelOrder() requires a symbol argument. To cancel the order, pass a symbol argument and {\'price\': 12345, \'qty\': 1.2345, \'is_ask\': 0} in the params argument of cancelOrder.")) ;
        }
        object price = this.safeNumber(parameters, "price");
        object qty = this.safeNumber(parameters, "qty");
        object isAsk = this.safeInteger(parameters, "is_ask");
        if (isTrue(isTrue(isTrue((isEqual(price, null))) || isTrue((isEqual(qty, null)))) || isTrue((isEqual(isAsk, null)))))
        {
            throw new ArgumentsRequired ((string)add(this.id, " cancelOrder() requires {\'price\': 12345, \'qty\': 1.2345, \'is_ask\': 0} in the params argument.")) ;
        }
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "order_id", id },
            { "price", price },
            { "qty", qty },
            { "is_ask", isAsk },
            { "currency", this.marketId(symbol) },
        };
        object response = await this.privatePostOrderCancel(this.extend(request, parameters));
        //
        //     {
        //         "result": "success",
        //         "errorCode": "0"
        //     }
        //
        return response;
    }

    public async override Task<object> fetchDepositAddresses(object codes = null, object parameters = null)
    {
        /**
        * @method
        * @name coinone#fetchDepositAddresses
        * @description fetch deposit addresses for multiple currencies and chain types
        * @param {[string]|undefined} codes list of unified currency codes, default is undefined
        * @param {object} params extra parameters specific to the coinone api endpoint
        * @returns {object} a list of [address structures]{@link https://docs.ccxt.com/#/?id=address-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privatePostAccountDepositAddress(parameters);
        //
        //     {
        //         result: 'success',
        //         errorCode: '0',
        //         walletAddress: {
        //             matic: null,
        //             btc: "mnobqu4i6qMCJWDpf5UimRmr8JCvZ8FLcN",
        //             xrp: null,
        //             xrp_tag: '-1',
        //             kava: null,
        //             kava_memo: null,
        //         }
        //     }
        //
        object walletAddress = this.safeValue(response, "walletAddress", new Dictionary<string, object>() {});
        object keys = new List<object>(((Dictionary<string,object>)walletAddress).Keys);
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
        {
            object key = getValue(keys, i);
            object value = getValue(walletAddress, key);
            if (isTrue(isTrue((!isTrue(value))) || isTrue((isEqual(value, "-1")))))
            {

            }
            object parts = ((string)key).Split((string)"_").ToList<object>();
            object currencyId = this.safeValue(parts, 0);
            object secondPart = this.safeValue(parts, 1);
            object code = this.safeCurrencyCode(currencyId);
            object depositAddress = this.safeValue(result, code);
            if (isTrue(isEqual(depositAddress, null)))
            {
                depositAddress = new Dictionary<string, object>() {
                    { "currency", code },
                    { "address", null },
                    { "tag", null },
                    { "info", value },
                };
            }
            object address = this.safeString(depositAddress, "address", value);
            this.checkAddress(address);
            ((Dictionary<string, object>)depositAddress)["address"] = address;
            ((Dictionary<string, object>)depositAddress)["info"] = address;
            if (isTrue((isTrue(isEqual(secondPart, "tag")) || isTrue(isEqual(secondPart, "memo")))))
            {
                ((Dictionary<string, object>)depositAddress)["tag"] = value;
                ((Dictionary<string, object>)depositAddress)["info"] = new List<object>() {address, value};
            }
            ((Dictionary<string, object>)result)[(string)code] = depositAddress;
        }
        return result;
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object request = this.implodeParams(path, parameters);
        object query = this.omit(parameters, this.extractParams(path));
        object url = add(getValue(getValue(this.urls, "api"), "rest"), "/");
        if (isTrue(isEqual(api, "public")))
        {
            url = add(url, request);
            if (isTrue(getArrayLength(new List<object>(((Dictionary<string,object>)query).Keys))))
            {
                url = add(url, add("?", this.urlencode(query)));
            }
        } else
        {
            this.checkRequiredCredentials();
            url = add(url, add(add(this.version, "/"), request));
            object nonce = ((object)this.nonce()).ToString();
            object json = this.json(this.extend(new Dictionary<string, object>() {
                { "access_token", this.apiKey },
                { "nonce", nonce },
            }, parameters));
            object payload = this.stringToBase64(json);
            body = payload;
            object secret = ((string)this.secret).ToUpper();
            object signature = this.hmac(payload, this.encode(secret), sha512);
            headers = new Dictionary<string, object>() {
                { "Content-Type", "application/json" },
                { "X-COINONE-PAYLOAD", payload },
                { "X-COINONE-SIGNATURE", signature },
            };
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object code, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;
        }
        if (isTrue(((Dictionary<string,object>)response).ContainsKey(toStringOrNull("result"))))
        {
            object result = getValue(response, "result");
            if (isTrue(!isEqual(result, "success")))
            {
                //
                //    {  "errorCode": "405",  "status": "maintenance",  "result": "error"}
                //
                object errorCode = this.safeString(response, "errorCode");
                object feedback = add(add(this.id, " "), body);
                this.throwExactlyMatchedException(this.exceptions, errorCode, feedback);
                throw new ExchangeError ((string)feedback) ;
            }
        } else
        {
            throw new ExchangeError ((string)add(add(this.id, " "), body)) ;
        }
        return null;
    }
}
