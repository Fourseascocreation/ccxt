using Main;
namespace Main;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

partial class tidex : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "tidex" },
            { "name", "Tidex" },
            { "countries", new List<object>() {"UK"} },
            { "rateLimit", 2000 },
            { "version", "3" },
            { "userAgent", getValue(this.userAgents, "chrome") },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelOrder", true },
                { "createMarketOrder", false },
                { "createOrder", true },
                { "createReduceOnlyOrder", false },
                { "fetchBalance", true },
                { "fetchBorrowRate", false },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchBorrowRates", false },
                { "fetchBorrowRatesPerSymbol", false },
                { "fetchCurrencies", true },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchLeverage", false },
                { "fetchLeverageTiers", false },
                { "fetchMarginMode", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", true },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchOrderBooks", true },
                { "fetchPosition", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTrades", true },
                { "reduceMargin", false },
                { "setLeverage", false },
                { "setMarginMode", false },
                { "setPositionMode", false },
                { "withdraw", true },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/1294454/30781780-03149dc4-a12e-11e7-82bb-313b269d24d4.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "web", "https://gate.tidex.com/api" },
                    { "public", "https://api.tidex.com/api/3" },
                    { "private", "https://api.tidex.com/tapi" },
                } },
                { "www", "https://tidex.com" },
                { "doc", "https://tidex.com/exchange/public-api" },
                { "referral", "https://tidex.com/exchange" },
                { "fees", new List<object>() {"https://tidex.com/exchange/assets-spec", "https://tidex.com/exchange/pairs-spec"} },
            } },
            { "api", new Dictionary<string, object>() {
                { "web", new Dictionary<string, object>() {
                    { "get", new List<object>() {"currency", "pairs", "tickers", "orders", "ordershistory", "trade-data", "trade-data/{id}"} },
                } },
                { "public", new Dictionary<string, object>() {
                    { "get", new List<object>() {"info", "ticker/{pair}", "depth/{pair}", "trades/{pair}"} },
                } },
                { "private", new Dictionary<string, object>() {
                    { "post", new List<object>() {"getInfoExt", "getInfo", "Trade", "ActiveOrders", "OrderInfo", "CancelOrder", "TradeHistory", "getDepositAddress", "createWithdraw", "getWithdraw"} },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "feeSide", "get" },
                    { "tierBased", false },
                    { "percentage", true },
                    { "taker", this.parseNumber("0.001") },
                    { "maker", this.parseNumber("0.001") },
                } },
            } },
            { "commonCurrencies", new Dictionary<string, object>() {
                { "DSH", "DASH" },
                { "EMGO", "MGO" },
                { "MGO", "WMGO" },
            } },
            { "precisionMode", TICK_SIZE },
            { "exceptions", new Dictionary<string, object>() {
                { "exact", new Dictionary<string, object>() {
                    { "803", typeof(InvalidOrder) },
                    { "804", typeof(InvalidOrder) },
                    { "805", typeof(InvalidOrder) },
                    { "806", typeof(InvalidOrder) },
                    { "807", typeof(InvalidOrder) },
                    { "831", typeof(InsufficientFunds) },
                    { "832", typeof(InsufficientFunds) },
                    { "833", typeof(OrderNotFound) },
                } },
                { "broad", new Dictionary<string, object>() {
                    { "Invalid pair name", typeof(ExchangeError) },
                    { "invalid api key", typeof(AuthenticationError) },
                    { "invalid sign", typeof(AuthenticationError) },
                    { "api key dont have trade permission", typeof(AuthenticationError) },
                    { "invalid parameter", typeof(InvalidOrder) },
                    { "invalid order", typeof(InvalidOrder) },
                    { "Requests too often", typeof(DDoSProtection) },
                    { "not available", typeof(ExchangeNotAvailable) },
                    { "data unavailable", typeof(ExchangeNotAvailable) },
                    { "external service unavailable", typeof(ExchangeNotAvailable) },
                    { "IP restricted", typeof(PermissionDenied) },
                } },
            } },
            { "options", new Dictionary<string, object>() {
                { "fetchTickersMaxLength", 2048 },
            } },
            { "orders", new Dictionary<string, object>() {} },
        });
    }

    public async override Task<object> fetchCurrencies(object parameters = null)
    {
        /**
        * @method
        * @name tidex#fetchCurrencies
        * @description fetches all available currencies on an exchange
        * @param {object} params extra parameters specific to the tidex api endpoint
        * @returns {object} an associative dictionary of currencies
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.webGetCurrency(parameters);
        //
        //     [
        //         {
        //             "id":2,
        //             "symbol":"BTC",
        //             "type":2,
        //             "name":"Bitcoin",
        //             "amountPoint":8,
        //             "depositEnable":true,
        //             "depositMinAmount":0.0005,
        //             "withdrawEnable":true,
        //             "withdrawFee":0.0004,
        //             "withdrawMinAmount":0.0005,
        //             "settings":{
        //                 "Blockchain":"https://blockchair.com/bitcoin/",
        //                 "TxUrl":"https://blockchair.com/bitcoin/transaction/{0}",
        //                 "AddrUrl":"https://blockchair.com/bitcoin/address/{0}",
        //                 "ConfirmationCount":3,
        //                 "NeedMemo":false
        //             },
        //             "visible":true,
        //             "isDelisted":false
        //         }
        //     ]
        //
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object currency = getValue(response, i);
            object id = this.safeString(currency, "symbol");
            object code = this.safeCurrencyCode(id);
            object visible = this.safeValue(currency, "visible");
            object active = isEqual(visible, true);
            object withdrawEnable = this.safeValue(currency, "withdrawEnable", true);
            object depositEnable = this.safeValue(currency, "depositEnable", true);
            if (isTrue(!isTrue(withdrawEnable) || !isTrue(depositEnable)))
            {
                active = false;
            }
            object name = this.safeString(currency, "name");
            object fee = this.safeNumber(currency, "withdrawFee");
            ((Dictionary<string, object>)result)[(string)code] = new Dictionary<string, object>() {
                { "id", id },
                { "code", code },
                { "name", name },
                { "active", active },
                { "deposit", depositEnable },
                { "withdraw", withdrawEnable },
                { "precision", this.parseNumber(this.parsePrecision(this.safeString(currency, "amountPoint"))) },
                { "funding", new Dictionary<string, object>() {
                    { "withdraw", new Dictionary<string, object>() {
                        { "active", withdrawEnable },
                        { "fee", fee },
                    } },
                    { "deposit", new Dictionary<string, object>() {
                        { "active", depositEnable },
                        { "fee", this.parseNumber("0") },
                    } },
                } },
                { "limits", new Dictionary<string, object>() {
                    { "amount", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "withdraw", new Dictionary<string, object>() {
                        { "min", this.safeNumber(currency, "withdrawMinAmount") },
                        { "max", null },
                    } },
                    { "deposit", new Dictionary<string, object>() {
                        { "min", this.safeNumber(currency, "depositMinAmount") },
                        { "max", null },
                    } },
                } },
                { "info", currency },
            };
        }
        return result;
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name tidex#fetchMarkets
        * @description retrieves data on all markets for tidex
        * @param {object} params extra parameters specific to the exchange api endpoint
        * @returns {[object]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetInfo(parameters);
        //
        //     {
        //         "server_time":1615861869,
        //         "pairs":{
        //             "ltc_btc":{
        //                 "decimal_places":8,
        //                 "min_price":0.00000001,
        //                 "max_price":3.0,
        //                 "min_amount":0.001,
        //                 "max_amount":1000000.0,
        //                 "min_total":0.0001,
        //                 "hidden":0,
        //                 "fee":0.1,
        //             },
        //         },
        //     }
        //
        object markets = getValue(response, "pairs");
        object keys = new List<string>(((Dictionary<string,object>)markets).Keys);
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
        {
            object id = getValue(keys, i);
            object market = getValue(markets, id);
            var baseIdquoteIdVariable = ((string)id).Split((string)"_").ToList<object>();
            var baseId = ((List<object>) baseIdquoteIdVariable)[0];
            var quoteId = ((List<object>) baseIdquoteIdVariable)[1];
            object bs = this.safeCurrencyCode(baseId);
            object quote = this.safeCurrencyCode(quoteId);
            object hidden = this.safeInteger(market, "hidden");
            object takerFeeString = this.safeString(market, "fee");
            takerFeeString = Precise.stringDiv(takerFeeString, "100");
            ((List<object>)result).Add(new Dictionary<string, object>() {
                { "id", id },
                { "symbol", add(add(bs, "/"), quote) },
                { "base", bs },
                { "quote", quote },
                { "settle", null },
                { "baseId", baseId },
                { "quoteId", quoteId },
                { "settleId", null },
                { "type", "spot" },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "active", (isEqual(hidden, 0)) },
                { "contract", false },
                { "linear", null },
                { "inverse", null },
                { "taker", this.parseNumber(takerFeeString) },
                { "contractSize", null },
                { "expiry", null },
                { "expiryDatetime", null },
                { "strike", null },
                { "optionType", null },
                { "precision", new Dictionary<string, object>() {
                    { "amount", this.parseNumber(this.parsePrecision(this.safeString(market, "decimal_places"))) },
                    { "price", this.parseNumber(this.parsePrecision(this.safeString(market, "decimal_places"))) },
                } },
                { "limits", new Dictionary<string, object>() {
                    { "leverage", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "amount", new Dictionary<string, object>() {
                        { "min", this.safeNumber(market, "min_amount") },
                        { "max", this.safeNumber(market, "max_amount") },
                    } },
                    { "price", new Dictionary<string, object>() {
                        { "min", this.safeNumber(market, "min_price") },
                        { "max", this.safeNumber(market, "max_price") },
                    } },
                    { "cost", new Dictionary<string, object>() {
                        { "min", this.safeNumber(market, "min_total") },
                        { "max", null },
                    } },
                } },
                { "info", market },
            });
        }
        return result;
    }

    public virtual object parseBalance(object response)
    {
        object balances = this.safeValue(response, "return");
        object timestamp = this.safeTimestamp(balances, "server_time");
        object result = new Dictionary<string, object>() {
            { "info", response },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
        };
        object funds = this.safeValue(balances, "funds", new Dictionary<string, object>() {});
        object currencyIds = new List<string>(((Dictionary<string,object>)funds).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(currencyIds)); postFixIncrement(ref i))
        {
            object currencyId = getValue(currencyIds, i);
            object code = this.safeCurrencyCode(currencyId);
            object balance = this.safeValue(funds, currencyId, new Dictionary<string, object>() {});
            object account = this.account();
            ((Dictionary<string, object>)account)["free"] = this.safeString(balance, "value");
            ((Dictionary<string, object>)account)["used"] = this.safeString(balance, "inOrders");
            ((Dictionary<string, object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name tidex#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @param {object} params extra parameters specific to the tidex api endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privatePostGetInfoExt(parameters);
        //
        //     {
        //         "success":1,
        //         "return":{
        //             "funds":{
        //                 "btc":{"value":0.0000499885629956,"inOrders":0.0},
        //                 "eth":{"value":0.000000030741708,"inOrders":0.0},
        //                 "tdx":{"value":0.0000000155385356,"inOrders":0.0}
        //             },
        //             "rights":{
        //                 "info":true,
        //                 "trade":true,
        //                 "withdraw":false
        //             },
        //             "transaction_count":0,
        //             "open_orders":0,
        //             "server_time":1619436907
        //         },
        //         "stat":{
        //             "isSuccess":true,
        //             "serverTime":"00:00:00.0001157",
        //             "time":"00:00:00.0101364",
        //             "errors":null
        //         }
        //     }
        //
        return this.parseBalance(response);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name tidex#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int|undefined} limit the maximum amount of order book entries to return
        * @param {object} params extra parameters specific to the tidex api endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((Dictionary<string, object>)request)["limit"] = limit; // default = 150, max = 2000
        }
        object response = await this.publicGetDepthPair(this.extend(request, parameters));
        object market_id_in_reponse = (((Dictionary<string,object>)response).ContainsKey(toStringOrNull(getValue(market, "id"))));
        if (!isTrue(market_id_in_reponse))
        {
            throw new ExchangeError ((string)add(add(add(this.id, " "), getValue(market, "symbol")), " order book is empty or not available")) ;
        }
        object orderbook = getValue(response, getValue(market, "id"));
        return this.parseOrderBook(orderbook, symbol);
    }

    public async virtual Task<object> fetchOrderBooks(object symbols = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name tidex#fetchOrderBooks
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data for multiple markets
        * @param {[string]|undefined} symbols list of unified market symbols, all symbols fetched if undefined, default is undefined
        * @param {int|undefined} limit max number of entries per orderbook to return, default is undefined
        * @param {object} params extra parameters specific to the tidex api endpoint
        * @returns {object} a dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbol
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object ids = null;
        if (isTrue(isEqual(symbols, null)))
        {
            ids = String.Join("-", this.ids);
            // max URL length is 2083 symbols, including http schema, hostname, tld, etc...
            if (isTrue(isGreaterThan(getArrayLength(ids), 2048)))
            {
                object numIds = getArrayLength(this.ids);
                throw new ExchangeError ((string)add(add(add(this.id, " fetchOrderBooks() has "), ((object)numIds).ToString()), " symbols exceeding max URL length, you are required to specify a list of symbols in the first argument to fetchOrderBooks")) ;
            }
        } else
        {
            ids = this.marketIds(symbols);
            ids = String.Join("-", ids);
        }
        object request = new Dictionary<string, object>() {
            { "pair", ids },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((Dictionary<string, object>)request)["limit"] = limit; // default = 150, max = 2000
        }
        object response = await this.publicGetDepthPair(this.extend(request, parameters));
        object result = new Dictionary<string, object>() {};
        ids = new List<string>(((Dictionary<string,object>)response).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(ids)); postFixIncrement(ref i))
        {
            object id = getValue(ids, i);
            object symbol = this.safeSymbol(id);
            ((Dictionary<string, object>)result)[(string)symbol] = this.parseOrderBook(getValue(response, id), symbol);
        }
        return result;
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        //     {
        //         high: 0.03497582,
        //         low: 0.03248474,
        //         avg: 0.03373028,
        //         vol: 120.11485715062999,
        //         vol_cur: 3572.24914074,
        //         last: 0.0337611,
        //         buy: 0.0337442,
        //         sell: 0.03377798,
        //         updated: 1537522009
        //     }
        //
        object timestamp = this.safeTimestamp(ticker, "updated");
        market = this.safeMarket(null, market);
        object last = this.safeString(ticker, "last");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", getValue(market, "symbol") },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "high") },
            { "low", this.safeString(ticker, "low") },
            { "bid", this.safeString(ticker, "buy") },
            { "bidVolume", null },
            { "ask", this.safeString(ticker, "sell") },
            { "askVolume", null },
            { "vwap", null },
            { "open", null },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", null },
            { "average", this.safeString(ticker, "avg") },
            { "baseVolume", this.safeString(ticker, "vol_cur") },
            { "quoteVolume", this.safeString(ticker, "vol") },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name tidex#fetchTickers
        * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
        * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} params extra parameters specific to the tidex api endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object ids = null;
        if (isTrue(isEqual(symbols, null)))
        {
            object numIds = getArrayLength(this.ids);
            ids = String.Join("-", this.ids);
            // max URL length is 2048 symbols, including http schema, hostname, tld, etc...
            if (isTrue(isGreaterThan(getArrayLength(ids), getValue(this.options, "fetchTickersMaxLength"))))
            {
                object maxLength = this.safeInteger(this.options, "fetchTickersMaxLength", 2048);
                throw new ArgumentsRequired ((string)add(add(add(add(add(this.id, " fetchTickers() has "), ((object)numIds).ToString()), " markets exceeding max URL length for this endpoint ("), ((object)maxLength).ToString()), " characters), please, specify a list of symbols of interest in the first argument to fetchTickers")) ;
            }
        } else
        {
            object newIds = this.marketIds(symbols);
            ids = String.Join("-", newIds);
        }
        object request = new Dictionary<string, object>() {
            { "pair", ids },
        };
        object response = await this.publicGetTickerPair(this.extend(request, parameters));
        object result = new Dictionary<string, object>() {};
        object keys = new List<string>(((Dictionary<string,object>)response).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
        {
            object id = getValue(keys, i);
            object market = this.safeMarket(id);
            object symbol = getValue(market, "symbol");
            ((Dictionary<string, object>)result)[(string)symbol] = this.parseTicker(getValue(response, id), market);
        }
        return this.filterByArray(result, "symbol", symbols);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name tidex#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} params extra parameters specific to the tidex api endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object tickers = await this.fetchTickers(new List<object>() {symbol}, parameters);
        return getValue(tickers, symbol);
    }

    public override object parseTrade(object trade, object market = null)
    {
        object timestamp = this.safeTimestamp(trade, "timestamp");
        object side = this.safeString(trade, "type");
        if (isTrue(isEqual(side, "ask")))
        {
            side = "sell";
        } else if (isTrue(isEqual(side, "bid")))
        {
            side = "buy";
        }
        object priceString = this.safeString2(trade, "rate", "price");
        object id = this.safeString2(trade, "trade_id", "tid");
        object orderId = this.safeString(trade, "order_id");
        object marketId = this.safeString(trade, "pair");
        object symbol = this.safeSymbol(marketId, market);
        object amountString = this.safeString(trade, "amount");
        object price = this.parseNumber(priceString);
        object amount = this.parseNumber(amountString);
        object cost = this.parseNumber(Precise.stringMul(priceString, amountString));
        object type = "limit"; // all trades are still limit trades
        object takerOrMaker = null;
        object fee = null;
        object feeCost = this.safeNumber(trade, "commission");
        if (isTrue(!isEqual(feeCost, null)))
        {
            object feeCurrencyId = this.safeString(trade, "commissionCurrency");
            object feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
            fee = new Dictionary<string, object>() {
                { "cost", feeCost },
                { "currency", feeCurrencyCode },
            };
        }
        object isYourOrder = this.safeValue(trade, "is_your_order");
        if (isTrue(!isEqual(isYourOrder, null)))
        {
            takerOrMaker = "taker";
            if (isTrue(isYourOrder))
            {
                takerOrMaker = "maker";
            }
            if (isTrue(isEqual(fee, null)))
            {
                fee = this.calculateFee(symbol, type, side, amount, price, takerOrMaker);
            }
        }
        return new Dictionary<string, object>() {
            { "id", id },
            { "order", orderId },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", symbol },
            { "type", type },
            { "side", side },
            { "takerOrMaker", takerOrMaker },
            { "price", price },
            { "amount", amount },
            { "cost", cost },
            { "fee", fee },
            { "info", trade },
        };
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name tidex#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
        * @param {int|undefined} limit the maximum amount of trades to fetch
        * @param {object} params extra parameters specific to the tidex api endpoint
        * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((Dictionary<string, object>)request)["limit"] = limit;
        }
        object response = await this.publicGetTradesPair(this.extend(request, parameters));
        if (isTrue((response.GetType().IsGenericType && response.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>)))))
        {
            object numElements = getArrayLength(response);
            if (isTrue(isEqual(numElements, 0)))
            {
                return new List<object>() {};
            }
        }
        return this.parseTrades(getValue(response, getValue(market, "id")), market, since, limit);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name tidex#createOrder
        * @description create a trade order
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} params extra parameters specific to the tidex api endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(type, "market")))
        {
            throw new ExchangeError ((string)add(this.id, " createOrder() allows limit orders only")) ;
        }
        object amountString = ((object)amount).ToString();
        object priceString = ((object)price).ToString();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
            { "type", side },
            { "amount", this.amountToPrecision(symbol, amount) },
            { "rate", this.priceToPrecision(symbol, price) },
        };
        object response = await this.privatePostTrade(this.extend(request, parameters));
        object id = null;
        object status = "open";
        object filledString = "0.0";
        object remainingString = amountString;
        object returnResult = this.safeValue(response, "return");
        if (isTrue(!isEqual(returnResult, null)))
        {
            id = this.safeString(returnResult, "order_id");
            if (isTrue(isEqual(id, "0")))
            {
                id = this.safeString(returnResult, "init_order_id");
                status = "closed";
            }
            filledString = this.safeString(returnResult, "received", filledString);
            remainingString = this.safeString(returnResult, "remains", amountString);
        }
        object timestamp = this.milliseconds();
        return this.safeOrder(new Dictionary<string, object>() {
            { "id", id },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "status", status },
            { "symbol", symbol },
            { "type", type },
            { "side", side },
            { "price", priceString },
            { "cost", null },
            { "amount", amountString },
            { "remaining", remainingString },
            { "filled", filledString },
            { "fee", null },
            { "info", response },
            { "clientOrderId", null },
            { "average", null },
            { "trades", null },
        }, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name tidex#cancelOrder
        * @description cancels an open order
        * @param {string} id order id
        * @param {string|undefined} symbol not used by tidex cancelOrder ()
        * @param {object} params extra parameters specific to the tidex api endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "order_id", parseInt(id) },
        };
        return await this.privatePostCancelOrder(this.extend(request, parameters));
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "0", "open" },
            { "1", "closed" },
            { "2", "canceled" },
            { "3", "canceled" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseOrder(object order, object market = null)
    {
        object id = this.safeString(order, "id");
        object status = this.parseOrderStatus(this.safeString(order, "status"));
        object timestamp = this.safeTimestamp(order, "timestamp_created");
        object marketId = this.safeString(order, "pair");
        object symbol = this.safeSymbol(marketId, market);
        object remaining = null;
        object amount = null;
        object price = this.safeString(order, "rate");
        if (isTrue(((Dictionary<string,object>)order).ContainsKey(toStringOrNull("start_amount"))))
        {
            amount = this.safeString(order, "start_amount");
            remaining = this.safeString(order, "amount");
        } else
        {
            remaining = this.safeString(order, "amount");
        }
        object fee = null;
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "id", id },
            { "clientOrderId", null },
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "type", "limit" },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", this.safeString(order, "type") },
            { "price", price },
            { "stopPrice", null },
            { "triggerPrice", null },
            { "cost", null },
            { "amount", amount },
            { "remaining", remaining },
            { "filled", null },
            { "status", status },
            { "fee", fee },
            { "average", null },
            { "trades", null },
        }, market);
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name tidex#fetchOrder
        * @description fetches information on an order made by the user
        * @param {string|undefined} symbol not used by tidex fetchOrder
        * @param {object} params extra parameters specific to the tidex api endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "order_id", parseInt(id) },
        };
        object response = await this.privatePostOrderInfo(this.extend(request, parameters));
        id = ((object)id).ToString();
        object result = this.safeValue(response, "return", new Dictionary<string, object>() {});
        object order = this.safeValue(result, id);
        return this.parseOrder(this.extend(new Dictionary<string, object>() {
            { "id", id },
        }, order));
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name tidex#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @param {string|undefined} symbol unified market symbol
        * @param {int|undefined} since the earliest time in ms to fetch open orders for
        * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
        * @param {object} params extra parameters specific to the tidex api endpoint
        * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((Dictionary<string, object>)request)["pair"] = getValue(market, "id");
        }
        object response = await this.privatePostActiveOrders(this.extend(request, parameters));
        //
        //     {
        //         "success":1,
        //         "return":{
        //             "1255468911":{
        //                 "status":0,
        //                 "pair":"spike_usdt",
        //                 "type":"sell",
        //                 "amount":35028.44256388,
        //                 "rate":0.00199989,
        //                 "timestamp_created":1602684432
        //             }
        //         },
        //         "stat":{
        //             "isSuccess":true,
        //             "serverTime":"00:00:00.0000826",
        //             "time":"00:00:00.0091423",
        //             "errors":null
        //         }
        //     }
        //
        // it can only return 'open' orders (i.e. no way to fetch 'closed' orders)
        object orders = this.safeValue(response, "return", new List<object>() {});
        return this.parseOrders(orders, market, since, limit);
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name tidex#fetchMyTrades
        * @description fetch all trades made by the user
        * @param {string|undefined} symbol unified market symbol
        * @param {int|undefined} since the earliest time in ms to fetch trades for
        * @param {int|undefined} limit the maximum number of trades structures to retrieve
        * @param {object} params extra parameters specific to the tidex api endpoint
        * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        // some derived classes use camelcase notation for request fields
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((Dictionary<string, object>)request)["pair"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((Dictionary<string, object>)request)["count"] = parseInt(limit);
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((Dictionary<string, object>)request)["since"] = this.parseToInt(divide(since, 1000));
        }
        object response = await this.privatePostTradeHistory(this.extend(request, parameters));
        object trades = this.safeValue(response, "return", new List<object>() {});
        return this.parseTrades(trades, market, since, limit);
    }

    public async override Task<object> withdraw(object code, object amount, object address, object tag = null, object parameters = null)
    {
        /**
        * @method
        * @name tidex#withdraw
        * @description make a withdrawal
        * @param {string} code unified currency code
        * @param {float} amount the amount to withdraw
        * @param {string} address the address to withdraw to
        * @param {string|undefined} tag
        * @param {object} params extra parameters specific to the tidex api endpoint
        * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
                var tagparametersVariable = this.handleWithdrawTagAndParams(tag, parameters);
        tag = ((List<object>)tagparametersVariable)[0];
        parameters = ((List<object>)tagparametersVariable)[1];
        this.checkAddress(address);
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "asset", getValue(currency, "id") },
            { "amount", parseFloat(amount) },
            { "address", address },
        };
        if (isTrue(!isEqual(tag, null)))
        {
            ((Dictionary<string, object>)request)["memo"] = tag;
        }
        object response = await this.privatePostCreateWithdraw(this.extend(request, parameters));
        //
        //     {
        //         "success":1,
        //         "return":{
        //             "withdraw_id":1111,
        //             "withdraw_info":{
        //                 "id":1111,
        //                 "asset_id":1,
        //                 "asset":"BTC",
        //                 "amount":0.0093,
        //                 "fee":0.0007,
        //                 "create_time":1575128018,
        //                 "status":"Created",
        //                 "data":{
        //                     "address":"1KFHE7w8BhaENAswwryaoccDb6qcT6DbYY",
        //                     "memo":"memo",
        //                     "tx":null,
        //                     "error":null
        //                 },
        //                 "in_blockchain":false
        //             }
        //         }
        //     }
        //
        object result = this.safeValue(response, "return", new Dictionary<string, object>() {});
        object withdrawInfo = this.safeValue(result, "withdraw_info", new Dictionary<string, object>() {});
        return this.parseTransaction(withdrawInfo, currency);
    }

    public override object parseTransaction(object transaction, object currency = null)
    {
        //
        //     {
        //         "id":1111,
        //         "asset_id":1,
        //         "asset":"BTC",
        //         "amount":0.0093,
        //         "fee":0.0007,
        //         "create_time":1575128018,
        //         "status":"Created",
        //         "data":{
        //             "address":"1KFHE7w8BhaENAswwryaoccDb6qcT6DbYY",
        //             "memo":"memo",
        //             "tx":null,
        //             "error":null
        //         },
        //         "in_blockchain":false
        //     }
        //
        currency = this.safeCurrency(null, currency);
        return new Dictionary<string, object>() {
            { "id", this.safeString(transaction, "id") },
            { "txid", null },
            { "timestamp", null },
            { "datetime", null },
            { "network", null },
            { "addressFrom", null },
            { "address", null },
            { "addressTo", null },
            { "amount", null },
            { "type", null },
            { "currency", getValue(currency, "code") },
            { "status", null },
            { "updated", null },
            { "tagFrom", null },
            { "tag", null },
            { "tagTo", null },
            { "comment", null },
            { "fee", null },
            { "info", transaction },
        };
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = getValue(getValue(this.urls, "api"), api);
        object query = this.omit(parameters, this.extractParams(path));
        if (isTrue(isEqual(api, "private")))
        {
            this.checkRequiredCredentials();
            object nonce = this.nonce();
            body = this.urlencode(this.extend(new Dictionary<string, object>() {
                { "nonce", nonce },
                { "method", path },
            }, query));
            object signature = this.hmac(this.encode(body), this.encode(this.secret), sha512);
            headers = new Dictionary<string, object>() {
                { "Content-Type", "application/x-www-form-urlencoded" },
                { "Key", this.apiKey },
                { "Sign", signature },
            };
        } else if (isTrue(isEqual(api, "public")))
        {
            url = add(url, add("/", this.implodeParams(path, parameters)));
            if (isTrue(getArrayLength(new List<string>(((Dictionary<string,object>)query).Keys))))
            {
                url = add(url, add("?", this.urlencode(query)));
            }
        } else
        {
            url = add(url, add("/", this.implodeParams(path, parameters)));
            if (isTrue(isEqual(method, "GET")))
            {
                if (isTrue(getArrayLength(new List<string>(((Dictionary<string,object>)query).Keys))))
                {
                    url = add(url, add("?", this.urlencode(query)));
                }
            } else
            {
                if (isTrue(getArrayLength(new List<string>(((Dictionary<string,object>)query).Keys))))
                {
                    body = this.json(query);
                    headers = new Dictionary<string, object>() {
                        { "Content-Type", "application/json" },
                    };
                }
            }
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object httpCode, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;  // fallback to default error handler
        }
        if (isTrue(((Dictionary<string,object>)response).ContainsKey(toStringOrNull("success"))))
        {
            //
            // 1 - The exchange only returns the integer 'success' key from their private API
            //
            //     { "success": 1, ... } httpCode === 200
            //     { "success": 0, ... } httpCode === 200
            //
            // 2 - However, derived exchanges can return non-integers
            //
            //     It can be a numeric string
            //     { "sucesss": "1", ... }
            //     { "sucesss": "0", ... }, httpCode >= 200 (can be 403, 502, etc)
            //
            //     Or just a string
            //     { "success": "true", ... }
            //     { "success": "false", ... }, httpCode >= 200
            //
            //     Or a boolean
            //     { "success": true, ... }
            //     { "success": false, ... }, httpCode >= 200
            //
            // 3 - Oversimplified, Python PEP8 forbids comparison operator (===) of different types
            //
            // 4 - We do not want to copy-paste and duplicate the code of this handler to other exchanges derived from Liqui
            //
            // To cover points 1, 2, 3 and 4 combined this handler should work like this:
            //
            object success = this.safeValue(response, "success", false);
            if (isTrue(((success).GetType() == typeof(string))))
            {
                if (isTrue(isTrue((isEqual(success, "true"))) || isTrue((isEqual(success, "1")))))
                {
                    success = true;
                } else
                {
                    success = false;
                }
            }
            if (!isTrue(success))
            {
                object code = this.safeString(response, "code");
                object message = this.safeString(response, "error");
                object feedback = add(add(this.id, " "), body);
                this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), code, feedback);
                this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), message, feedback);
                this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), message, feedback);
                throw new ExchangeError ((string)feedback) ;
            }
        }
        return null;
    }
}
