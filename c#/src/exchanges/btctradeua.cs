using ccxt;
namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

partial class btctradeua : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "btctradeua" },
            { "name", "BTC Trade UA" },
            { "countries", new List<object>() {"UA"} },
            { "rateLimit", 3000 },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelOrder", true },
                { "createMarketOrder", false },
                { "createOrder", true },
                { "createReduceOnlyOrder", false },
                { "fetchBalance", true },
                { "fetchBorrowRate", false },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchBorrowRates", false },
                { "fetchBorrowRatesPerSymbol", false },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchLeverage", false },
                { "fetchMarginMode", false },
                { "fetchMarkOHLCV", false },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", true },
                { "fetchOrderBook", true },
                { "fetchPosition", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTrades", true },
                { "fetchTradingFee", false },
                { "fetchTradingFees", false },
                { "reduceMargin", false },
                { "setLeverage", false },
                { "setMarginMode", false },
                { "setPositionMode", false },
                { "signIn", true },
            } },
            { "urls", new Dictionary<string, object>() {
                { "referral", "https://btc-trade.com.ua/registration/22689" },
                { "logo", "https://user-images.githubusercontent.com/1294454/27941483-79fc7350-62d9-11e7-9f61-ac47f28fcd96.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "rest", "https://btc-trade.com.ua/api" },
                } },
                { "www", "https://btc-trade.com.ua" },
                { "doc", "https://docs.google.com/document/d/1ocYA0yMy_RXd561sfG3qEPZ80kyll36HUxvCRe5GbhE/edit" },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new List<object>() {"deals/{symbol}", "trades/sell/{symbol}", "trades/buy/{symbol}", "japan_stat/high/{symbol}"} },
                } },
                { "private", new Dictionary<string, object>() {
                    { "post", new List<object>() {"auth", "ask/{symbol}", "balance", "bid/{symbol}", "buy/{symbol}", "my_orders/{symbol}", "order/status/{id}", "remove/order/{id}", "sell/{symbol}"} },
                } },
            } },
            { "precisionMode", TICK_SIZE },
            { "markets", new Dictionary<string, object>() {
                { "BCH/UAH", new Dictionary<string, object>() {
                    { "id", "bch_uah" },
                    { "symbol", "BCH/UAH" },
                    { "base", "BCH" },
                    { "quote", "UAH" },
                    { "baseId", "bch" },
                    { "quoteId", "uah" },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "BTC/UAH", new Dictionary<string, object>() {
                    { "id", "btc_uah" },
                    { "symbol", "BTC/UAH" },
                    { "base", "BTC" },
                    { "quote", "UAH" },
                    { "baseId", "btc" },
                    { "quoteId", "uah" },
                    { "precision", new Dictionary<string, object>() {
                        { "price", this.parseNumber("1e-1") },
                    } },
                    { "limits", new Dictionary<string, object>() {
                        { "amount", new Dictionary<string, object>() {
                            { "min", this.parseNumber("1e-10") },
                        } },
                    } },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "DASH/BTC", new Dictionary<string, object>() {
                    { "id", "dash_btc" },
                    { "symbol", "DASH/BTC" },
                    { "base", "DASH" },
                    { "quote", "BTC" },
                    { "baseId", "dash" },
                    { "quoteId", "btc" },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "DASH/UAH", new Dictionary<string, object>() {
                    { "id", "dash_uah" },
                    { "symbol", "DASH/UAH" },
                    { "base", "DASH" },
                    { "quote", "UAH" },
                    { "baseId", "dash" },
                    { "quoteId", "uah" },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "DOGE/BTC", new Dictionary<string, object>() {
                    { "id", "doge_btc" },
                    { "symbol", "DOGE/BTC" },
                    { "base", "DOGE" },
                    { "quote", "BTC" },
                    { "baseId", "doge" },
                    { "quoteId", "btc" },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "DOGE/UAH", new Dictionary<string, object>() {
                    { "id", "doge_uah" },
                    { "symbol", "DOGE/UAH" },
                    { "base", "DOGE" },
                    { "quote", "UAH" },
                    { "baseId", "doge" },
                    { "quoteId", "uah" },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "ETH/UAH", new Dictionary<string, object>() {
                    { "id", "eth_uah" },
                    { "symbol", "ETH/UAH" },
                    { "base", "ETH" },
                    { "quote", "UAH" },
                    { "baseId", "eth" },
                    { "quoteId", "uah" },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "ITI/UAH", new Dictionary<string, object>() {
                    { "id", "iti_uah" },
                    { "symbol", "ITI/UAH" },
                    { "base", "ITI" },
                    { "quote", "UAH" },
                    { "baseId", "iti" },
                    { "quoteId", "uah" },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "KRB/UAH", new Dictionary<string, object>() {
                    { "id", "krb_uah" },
                    { "symbol", "KRB/UAH" },
                    { "base", "KRB" },
                    { "quote", "UAH" },
                    { "baseId", "krb" },
                    { "quoteId", "uah" },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "LTC/BTC", new Dictionary<string, object>() {
                    { "id", "ltc_btc" },
                    { "symbol", "LTC/BTC" },
                    { "base", "LTC" },
                    { "quote", "BTC" },
                    { "baseId", "ltc" },
                    { "quoteId", "btc" },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "LTC/UAH", new Dictionary<string, object>() {
                    { "id", "ltc_uah" },
                    { "symbol", "LTC/UAH" },
                    { "base", "LTC" },
                    { "quote", "UAH" },
                    { "baseId", "ltc" },
                    { "quoteId", "uah" },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "NVC/BTC", new Dictionary<string, object>() {
                    { "id", "nvc_btc" },
                    { "symbol", "NVC/BTC" },
                    { "base", "NVC" },
                    { "quote", "BTC" },
                    { "baseId", "nvc" },
                    { "quoteId", "btc" },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "NVC/UAH", new Dictionary<string, object>() {
                    { "id", "nvc_uah" },
                    { "symbol", "NVC/UAH" },
                    { "base", "NVC" },
                    { "quote", "UAH" },
                    { "baseId", "nvc" },
                    { "quoteId", "uah" },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "PPC/BTC", new Dictionary<string, object>() {
                    { "id", "ppc_btc" },
                    { "symbol", "PPC/BTC" },
                    { "base", "PPC" },
                    { "quote", "BTC" },
                    { "baseId", "ppc" },
                    { "quoteId", "btc" },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "SIB/UAH", new Dictionary<string, object>() {
                    { "id", "sib_uah" },
                    { "symbol", "SIB/UAH" },
                    { "base", "SIB" },
                    { "quote", "UAH" },
                    { "baseId", "sib" },
                    { "quoteId", "uah" },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "XMR/UAH", new Dictionary<string, object>() {
                    { "id", "xmr_uah" },
                    { "symbol", "XMR/UAH" },
                    { "base", "XMR" },
                    { "quote", "UAH" },
                    { "baseId", "xmr" },
                    { "quoteId", "uah" },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "ZEC/UAH", new Dictionary<string, object>() {
                    { "id", "zec_uah" },
                    { "symbol", "ZEC/UAH" },
                    { "base", "ZEC" },
                    { "quote", "UAH" },
                    { "baseId", "zec" },
                    { "quoteId", "uah" },
                    { "type", "spot" },
                    { "spot", true },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "maker", this.parseNumber("0.001") },
                    { "taker", this.parseNumber("0.001") },
                } },
            } },
        });
    }

    public async override Task<object> signIn(object parameters = null)
    {
        /**
        * @method
        * @name btctradeua#signIn
        * @description sign in, must be called prior to using other authenticated methods
        * @param {object} params extra parameters specific to the btctradeua api endpoint
        * @returns response from exchange
        */
        parameters ??= new Dictionary<string, object>();
        return await this.privatePostAuth(parameters);
    }

    public virtual object parseBalance(object response)
    {
        object result = new Dictionary<string, object>() {
            { "info", response },
        };
        object balances = this.safeValue(response, "accounts", new List<object>() {});
        for (object i = 0; isLessThan(i, getArrayLength(balances)); postFixIncrement(ref i))
        {
            object balance = getValue(balances, i);
            object currencyId = this.safeString(balance, "currency");
            object code = this.safeCurrencyCode(currencyId);
            object account = this.account();
            ((Dictionary<string, object>)account)["total"] = this.safeString(balance, "balance");
            ((Dictionary<string, object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name btctradeua#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @param {object} params extra parameters specific to the btctradeua api endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privatePostBalance(parameters);
        return this.parseBalance(response);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name btctradeua#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int|undefined} limit the maximum amount of order book entries to return
        * @param {object} params extra parameters specific to the btctradeua api endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object bids = await this.publicGetTradesBuySymbol(this.extend(request, parameters));
        object asks = await this.publicGetTradesSellSymbol(this.extend(request, parameters));
        object orderbook = new Dictionary<string, object>() {
            { "bids", new List<object>() {} },
            { "asks", new List<object>() {} },
        };
        if (isTrue(bids))
        {
            if (isTrue(((Dictionary<string,object>)bids).ContainsKey(toStringOrNull("list"))))
            {
                ((Dictionary<string, object>)orderbook)["bids"] = getValue(bids, "list");
            }
        }
        if (isTrue(asks))
        {
            if (isTrue(((Dictionary<string,object>)asks).ContainsKey(toStringOrNull("list"))))
            {
                ((Dictionary<string, object>)orderbook)["asks"] = getValue(asks, "list");
            }
        }
        return this.parseOrderBook(orderbook, getValue(market, "symbol"), null, "bids", "asks", "price", "currency_trade");
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        // [
        //     [1640789101000, 1292663.0, 1311823.61303, 1295794.252, 1311823.61303, 0.030175],
        //     [1640790902000, 1311823.61303, 1310820.96, 1290000.0, 1290000.0, 0.042533],
        // ],
        //
        object symbol = this.safeSymbol(null, market);
        object timestamp = this.milliseconds();
        object result = new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", null },
            { "low", null },
            { "bid", null },
            { "bidVolume", null },
            { "ask", null },
            { "askVolume", null },
            { "vwap", null },
            { "open", null },
            { "close", null },
            { "last", null },
            { "previousClose", null },
            { "change", null },
            { "percentage", null },
            { "average", null },
            { "baseVolume", null },
            { "quoteVolume", null },
            { "info", ticker },
        };
        object tickerLength = getArrayLength(ticker);
        if (isTrue(isGreaterThan(tickerLength, 0)))
        {
            object start = mathMax(subtract(tickerLength, 48), 0);
            for (object i = start; isLessThan(i, getArrayLength(ticker)); postFixIncrement(ref i))
            {
                object candle = getValue(ticker, i);
                if (isTrue(isEqual(getValue(result, "open"), null)))
                {
                    ((Dictionary<string, object>)result)["open"] = this.safeString(candle, 1);
                }
                object high = this.safeString(candle, 2);
                if (isTrue(isTrue((isEqual(getValue(result, "high"), null))) || isTrue((isTrue((!isEqual(high, null))) && isTrue(Precise.stringLt(getValue(result, "high"), high))))))
                {
                    ((Dictionary<string, object>)result)["high"] = high;
                }
                object low = this.safeString(candle, 3);
                if (isTrue(isTrue((isEqual(getValue(result, "low"), null))) || isTrue((isTrue((!isEqual(low, null))) && isTrue(Precise.stringLt(getValue(result, "low"), low))))))
                {
                    ((Dictionary<string, object>)result)["low"] = low;
                }
                object baseVolume = this.safeString(candle, 5);
                if (isTrue(isEqual(getValue(result, "baseVolume"), null)))
                {
                    ((Dictionary<string, object>)result)["baseVolume"] = baseVolume;
                } else
                {
                    ((Dictionary<string, object>)result)["baseVolume"] = Precise.stringAdd(getValue(result, "baseVolume"), baseVolume);
                }
            }
            object last = subtract(tickerLength, 1);
            ((Dictionary<string, object>)result)["last"] = this.safeString(getValue(ticker, last), 4);
            ((Dictionary<string, object>)result)["close"] = getValue(result, "last");
        }
        return this.safeTicker(result, market);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name btctradeua#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} params extra parameters specific to the btctradeua api endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = await this.publicGetJapanStatHighSymbol(this.extend(request, parameters));
        object ticker = this.safeValue(response, "trades");
        //
        // {
        //     "status": true,
        //     "volume_trade": "0.495703",
        //     "trades": [
        //         [1640789101000, 1292663.0, 1311823.61303, 1295794.252, 1311823.61303, 0.030175],
        //         [1640790902000, 1311823.61303, 1310820.96, 1290000.0, 1290000.0, 0.042533],
        //     ],
        // }
        //
        return this.parseTicker(ticker, market);
    }

    public virtual object convertMonthNameToString(object cyrillic)
    {
        object months = new Dictionary<string, object>() {
            { "Jan", "01" },
            { "January", "01" },
            { "Feb", "02" },
            { "February", "02" },
            { "Mar", "03" },
            { "March", "03" },
            { "Apr", "04" },
            { "April", "04" },
            { "May", "05" },
            { "Jun", "06" },
            { "June", "06" },
            { "Jul", "07" },
            { "July", "07" },
            { "Aug", "08" },
            { "August", "08" },
            { "Sept", "09" },
            { "September", "09" },
            { "Oct", "10" },
            { "October", "10" },
            { "Nov", "11" },
            { "November", "11" },
            { "Dec", "12" },
            { "December", "12" },
        };
        return this.safeString(months, cyrillic);
    }

    public virtual object parseExchangeSpecificDatetime(object cyrillic)
    {
        object parts = ((string)cyrillic).Split((string)" ").ToList<object>();
        object month = getValue(parts, 0);
        object day = ((string)getValue(parts, 1)).Replace((string)",", (string)"");
        if (isTrue(isLessThan(getArrayLength(day), 2)))
        {
            day = add("0", day);
        }
        object year = ((string)getValue(parts, 2)).Replace((string)",", (string)"");
        month = ((string)month).Replace((string)",", (string)"");
        month = ((string)month).Replace((string)".", (string)"");
        month = this.convertMonthNameToString(month);
        if (!isTrue(month))
        {
            throw new ExchangeError ((string)add(add(this.id, " parseTrade() unrecognized month name: "), cyrillic)) ;
        }
        object hms = getValue(parts, 3);
        object hmsParts = ((string)hms).Split((string)":").ToList<object>();
        object h = this.safeString(hmsParts, 0);
        object m = "00";
        object ampm = this.safeString(parts, 4);
        if (isTrue(isEqual(h, "noon")))
        {
            h = "12";
        } else
        {
            object intH = parseInt(h);
            if (isTrue(isTrue((!isEqual(ampm, null))) && isTrue((isEqual(getValue(ampm, 0), "p")))))
            {
                intH = add(12, intH);
                if (isTrue(isGreaterThan(intH, 23)))
                {
                    intH = 0;
                }
            }
            h = ((object)intH).ToString();
            if (isTrue(isLessThan(((string)h).Length, 2)))
            {
                h = add("0", h);
            }
            m = this.safeString(hmsParts, 1, "00");
            if (isTrue(isLessThan(((string)m).Length, 2)))
            {
                m = add("0", m);
            }
        }
        object ymd = String.Join("-", ((List<object>)new List<object>() {year, month, day}).ToArray());
        object ymdhms = add(add(add(add(add(ymd, "T"), h), ":"), m), ":00");
        object timestamp = this.parse8601(ymdhms);
        // server reports local time, adjust to UTC
        // a special case for DST
        // subtract 2 hours during winter
        object intM = parseInt(m);
        if (isTrue(isTrue(isLessThan(intM, 11)) || isTrue(isGreaterThan(intM, 2))))
        {
            return subtract(timestamp, 7200000);
        }
        // subtract 3 hours during summer
        return subtract(timestamp, 10800000);
    }

    public override object parseTrade(object trade, object market = null)
    {
        object timestamp = this.parseExchangeSpecificDatetime(this.safeString(trade, "pub_date"));
        object id = this.safeString(trade, "id");
        object type = "limit";
        object side = this.safeString(trade, "type");
        object priceString = this.safeString(trade, "price");
        object amountString = this.safeString(trade, "amnt_trade");
        market = this.safeMarket(null, market);
        return this.safeTrade(new Dictionary<string, object>() {
            { "id", id },
            { "info", trade },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", getValue(market, "symbol") },
            { "type", type },
            { "side", side },
            { "order", null },
            { "takerOrMaker", null },
            { "price", priceString },
            { "amount", amountString },
            { "cost", null },
            { "fee", null },
        }, market);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name btctradeua#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
        * @param {int|undefined} limit the maximum amount of trades to fetch
        * @param {object} params extra parameters specific to the btctradeua api endpoint
        * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = await this.publicGetDealsSymbol(this.extend(request, parameters));
        // they report each trade twice (once for both of the two sides of the fill)
        // deduplicate trades for that reason
        object trades = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object id = this.safeInteger(getValue(response, i), "id");
            if (isTrue(mod(id, 2)))
            {
                ((List<object>)trades).Add(getValue(response, i));
            }
        }
        return this.parseTrades(trades, market, since, limit);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name btctradeua#createOrder
        * @description create a trade order
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type must be 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} params extra parameters specific to the btctradeua api endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(type, "market")))
        {
            throw new ExchangeError ((string)add(this.id, " createOrder() allows limit orders only")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object method = add(add("privatePost", this.capitalize(side)), "Id");
        object request = new Dictionary<string, object>() {
            { "count", amount },
            { "currency1", getValue(market, "quoteId") },
            { "currency", getValue(market, "baseId") },
            { "price", price },
        };
        return ((Task<object>)callDynamically(this, method, new object[] { this.extend(request, parameters) }));
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name btctradeua#cancelOrder
        * @description cancels an open order
        * @param {string} id order id
        * @param {string|undefined} symbol not used by btctradeua cancelOrder ()
        * @param {object} params extra parameters specific to the btctradeua api endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "id", id },
        };
        return await this.privatePostRemoveOrderId(this.extend(request, parameters));
    }

    public override object parseOrder(object order, object market = null)
    {
        object timestamp = this.milliseconds();
        object symbol = this.safeSymbol(null, market);
        object side = this.safeString(order, "type");
        object price = this.safeString(order, "price");
        object amount = this.safeString(order, "amnt_trade");
        object remaining = this.safeString(order, "amnt_trade");
        return this.safeOrder(new Dictionary<string, object>() {
            { "id", this.safeString(order, "id") },
            { "clientOrderId", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "status", "open" },
            { "symbol", symbol },
            { "type", null },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", side },
            { "price", price },
            { "stopPrice", null },
            { "triggerPrice", null },
            { "amount", amount },
            { "filled", null },
            { "remaining", remaining },
            { "trades", null },
            { "info", order },
            { "cost", null },
            { "average", null },
            { "fee", null },
        }, market);
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name btctradeua#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @param {string} symbol unified market symbol
        * @param {int|undefined} since the earliest time in ms to fetch open orders for
        * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
        * @param {object} params extra parameters specific to the btctradeua api endpoint
        * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOpenOrders() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = await this.privatePostMyOrdersSymbol(this.extend(request, parameters));
        object orders = this.safeValue(response, "your_open_orders");
        return this.parseOrders(orders, market, since, limit);
    }

    public override object nonce()
    {
        return this.milliseconds();
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = add(add(getValue(getValue(this.urls, "api"), "rest"), "/"), this.implodeParams(path, parameters));
        object query = this.omit(parameters, this.extractParams(path));
        if (isTrue(isEqual(api, "public")))
        {
            if (isTrue(getArrayLength(new List<object>(((Dictionary<string,object>)query).Keys))))
            {
                url = add(url, this.implodeParams(path, query));
            }
        } else
        {
            this.checkRequiredCredentials();
            object nonce = this.nonce();
            body = this.urlencode(this.extend(new Dictionary<string, object>() {
                { "out_order_id", nonce },
                { "nonce", nonce },
            }, query));
            object auth = add(body, this.secret);
            headers = new Dictionary<string, object>() {
                { "public-key", this.apiKey },
                { "api-sign", this.hash(this.encode(auth), sha256) },
                { "Content-Type", "application/x-www-form-urlencoded" },
            };
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }
}
