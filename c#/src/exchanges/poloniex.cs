using Main;
namespace Main;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

partial class poloniex : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "poloniex" },
            { "name", "Poloniex" },
            { "countries", new List<object>() {"US"} },
            { "rateLimit", 5 },
            { "certified", false },
            { "pro", false },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", null },
                { "swap", null },
                { "future", null },
                { "option", null },
                { "cancelAllOrders", true },
                { "cancelOrder", true },
                { "createDepositAddress", true },
                { "createOrder", true },
                { "editOrder", true },
                { "fetchBalance", true },
                { "fetchClosedOrder", false },
                { "fetchCurrencies", true },
                { "fetchDepositAddress", true },
                { "fetchDeposits", true },
                { "fetchDepositWithdrawFee", "emulated" },
                { "fetchDepositWithdrawFees", true },
                { "fetchMarginMode", false },
                { "fetchMarkets", true },
                { "fetchMyTrades", true },
                { "fetchOHLCV", true },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrder", false },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchOrderBooks", false },
                { "fetchOrderTrades", true },
                { "fetchPosition", false },
                { "fetchPositionMode", false },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTime", true },
                { "fetchTrades", true },
                { "fetchTradingFee", false },
                { "fetchTradingFees", true },
                { "fetchTransactions", true },
                { "fetchTransfer", false },
                { "fetchTransfers", false },
                { "fetchWithdrawals", true },
                { "transfer", true },
                { "withdraw", true },
            } },
            { "timeframes", new Dictionary<string, object>() {
                { "1m", "MINUTE_1" },
                { "5m", "MINUTE_5" },
                { "10m", "MINUTE_10" },
                { "15m", "MINUTE_15" },
                { "30m", "MINUTE_30" },
                { "1h", "HOUR_1" },
                { "2h", "HOUR_2" },
                { "4h", "HOUR_4" },
                { "6h", "HOUR_6" },
                { "12h", "HOUR_12" },
                { "1d", "DAY_1" },
                { "3d", "DAY_3" },
                { "1w", "WEEK_1" },
                { "1M", "MONTH_1" },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/1294454/27766817-e9456312-5ee6-11e7-9b3c-b628ca5626a5.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "rest", "https://api.poloniex.com" },
                } },
                { "test", new Dictionary<string, object>() {
                    { "rest", "https://sand-spot-api-gateway.poloniex.com" },
                } },
                { "www", "https://www.poloniex.com" },
                { "doc", "https://docs.poloniex.com" },
                { "fees", "https://poloniex.com/fees" },
                { "referral", "https://poloniex.com/signup?c=UBFZJRPJ" },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "markets", 20 },
                        { "markets/{symbol}", 1 },
                        { "currencies", 20 },
                        { "currencies/{currency}", 20 },
                        { "timestamp", 1 },
                        { "markets/price", 1 },
                        { "markets/{symbol}/price", 1 },
                        { "markets/{symbol}/orderBook", 1 },
                        { "markets/{symbol}/candles", 1 },
                        { "markets/{symbol}/trades", 20 },
                        { "markets/ticker24h", 20 },
                        { "markets/{symbol}/ticker24h", 20 },
                    } },
                } },
                { "private", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "accounts", 4 },
                        { "accounts/activity", 4 },
                        { "accounts/balances", 4 },
                        { "accounts/{id}/balances", 4 },
                        { "accounts/transfer", 20 },
                        { "accounts/transfer/{id}", 4 },
                        { "subaccounts", 4 },
                        { "subaccounts/balances", 20 },
                        { "subaccounts/{id}/balances", 4 },
                        { "subaccounts/transfer", 20 },
                        { "subaccounts/transfer/{id}", 4 },
                        { "feeinfo", 20 },
                        { "wallets/addresses", 20 },
                        { "wallets/activity", 20 },
                        { "wallets/addresses/{currency}", 20 },
                        { "orders", 20 },
                        { "orders/{id}", 4 },
                        { "orders/history", 20 },
                        { "orders/killSwitchStatus", 4 },
                        { "smartorders", 20 },
                        { "smartorders/{id}", 4 },
                        { "smartorders/history", 20 },
                        { "trades", 20 },
                        { "orders/{id}/trades", 4 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "accounts/transfer", 4 },
                        { "subaccounts/transfer", 20 },
                        { "wallets/address", 20 },
                        { "wallets/withdraw", 20 },
                        { "orders", 4 },
                        { "orders/killSwitch", 4 },
                        { "orders/batch", 20 },
                        { "smartorders", 4 },
                    } },
                    { "delete", new Dictionary<string, object>() {
                        { "orders/{id}", 4 },
                        { "orders/cancelByIds", 20 },
                        { "orders", 20 },
                        { "smartorders/{id}", 4 },
                        { "smartorders/cancelByIds", 20 },
                        { "smartorders", 20 },
                    } },
                    { "put", new Dictionary<string, object>() {
                        { "orders/{id}", 4 },
                        { "smartorders/{id}", 4 },
                    } },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "feeSide", "get" },
                    { "maker", this.parseNumber("0.0009") },
                    { "taker", this.parseNumber("0.0009") },
                } },
                { "funding", new Dictionary<string, object>() {} },
            } },
            { "commonCurrencies", new Dictionary<string, object>() {
                { "AIR", "AirCoin" },
                { "APH", "AphroditeCoin" },
                { "BCC", "BTCtalkcoin" },
                { "BCHABC", "BCHABC" },
                { "BDG", "Badgercoin" },
                { "BTM", "Bitmark" },
                { "CON", "Coino" },
                { "GOLD", "GoldEagles" },
                { "GPUC", "GPU" },
                { "HOT", "Hotcoin" },
                { "ITC", "Information Coin" },
                { "KEY", "KEYCoin" },
                { "MASK", "NFTX Hashmasks Index" },
                { "MEME", "Degenerator Meme" },
                { "PLX", "ParallaxCoin" },
                { "REPV2", "REP" },
                { "STR", "XLM" },
                { "SOC", "SOCC" },
                { "TRADE", "Unitrade" },
                { "XAP", "API Coin" },
                { "USDTTRON", "USDT" },
                { "USDTETH", "USDT" },
                { "UST", "USTC" },
            } },
            { "options", new Dictionary<string, object>() {
                { "networks", new Dictionary<string, object>() {
                    { "BEP20", "BSC" },
                    { "ERC20", "ETH" },
                    { "TRC20", "TRON" },
                } },
                { "networksById", new Dictionary<string, object>() {
                    { "BSC", "BEP20" },
                    { "ETH", "ERC20" },
                    { "TRON", "TRC20" },
                } },
                { "limits", new Dictionary<string, object>() {
                    { "cost", new Dictionary<string, object>() {
                        { "min", new Dictionary<string, object>() {
                            { "BTC", 0.0001 },
                            { "ETH", 0.0001 },
                            { "USDT", 1 },
                            { "TRX", 100 },
                            { "BNB", 0.06 },
                            { "USDC", 1 },
                            { "USDJ", 1 },
                            { "TUSD", 0.0001 },
                            { "DAI", 1 },
                            { "PAX", 1 },
                            { "BUSD", 1 },
                        } },
                    } },
                } },
                { "accountsByType", new Dictionary<string, object>() {
                    { "spot", "spot" },
                    { "future", "futures" },
                } },
                { "accountsById", new Dictionary<string, object>() {
                    { "exchange", "spot" },
                    { "futures", "future" },
                } },
            } },
            { "precisionMode", TICK_SIZE },
            { "exceptions", new Dictionary<string, object>() {
                { "exact", new Dictionary<string, object>() {
                    { "You may only place orders that reduce your position.", typeof(InvalidOrder) },
                    { "Invalid order number, or you are not the person who placed the order.", typeof(OrderNotFound) },
                    { "Permission denied", typeof(PermissionDenied) },
                    { "Permission denied.", typeof(PermissionDenied) },
                    { "Connection timed out. Please try again.", typeof(RequestTimeout) },
                    { "Internal error. Please try again.", typeof(ExchangeNotAvailable) },
                    { "Currently in maintenance mode.", typeof(OnMaintenance) },
                    { "Order not found, or you are not the person who placed it.", typeof(OrderNotFound) },
                    { "Invalid API key/secret pair.", typeof(AuthenticationError) },
                    { "Please do not make more than 8 API calls per second.", typeof(RateLimitExceeded) },
                    { "This IP has been temporarily throttled. Please ensure your requests are valid and try again in one minute.", typeof(RateLimitExceeded) },
                    { "Rate must be greater than zero.", typeof(InvalidOrder) },
                    { "Invalid currency pair.", typeof(BadSymbol) },
                    { "Invalid currencyPair parameter.", typeof(BadSymbol) },
                    { "Trading is disabled in this market.", typeof(BadSymbol) },
                    { "Invalid orderNumber parameter.", typeof(OrderNotFound) },
                    { "Order is beyond acceptable bounds.", typeof(InvalidOrder) },
                    { "This account is closed.", typeof(AccountSuspended) },
                } },
                { "broad", new Dictionary<string, object>() {
                    { "Total must be at least", typeof(InvalidOrder) },
                    { "This account is frozen", typeof(AccountSuspended) },
                    { "This account is locked.", typeof(AccountSuspended) },
                    { "Not enough", typeof(InsufficientFunds) },
                    { "Nonce must be greater", typeof(InvalidNonce) },
                    { "You have already called cancelOrder", typeof(CancelPending) },
                    { "Amount must be at least", typeof(InvalidOrder) },
                    { "is either completed or does not exist", typeof(OrderNotFound) },
                    { "Error pulling ", typeof(ExchangeError) },
                } },
            } },
        });
    }

    public override object parseOHLCV(object ohlcv, object market = null)
    {
        //
        //     [
        //         [
        //             "22814.01",
        //             "22937.42",
        //             "22832.57",
        //             "22937.42",
        //             "3916.58764051",
        //             "0.171199",
        //             "2982.64647063",
        //             "0.130295",
        //             33,
        //             0,
        //             "22877.449915304470460711",
        //             "MINUTE_5",
        //             1659664800000,
        //             1659665099999
        //         ]
        //     ]
        //
        return new List<object> {this.safeInteger(ohlcv, 12), this.safeNumber(ohlcv, 2), this.safeNumber(ohlcv, 1), this.safeNumber(ohlcv, 0), this.safeNumber(ohlcv, 3), this.safeNumber(ohlcv, 5)};
    }

    public async override Task<object> fetchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniex#fetchOHLCV
        * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe the length of time each candle represents
        * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
        * @param {int|undefined} limit the maximum amount of candles to fetch
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "interval", this.safeString(this.timeframes, timeframe, timeframe) },
        };
        if (isTrue(!isEqual(since, null)))
        {
            ((Dictionary<string, object>)request)["startTime"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            // limit should in between 100 and 500
            ((Dictionary<string, object>)request)["limit"] = limit;
        }
        object response = await this.publicGetMarketsSymbolCandles(this.extend(request, parameters));
        //
        //     [
        //         [
        //             "22814.01",
        //             "22937.42",
        //             "22832.57",
        //             "22937.42",
        //             "3916.58764051",
        //             "0.171199",
        //             "2982.64647063",
        //             "0.130295",
        //             33,
        //             0,
        //             "22877.449915304470460711",
        //             "MINUTE_5",
        //             1659664800000,
        //             1659665099999
        //         ]
        //     ]
        //
        return this.parseOHLCVs(response, market, timeframe, since, limit);
    }

    public async override Task<object> loadMarkets(object reload = null, object parameters = null)
    {
        reload ??= false;
        parameters ??= new Dictionary<string, object>();
        object markets = await base.loadMarkets(reload, parameters);
        object currenciesByNumericId = this.safeValue(this.options, "currenciesByNumericId");
        if (isTrue(isTrue((isEqual(currenciesByNumericId, null))) || isTrue(reload)))
        {
            ((Dictionary<string, object>)this.options)["currenciesByNumericId"] = this.indexBy(this.currencies, "numericId");
        }
        return markets;
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name poloniex#fetchMarkets
        * @description retrieves data on all markets for poloniex
        * @param {object} params extra parameters specific to the exchange api endpoint
        * @returns {[object]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object markets = await this.publicGetMarkets(parameters);
        //
        //     [
        //         {
        //             "symbol" : "BTS_BTC",
        //             "baseCurrencyName" : "BTS",
        //             "quoteCurrencyName" : "BTC",
        //             "displayName" : "BTS/BTC",
        //             "state" : "NORMAL",
        //             "visibleStartTime" : 1659018816626,
        //             "tradableStartTime" : 1659018816626,
        //             "symbolTradeLimit" : {
        //                 "symbol" : "BTS_BTC",
        //                 "priceScale" : 10,
        //                 "quantityScale" : 0,
        //                 "amountScale" : 8,
        //                 "minQuantity" : "100",
        //                 "minAmount" : "0.00001",
        //                 "highestBid" : "0",
        //                 "lowestAsk" : "0"
        //             }
        //         }
        //     ]
        //
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(markets)); postFixIncrement(ref i))
        {
            object market = this.safeValue(markets, i);
            object id = this.safeString(market, "symbol");
            object baseId = this.safeString(market, "baseCurrencyName");
            object quoteId = this.safeString(market, "quoteCurrencyName");
            object bs = this.safeCurrencyCode(baseId);
            object quote = this.safeCurrencyCode(quoteId);
            object state = this.safeString(market, "state");
            object active = isEqual(state, "NORMAL");
            object symbolTradeLimit = this.safeValue(market, "symbolTradeLimit");
            // these are known defaults
            ((List<object>)result).Add(new Dictionary<string, object>() {
                { "id", id },
                { "symbol", add(add(bs, "/"), quote) },
                { "base", bs },
                { "quote", quote },
                { "settle", null },
                { "baseId", baseId },
                { "quoteId", quoteId },
                { "settleId", null },
                { "type", "spot" },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "active", active },
                { "contract", false },
                { "linear", null },
                { "inverse", null },
                { "contractSize", null },
                { "expiry", null },
                { "expiryDatetime", null },
                { "strike", null },
                { "optionType", null },
                { "precision", new Dictionary<string, object>() {
                    { "amount", this.parseNumber(this.parsePrecision(this.safeString(symbolTradeLimit, "quantityScale"))) },
                    { "price", this.parseNumber(this.parsePrecision(this.safeString(symbolTradeLimit, "priceScale"))) },
                } },
                { "limits", new Dictionary<string, object>() {
                    { "amount", new Dictionary<string, object>() {
                        { "min", this.safeNumber(symbolTradeLimit, "minQuantity") },
                        { "max", null },
                    } },
                    { "price", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "cost", new Dictionary<string, object>() {
                        { "min", this.safeNumber(symbolTradeLimit, "minAmount") },
                        { "max", null },
                    } },
                } },
                { "info", market },
            });
        }
        return result;
    }

    public async override Task<object> fetchTime(object parameters = null)
    {
        /**
        * @method
        * @name poloniex#fetchTime
        * @description fetches the current integer timestamp in milliseconds from the exchange server
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {int} the current integer timestamp in milliseconds from the exchange server
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetTimestamp(parameters);
        return this.safeInteger(response, "serverTime");
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        //     {
        //         "symbol" : "BTC_USDT",
        //         "open" : "22814.93",
        //         "low" : "22441.90",
        //         "high" : "23413.00",
        //         "close" : "23148.66",
        //         "quantity" : "71.743706",
        //         "amount" : "1638994.52683452",
        //         "tradeCount" : 3893,
        //         "startTime" : 1659605760000,
        //         "closeTime" : 1659692161077,
        //         "displayName" : "BTC/USDT",
        //         "dailyChange" : "0.0152",
        //         "ts" : 1659692169838
        //     }
        //
        object timestamp = this.safeInteger(ticker, "ts");
        object marketId = this.safeString(ticker, "symbol");
        market = this.safeMarket(marketId);
        object close = this.safeString(ticker, "close");
        object relativeChange = this.safeString(ticker, "percentChange");
        object percentage = Precise.stringMul(relativeChange, "100");
        return this.safeTicker(new Dictionary<string, object>() {
            { "id", marketId },
            { "symbol", getValue(market, "symbol") },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "high") },
            { "low", this.safeString(ticker, "low") },
            { "bid", null },
            { "bidVolume", null },
            { "ask", null },
            { "askVolume", null },
            { "vwap", null },
            { "open", this.safeString(ticker, "open") },
            { "close", close },
            { "last", close },
            { "previousClose", null },
            { "change", null },
            { "percentage", percentage },
            { "average", null },
            { "baseVolume", this.safeString(ticker, "quantity") },
            { "quoteVolume", this.safeString(ticker, "amount") },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniex#fetchTickers
        * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
        * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object response = await this.publicGetMarketsTicker24h(parameters);
        //
        //     [
        //         {
        //             "symbol" : "KUB_USDD",
        //             "open" : "0",
        //             "low" : "0",
        //             "high" : "0",
        //             "close" : "0",
        //             "quantity" : "0",
        //             "amount" : "0",
        //             "tradeCount" : 0,
        //             "startTime" : 1659606240000,
        //             "closeTime" : 1659692648742,
        //             "displayName" : "KUB/USDD",
        //             "dailyChange" : "0.00",
        //             "ts" : 1659692648742
        //         }
        //     ]
        //
        return this.parseTickers(response, symbols);
    }

    public async override Task<object> fetchCurrencies(object parameters = null)
    {
        /**
        * @method
        * @name poloniex#fetchCurrencies
        * @description fetches all available currencies on an exchange
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {object} an associative dictionary of currencies
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetCurrencies(parameters);
        //
        //     [
        //         {
        //             "1CR": {
        //                 "id": 1,
        //                 "name": "1CRedit",
        //                 "description": "BTC Clone",
        //                 "type": "address",
        //                 "withdrawalFee": "0.01000000",
        //                 "minConf": 10000,
        //                 "depositAddress": null,
        //                 "blockchain": "1CR",
        //                 "delisted": false,
        //                 "tradingState": "NORMAL",
        //                 "walletState": "DISABLED",
        //                 "parentChain": null,
        //                 "isMultiChain": false,
        //                 "isChildChain": false,
        //                 "childChains": []
        //             }
        //         }
        //     ]
        //
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object item = this.safeValue(response, i);
            object ids = new List<string>(((Dictionary<string,object>)item).Keys);
            object id = this.safeValue(ids, 0);
            object currency = this.safeValue(item, id);
            object code = this.safeCurrencyCode(id);
            object delisted = this.safeValue(currency, "delisted");
            object walletState = this.safeString(currency, "walletState");
            object enabled = isEqual(walletState, "ENABLED");
            object listed = !isTrue(delisted);
            object active = isTrue(listed) && isTrue(enabled);
            object numericId = this.safeInteger(currency, "id");
            object fee = this.safeNumber(currency, "withdrawalFee");
            ((Dictionary<string, object>)result)[(string)code] = new Dictionary<string, object>() {
                { "id", id },
                { "numericId", numericId },
                { "code", code },
                { "info", currency },
                { "name", getValue(currency, "name") },
                { "active", active },
                { "deposit", null },
                { "withdraw", null },
                { "fee", fee },
                { "precision", null },
                { "limits", new Dictionary<string, object>() {
                    { "amount", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "withdraw", new Dictionary<string, object>() {
                        { "min", fee },
                        { "max", null },
                    } },
                } },
            };
        }
        return result;
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name poloniex#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = await this.publicGetMarketsSymbolTicker24h(this.extend(request, parameters));
        //
        //     {
        //         "symbol" : "BTC_USDT",
        //         "open" : "22814.93",
        //         "low" : "22441.90",
        //         "high" : "23413.00",
        //         "close" : "23148.66",
        //         "quantity" : "71.743706",
        //         "amount" : "1638994.52683452",
        //         "tradeCount" : 3893,
        //         "startTime" : 1659605760000,
        //         "closeTime" : 1659692161077,
        //         "displayName" : "BTC/USDT",
        //         "dailyChange" : "0.0152",
        //         "ts" : 1659692169838
        //     }
        //
        return this.parseTicker(response, market);
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // fetchTrades
        //
        //     {
        //         "id" : "60014521",
        //         "price" : "23162.94",
        //         "quantity" : "0.00009",
        //         "amount" : "2.0846646",
        //         "takerSide" : "SELL",
        //         "ts" : 1659684602042,
        //         "createTime" : 1659684602036
        //     }
        //
        // fetchMyTrades
        //
        //     {
        //         "id": "32164924331503616",
        //         "symbol": "LINK_USDT",
        //         "accountType": "SPOT",
        //         "orderId": "32164923987566592",
        //         "side": "SELL",
        //         "type": "MARKET",
        //         "matchRole": "TAKER",
        //         "createTime": 1648635115525,
        //         "price": "11",
        //         "quantity": "0.5",
        //         "amount": "5.5",
        //         "feeCurrency": "USDT",
        //         "feeAmount": "0.007975",
        //         "pageId": "32164924331503616",
        //         "clientOrderId": "myOwnId-321"
        //     }
        //
        // fetchOrderTrades (taker trades)
        //
        //     {
        //         "id": "30341456333942784",
        //         "symbol": "LINK_USDT",
        //         "accountType": "SPOT",
        //         "orderId": "30249408733945856",
        //         "side": "BUY",
        //         "type": "LIMIT",
        //         "matchRole": "MAKER",
        //         "createTime": 1648200366864,
        //         "price": "3.1",
        //         "quantity": "1",
        //         "amount": "3.1",
        //         "feeCurrency": "LINK",
        //         "feeAmount": "0.00145",
        //         "pageId": "30341456333942784",
        //         "clientOrderId": ""
        //     }
        //
        //
        object id = this.safeString2(trade, "id", "tradeID");
        object orderId = this.safeString(trade, "orderId");
        object timestamp = this.safeInteger2(trade, "ts", "createTime");
        object marketId = this.safeString(trade, "symbol");
        market = this.safeMarket(marketId, market, "_");
        object symbol = getValue(market, "symbol");
        object side = this.safeStringLower(trade, "side");
        object fee = null;
        object priceString = this.safeString(trade, "price");
        object amountString = this.safeString(trade, "quantity");
        object costString = this.safeString(trade, "amount");
        object feeCurrencyId = this.safeString(trade, "feeCurrency");
        object feeCostString = this.safeString(trade, "feeAmount");
        if (isTrue(!isEqual(feeCostString, null)))
        {
            object feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
            fee = new Dictionary<string, object>() {
                { "cost", feeCostString },
                { "currency", feeCurrencyCode },
            };
        }
        return this.safeTrade(new Dictionary<string, object>() {
            { "id", id },
            { "info", trade },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", symbol },
            { "order", orderId },
            { "type", this.safeStringLower(trade, "type") },
            { "side", side },
            { "takerOrMaker", this.safeStringLower(trade, "matchRole") },
            { "price", priceString },
            { "amount", amountString },
            { "cost", costString },
            { "fee", fee },
        }, market);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniex#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
        * @param {int|undefined} limit the maximum amount of trades to fetch
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((Dictionary<string, object>)request)["limit"] = limit;
        }
        object trades = await this.publicGetMarketsSymbolTrades(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "id" : "60014521",
        //             "price" : "23162.94",
        //             "quantity" : "0.00009",
        //             "amount" : "2.0846646",
        //             "takerSide" : "SELL",
        //             "ts" : 1659684602042,
        //             "createTime" : 1659684602036
        //         }
        //     ]
        //
        return this.parseTrades(trades, market, since, limit);
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniex#fetchMyTrades
        * @description fetch all trades made by the user
        * @param {string|undefined} symbol unified market symbol
        * @param {int|undefined} since the earliest time in ms to fetch trades for
        * @param {int|undefined} limit the maximum number of trades structures to retrieve
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(since, null)))
        {
            ((Dictionary<string, object>)request)["startTime"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((Dictionary<string, object>)request)["limit"] = parseInt(limit);
        }
        object response = await this.privateGetTrades(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "id": "32164924331503616",
        //             "symbol": "LINK_USDT",
        //             "accountType": "SPOT",
        //             "orderId": "32164923987566592",
        //             "side": "SELL",
        //             "type": "MARKET",
        //             "matchRole": "TAKER",
        //             "createTime": 1648635115525,
        //             "price": "11",
        //             "quantity": "0.5",
        //             "amount": "5.5",
        //             "feeCurrency": "USDT",
        //             "feeAmount": "0.007975",
        //             "pageId": "32164924331503616",
        //             "clientOrderId": "myOwnId-321"
        //         }
        //     ]
        //
        object result = this.parseTrades(response, market);
        return ((object)this.filterBySinceLimit(result, since, limit));
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "NEW", "open" },
            { "PARTIALLY_FILLED", "open" },
            { "FILLED", "closed" },
            { "PENDING_CANCEL", "canceled" },
            { "PARTIALLY_CANCELED", "canceled" },
            { "CANCELED", "canceled" },
            { "FAILED", "canceled" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // fetchOpenOrder
        //
        //     {
        //         "id" : "7xxxxxxxxxxxxxxx6",
        //         "clientOrderId" : "",
        //         "symbol" : "ETH_USDT",
        //         "state" : "NEW",
        //         "accountType" : "SPOT",
        //         "side" : "BUY",
        //         "type" : "LIMIT",
        //         "timeInForce" : "GTC",
        //         "quantity" : "0.001",
        //         "price" : "1600",
        //         "avgPrice" : "0",
        //         "amount" : "0",
        //         "filledQuantity" : "0",
        //         "filledAmount" : "0",
        //         "createTime" : 16xxxxxxxxx26,
        //         "updateTime" : 16xxxxxxxxx36
        //     }
        //
        // fetchOpenOrders
        //
        //     {
        //         "id": "24993088082542592",
        //         "clientOrderId": "",
        //         "symbol": "ELON_USDC",
        //         "state": "NEW",
        //         "accountType": "SPOT",
        //         "side": "SELL",
        //         "type": "MARKET",
        //         "timeInForce": "GTC",
        //         "quantity": "1.00",
        //         "price": "0.00",
        //         "avgPrice": "0.00",
        //         "amount": "0.00",
        //         "filledQuantity": "0.00",
        //         "filledAmount": "0.00",
        //         "createTime": 1646925216548,
        //         "updateTime": 1646925216548
        //     }
        //
        // createOrder, editOrder
        //
        //     {
        //         "id": "29772698821328896",
        //         "clientOrderId": "1234Abc"
        //     }
        //
        object timestamp = this.safeInteger2(order, "timestamp", "createTime");
        if (isTrue(isEqual(timestamp, null)))
        {
            timestamp = this.parse8601(this.safeString(order, "date"));
        }
        object marketId = this.safeString(order, "symbol");
        market = this.safeMarket(marketId, market, "_");
        object symbol = getValue(market, "symbol");
        object resultingTrades = this.safeValue(order, "resultingTrades");
        if (!isTrue((resultingTrades.GetType().IsGenericType && resultingTrades.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>)))))
        {
            resultingTrades = this.safeValue(resultingTrades, this.safeString(market, "id", marketId));
        }
        object price = this.safeString2(order, "price", "rate");
        object amount = this.safeString(order, "quantity");
        object filled = this.safeString(order, "filledQuantity");
        object status = this.parseOrderStatus(this.safeString(order, "state"));
        object side = this.safeStringLower(order, "side");
        object rawType = this.safeString(order, "type");
        object type = this.parseOrderType(rawType);
        object id = this.safeString2(order, "orderNumber", "id");
        object fee = null;
        object feeCurrency = this.safeString(order, "tokenFeeCurrency");
        object feeCost = null;
        object feeCurrencyCode = null;
        object rate = this.safeString(order, "fee");
        if (isTrue(isEqual(feeCurrency, null)))
        {
            feeCurrencyCode = ((bool) isTrue((isEqual(side, "buy")))) ? getValue(market, "base") : getValue(market, "quote");
        } else
        {
            // poloniex accepts a 30% discount to pay fees in TRX
            feeCurrencyCode = this.safeCurrencyCode(feeCurrency);
            feeCost = this.safeString(order, "tokenFee");
        }
        if (isTrue(!isEqual(feeCost, null)))
        {
            fee = new Dictionary<string, object>() {
                { "rate", rate },
                { "cost", feeCost },
                { "currency", feeCurrencyCode },
            };
        }
        object clientOrderId = this.safeString(order, "clientOrderId");
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "id", id },
            { "clientOrderId", clientOrderId },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", this.safeInteger(order, "updateTime") },
            { "status", status },
            { "symbol", symbol },
            { "type", type },
            { "timeInForce", this.safeString(order, "timeInForce") },
            { "postOnly", null },
            { "side", side },
            { "price", price },
            { "stopPrice", null },
            { "triggerPrice", null },
            { "cost", null },
            { "average", this.safeString(order, "avgPrice") },
            { "amount", amount },
            { "filled", filled },
            { "remaining", null },
            { "trades", resultingTrades },
            { "fee", fee },
        }, market);
    }

    public virtual object parseOrderType(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "MARKET", "market" },
            { "LIMIT", "limit" },
            { "STOP-LIMIT", "limit" },
            { "STOP-MARKET", "market" },
        };
        return this.safeString(statuses, status, status);
    }

    public virtual object parseOpenOrders(object orders, object market, object result)
    {
        for (object i = 0; isLessThan(i, getArrayLength(orders)); postFixIncrement(ref i))
        {
            object order = getValue(orders, i);
            object extended = this.extend(order, new Dictionary<string, object>() {
                { "status", "open" },
                { "type", "limit" },
                { "side", getValue(order, "type") },
                { "price", getValue(order, "rate") },
            });
            ((List<object>)result).Add(this.parseOrder(extended, market));
        }
        return result;
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniex#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @param {string|undefined} symbol unified market symbol
        * @param {int|undefined} since the earliest time in ms to fetch open orders for
        * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((Dictionary<string, object>)request)["symbol"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((Dictionary<string, object>)request)["limit"] = limit;
        }
        object response = await this.privateGetOrders(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "id" : "7xxxxxxxxxxxxxxx6",
        //             "clientOrderId" : "",
        //             "symbol" : "ETH_USDT",
        //             "state" : "NEW",
        //             "accountType" : "SPOT",
        //             "side" : "BUY",
        //             "type" : "LIMIT",
        //             "timeInForce" : "GTC",
        //             "quantity" : "0.001",
        //             "price" : "1600",
        //             "avgPrice" : "0",
        //             "amount" : "0",
        //             "filledQuantity" : "0",
        //             "filledAmount" : "0",
        //             "createTime" : 16xxxxxxxxx26,
        //             "updateTime" : 16xxxxxxxxx36
        //         }
        //     ]
        //
        object extension = new Dictionary<string, object>() {
            { "status", "open" },
        };
        return this.parseOrders(response, market, since, limit, extension);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniex#createOrder
        * @description create a trade order
        * @see https://docs.poloniex.com/#authenticated-endpoints-orders-create-order
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        // if (type === 'market') {
        //     throw new ExchangeError (this.id + ' createOrder() does not accept market orders');
        // }
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        if (!isTrue(getValue(market, "spot")))
        {
            throw new NotSupported ((string)add(add(add(this.id, " createOrder() does not support "), getValue(market, "type")), " orders, only spot orders are accepted")) ;
        }
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "side", side },
        };
        object orderRequest = this.orderRequest(symbol, type, side, amount, request, price, parameters);
        object response = await this.privatePostOrders(this.extend(getValue(orderRequest, 0), getValue(orderRequest, 1)));
        //
        //     {
        //         "id" : "78923648051920896",
        //         "clientOrderId" : ""
        //     }
        //
        response = this.extend(response, new Dictionary<string, object>() {
            { "type", side },
        });
        return this.parseOrder(response, market);
    }

    public virtual object orderRequest(object symbol, object type, object side, object amount, object request, object price = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object market = this.market(symbol);
        object upperCaseType = ((string)type).ToUpper();
        object isMarket = isEqual(upperCaseType, "MARKET");
        object isPostOnly = this.isPostOnly(isMarket, isEqual(upperCaseType, "LIMIT_MAKER"), parameters);
        if (isTrue(isPostOnly))
        {
            upperCaseType = "LIMIT_MAKER";
            parameters = this.omit(parameters, "postOnly");
        }
        ((Dictionary<string, object>)request)["type"] = upperCaseType;
        if (isTrue(isMarket))
        {
            if (isTrue(isEqual(side, "buy")))
            {
                ((Dictionary<string, object>)request)["amount"] = this.currencyToPrecision(getValue(market, "quote"), amount);
            } else
            {
                ((Dictionary<string, object>)request)["quantity"] = this.amountToPrecision(symbol, amount);
            }
        } else
        {
            ((Dictionary<string, object>)request)["quantity"] = this.amountToPrecision(symbol, amount);
            ((Dictionary<string, object>)request)["price"] = this.priceToPrecision(symbol, price);
        }
        object clientOrderId = this.safeString(parameters, "clientOrderId");
        if (isTrue(!isEqual(clientOrderId, null)))
        {
            ((Dictionary<string, object>)request)["clientOrderId"] = clientOrderId;
            parameters = this.omit(parameters, "clientOrderId");
        }
        // remember the timestamp before issuing the request
        return new List<object>() {request, parameters};
    }

    public async override Task<object> editOrder(object id, object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniex#editOrder
        * @description edit a trade order
        * @see https://docs.poloniex.com/#authenticated-endpoints-orders-cancel-replace-order
        * @param {string} id order id
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of the currency you want to trade in units of the base currency
        * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        if (!isTrue(getValue(market, "spot")))
        {
            throw new NotSupported ((string)add(add(add(this.id, " editOrder() does not support "), getValue(market, "type")), " orders, only spot orders are accepted")) ;
        }
        object request = new Dictionary<string, object>() {
            { "id", id },
        };
        object orderRequest = this.orderRequest(symbol, type, side, amount, request, price, parameters);
        object response = await this.privatePutOrdersId(this.extend(getValue(orderRequest, 0), getValue(orderRequest, 1)));
        //
        //     {
        //         "id" : "78923648051920896",
        //         "clientOrderId" : ""
        //     }
        //
        response = this.extend(response, new Dictionary<string, object>() {
            { "type", side },
        });
        return this.parseOrder(response, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniex#cancelOrder
        * @description cancels an open order
        * @param {string} id order id
        * @param {string|undefined} symbol unified symbol of the market the order was made in
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object clientOrderId = this.safeValue(parameters, "clientOrderId");
        if (isTrue(!isEqual(clientOrderId, null)))
        {
            id = clientOrderId;
        }
        ((Dictionary<string, object>)request)["id"] = id;
        parameters = this.omit(parameters, "clientOrderId");
        return await this.privateDeleteOrdersId(this.extend(request, parameters));
    }

    public async override Task<object> cancelAllOrders(object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniex#cancelAllOrders
        * @description cancel all open orders
        * @param {string|undefined} symbol unified market symbol, only orders in the market of this symbol are cancelled when symbol is not undefined
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((Dictionary<string, object>)request)["symbols"] = new List<object>() {getValue(market, "id")};
        }
        object response = await this.privateDeleteOrders(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "orderId" : "78xxxxxxxx80",
        //             "clientOrderId" : "",
        //             "state" : "NEW",
        //             "code" : 200,
        //             "message" : ""
        //         }, {
        //             "orderId" : "78xxxxxxxxx80",
        //             "clientOrderId" : "",
        //             "state" : "NEW",
        //             "code" : 200,
        //             "message" : ""
        //         }
        //     ]
        //
        return response;
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniex#fetchOrder
        * @description fetch an order by it's id
        * @param {string} id order id
        * @param {string|undefined} symbol unified market symbol, default is undefined
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        id = ((object)id).ToString();
        object request = new Dictionary<string, object>() {
            { "id", id },
        };
        object response = await this.privateGetOrdersId(this.extend(request, parameters));
        //
        //     {
        //         "id": "21934611974062080",
        //         "clientOrderId": "123",
        //         "symbol": "TRX_USDC",
        //         "state": "NEW",
        //         "accountType": "SPOT",
        //         "side": "SELL",
        //         "type": "LIMIT",
        //         "timeInForce": "GTC",
        //         "quantity": "1.00",
        //         "price": "10.00",
        //         "avgPrice": "0.00",
        //         "amount": "0.00",
        //         "filledQuantity": "0.00",
        //         "filledAmount": "0.00",
        //         "createTime": 1646196019020,
        //         "updateTime": 1646196019020
        //     }
        //
        return this.extend(this.parseOrder(response), new Dictionary<string, object>() {
            { "id", id },
        });
    }

    public async override Task<object> fetchOrderStatus(object id, object symbol = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object orders = await this.fetchOpenOrders(symbol, null, null, parameters);
        object indexed = this.indexBy(orders, "id");
        return ((bool) isTrue((((Dictionary<string,object>)indexed).ContainsKey(toStringOrNull(id))))) ? "open" : "closed";
    }

    public async virtual Task<object> fetchOrderTrades(object id, object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniex#fetchOrderTrades
        * @description fetch all the trades made from a single order
        * @param {string} id order id
        * @param {string|undefined} symbol unified market symbol
        * @param {int|undefined} since the earliest time in ms to fetch trades for
        * @param {int|undefined} limit the maximum number of trades to retrieve
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "id", id },
        };
        object trades = await this.privateGetOrdersIdTrades(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "id": "30341456333942784",
        //             "symbol": "LINK_USDT",
        //             "accountType": "SPOT",
        //             "orderId": "30249408733945856",
        //             "side": "BUY",
        //             "type": "LIMIT",
        //             "matchRole": "MAKER",
        //             "createTime": 1648200366864,
        //             "price": "3.1",
        //             "quantity": "1",
        //             "amount": "3.1",
        //             "feeCurrency": "LINK",
        //             "feeAmount": "0.00145",
        //             "pageId": "30341456333942784",
        //             "clientOrderId": ""
        //         }
        //     ]
        //
        return this.parseTrades(trades);
    }

    public virtual object parseBalance(object response)
    {
        object result = new Dictionary<string, object>() {
            { "info", response },
            { "timestamp", null },
            { "datetime", null },
        };
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object account = this.safeValue(response, i, new Dictionary<string, object>() {});
            object balances = this.safeValue(account, "balances");
            for (object j = 0; isLessThan(j, getArrayLength(balances)); postFixIncrement(ref j))
            {
                object balance = this.safeValue(balances, j);
                object currencyId = this.safeString(balance, "currency");
                object code = this.safeCurrencyCode(currencyId);
                object newAccount = this.account();
                ((Dictionary<string, object>)newAccount)["free"] = this.safeString(balance, "available");
                ((Dictionary<string, object>)newAccount)["used"] = this.safeString(balance, "hold");
                ((Dictionary<string, object>)result)[(string)code] = newAccount;
            }
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name poloniex#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "accountType", "SPOT" },
        };
        object response = await this.privateGetAccountsBalances(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "accountId" : "7xxxxxxxxxx8",
        //             "accountType" : "SPOT",
        //             "balances" : [
        //                 {
        //                     "currencyId" : "214",
        //                     "currency" : "USDT",
        //                     "available" : "2.00",
        //                     "hold" : "0.00"
        //                 }
        //             ]
        //         }
        //     ]
        //
        return this.parseBalance(response);
    }

    public async override Task<object> fetchTradingFees(object parameters = null)
    {
        /**
        * @method
        * @name poloniex#fetchTradingFees
        * @description fetch the trading fees for multiple markets
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetFeeinfo(parameters);
        //
        //     {
        //         "trxDiscount" : false,
        //         "makerRate" : "0.00145",
        //         "takerRate" : "0.00155",
        //         "volume30D" : "0.00"
        //     }
        //
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(this.symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(this.symbols, i);
            ((Dictionary<string, object>)result)[(string)symbol] = new Dictionary<string, object>() {
                { "info", response },
                { "symbol", symbol },
                { "maker", this.safeNumber(response, "makerRate") },
                { "taker", this.safeNumber(response, "takerRate") },
                { "percentage", true },
                { "tierBased", true },
            };
        }
        return result;
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniex#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int|undefined} limit the maximum amount of order book entries to return
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((Dictionary<string, object>)request)["limit"] = limit; // The default value of limit is 10. Valid limit values are: 5, 10, 20, 50, 100, 150.
        }
        object response = await this.publicGetMarketsSymbolOrderBook(this.extend(request, parameters));
        //
        //     {
        //         "time" : 1659695219507,
        //         "scale" : "-1",
        //         "asks" : [ "23139.82", "0.317981", "23140", "0.191091", "23170.06", "0.01", "23200", "0.107758", "23230.55", "0.01", "23247.2", "0.154", "23254", "0.005121", "23263", "0.038", "23285.4", "0.308", "23300", "0.108896" ],
        //         "bids" : [ "23139.74", "0.432092", "23139.73", "0.198592", "23123.21", "0.000886", "23123.2", "0.308", "23121.4", "0.154", "23105", "0.000789", "23100", "0.078175", "23069.1", "0.026276", "23068.83", "0.001329", "23051", "0.000048" ],
        //         "ts" : 1659695219513
        //     }
        //
        object timestamp = this.safeInteger(response, "time");
        object asks = this.safeValue(response, "asks");
        object bids = this.safeValue(response, "bids");
        object asksResult = new List<object>() {};
        object bidsResult = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(asks)); postFixIncrement(ref i))
        {
            if (isTrue(isLessThan((mod(i, 2)), 1)))
            {
                object price = this.safeNumber(asks, i);
                object amount = this.safeNumber(asks, this.sum(i, 1));
                ((List<object>)asksResult).Add(new List<object>() {price, amount});
            }
        }
        for (object i = 0; isLessThan(i, getArrayLength(bids)); postFixIncrement(ref i))
        {
            if (isTrue(isLessThan((mod(i, 2)), 1)))
            {
                object price = this.safeNumber(bids, i);
                object amount = this.safeNumber(bids, this.sum(i, 1));
                ((List<object>)bidsResult).Add(new List<object>() {price, amount});
            }
        }
        return ((object)new Dictionary<string, object>() {
            { "symbol", getValue(market, "symbol") },
            { "bids", this.sortBy(bidsResult, 0, true) },
            { "asks", this.sortBy(asksResult, 0) },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "nonce", null },
        });
    }

    public async override Task<object> createDepositAddress(object code, object parameters = null)
    {
        /**
        * @method
        * @name poloniex#createDepositAddress
        * @description create a currency deposit address
        * @param {string} code unified currency code of the currency for the deposit address
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
        };
        object networks = this.safeValue(this.options, "networks", new Dictionary<string, object>() {});
        object network = this.safeStringUpper(parameters, "network"); // this line allows the user to specify either ERC20 or ETH
        network = this.safeString(networks, network, network); // handle ERC20>ETH alias
        if (isTrue(!isEqual(network, null)))
        {
            ((Dictionary<string, object>)request)["currency"] = add(((Dictionary<string, object>)request)["currency"], network); // when network the currency need to be changed to currency+network https://docs.poloniex.com/#withdraw on MultiChain Currencies section
            parameters = this.omit(parameters, "network");
        } else
        {
            if (isTrue(isEqual(getValue(currency, "id"), "USDT")))
            {
                throw new ArgumentsRequired ((string)add(add(add(this.id, " createDepositAddress requires a network parameter for "), code), ".")) ;
            }
        }
        object response = await this.privatePostWalletsAddress(this.extend(request, parameters));
        //
        //     {
        //         "address" : "0xfxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxf"
        //     }
        //
        object address = this.safeString(response, "address");
        object tag = null;
        this.checkAddress(address);
        if (isTrue(!isEqual(currency, null)))
        {
            object depositAddress = this.safeString(getValue(currency, "info"), "depositAddress");
            if (isTrue(!isEqual(depositAddress, null)))
            {
                tag = address;
                address = depositAddress;
            }
        }
        return new Dictionary<string, object>() {
            { "currency", code },
            { "address", address },
            { "tag", tag },
            { "network", network },
            { "info", response },
        };
    }

    public async override Task<object> fetchDepositAddress(object code, object parameters = null)
    {
        /**
        * @method
        * @name poloniex#fetchDepositAddress
        * @description fetch the deposit address for a currency associated with this account
        * @param {string} code unified currency code
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
        };
        object networks = this.safeValue(this.options, "networks", new Dictionary<string, object>() {});
        object network = this.safeStringUpper(parameters, "network"); // this line allows the user to specify either ERC20 or ETH
        network = this.safeString(networks, network, network); // handle ERC20>ETH alias
        if (isTrue(!isEqual(network, null)))
        {
            ((Dictionary<string, object>)request)["currency"] = add(((Dictionary<string, object>)request)["currency"], network); // when network the currency need to be changed to currency+network https://docs.poloniex.com/#withdraw on MultiChain Currencies section
            parameters = this.omit(parameters, "network");
        } else
        {
            if (isTrue(isEqual(getValue(currency, "id"), "USDT")))
            {
                throw new ArgumentsRequired ((string)add(add(add(this.id, " fetchDepositAddress requires a network parameter for "), code), ".")) ;
            }
        }
        object response = await this.privateGetWalletsAddresses(this.extend(request, parameters));
        //
        //     {
        //         "USDTTRON" : "Txxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxp"
        //     }
        //
        object address = this.safeString(response, getValue(request, "currency"));
        object tag = null;
        this.checkAddress(address);
        if (isTrue(!isEqual(currency, null)))
        {
            object depositAddress = this.safeString(getValue(currency, "info"), "depositAddress");
            if (isTrue(!isEqual(depositAddress, null)))
            {
                tag = address;
                address = depositAddress;
            }
        }
        return new Dictionary<string, object>() {
            { "currency", code },
            { "address", address },
            { "tag", tag },
            { "network", network },
            { "info", response },
        };
    }

    public async override Task<object> transfer(object code, object amount, object fromAccount, object toAccount, object parameters = null)
    {
        /**
        * @method
        * @name poloniex#transfer
        * @description transfer currency internally between wallets on the same account
        * @param {string} code unified currency code
        * @param {float} amount amount to transfer
        * @param {string} fromAccount account to transfer from
        * @param {string} toAccount account to transfer to
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/#/?id=transfer-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        amount = this.currencyToPrecision(code, amount);
        object accountsByType = this.safeValue(this.options, "accountsByType", new Dictionary<string, object>() {});
        object fromId = this.safeString(accountsByType, fromAccount, fromAccount);
        object toId = this.safeString(accountsByType, toAccount, fromAccount);
        object request = new Dictionary<string, object>() {
            { "amount", amount },
            { "currency", getValue(currency, "id") },
            { "fromAccount", fromId },
            { "toAccount", toId },
        };
        object response = await this.privatePostAccountsTransfer(this.extend(request, parameters));
        //
        //    {
        //        success: '1',
        //        message: 'Transferred 1.00000000 USDT from exchange to lending account.'
        //    }
        //
        return this.parseTransfer(response, currency);
    }

    public virtual object parseTransferStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "1", "ok" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseTransfer(object transfer, object currency = null)
    {
        //
        //    {
        //        success: '1',
        //        message: 'Transferred 1.00000000 USDT from exchange to lending account.'
        //    }
        //
        object message = this.safeString(transfer, "message");
        object words = ((string)message).Split((string)" ").ToList<object>();
        object amount = this.safeNumber(words, 1);
        object currencyId = this.safeString(words, 2);
        object fromAccountId = this.safeString(words, 4);
        object toAccountId = this.safeString(words, 6);
        object accountsById = this.safeValue(this.options, "accountsById", new Dictionary<string, object>() {});
        return new Dictionary<string, object>() {
            { "info", transfer },
            { "id", null },
            { "timestamp", null },
            { "datetime", null },
            { "currency", this.safeCurrencyCode(currencyId, currency) },
            { "amount", amount },
            { "fromAccount", this.safeString(accountsById, fromAccountId) },
            { "toAccount", this.safeString(accountsById, toAccountId) },
            { "status", this.parseOrderStatus(this.safeString(transfer, "success", "failed")) },
        };
    }

    public async override Task<object> withdraw(object code, object amount, object address, object tag = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniex#withdraw
        * @description make a withdrawal
        * @param {string} code unified currency code
        * @param {float} amount the amount to withdraw
        * @param {string} address the address to withdraw to
        * @param {string|undefined} tag
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
                var tagparametersVariable = this.handleWithdrawTagAndParams(tag, parameters);
        tag = ((List<object>)tagparametersVariable)[0];
        parameters = ((List<object>)tagparametersVariable)[1];
        this.checkAddress(address);
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
            { "amount", amount },
            { "address", address },
        };
        if (isTrue(!isEqual(tag, null)))
        {
            ((Dictionary<string, object>)request)["paymentId"] = tag;
        }
        object networks = this.safeValue(this.options, "networks", new Dictionary<string, object>() {});
        object network = this.safeStringUpper(parameters, "network"); // this line allows the user to specify either ERC20 or ETH
        network = this.safeString(networks, network, network); // handle ERC20>ETH alias
        if (isTrue(!isEqual(network, null)))
        {
            ((Dictionary<string, object>)request)["currency"] = add(((Dictionary<string, object>)request)["currency"], network); // when network the currency need to be changed to currency+network https://docs.poloniex.com/#withdraw on MultiChain Currencies section
            parameters = this.omit(parameters, "network");
        }
        object response = await this.privatePostWalletsWithdraw(this.extend(request, parameters));
        //
        //     {
        //         response: 'Withdrew 1.00000000 USDT.',
        //         email2FA: false,
        //         withdrawalNumber: 13449869
        //     }
        //
        return this.parseTransaction(response, currency);
    }

    public async virtual Task<object> fetchTransactionsHelper(object code = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object year = 31104000; // 60 * 60 * 24 * 30 * 12 = one year of history, why not
        object now = this.seconds();
        object start = ((bool) isTrue((!isEqual(since, null)))) ? parseInt(((object)(divide(since, 1000))).ToString()) : subtract(now, multiply(10, year));
        object request = new Dictionary<string, object>() {
            { "start", start },
            { "end", now },
        };
        object response = await this.privateGetWalletsActivity(this.extend(request, parameters));
        //
        //     {
        //         "adjustments":[],
        //         "deposits":[
        //             {
        //                 currency: "BTC",
        //                 address: "1MEtiqJWru53FhhHrfJPPvd2tC3TPDVcmW",
        //                 amount: "0.01063000",
        //                 confirmations:  1,
        //                 txid: "952b0e1888d6d491591facc0d37b5ebec540ac1efb241fdbc22bcc20d1822fb6",
        //                 timestamp:  1507916888,
        //                 status: "COMPLETE"
        //             },
        //             {
        //                 currency: "ETH",
        //                 address: "0x20108ba20b65c04d82909e91df06618107460197",
        //                 amount: "4.00000000",
        //                 confirmations: 38,
        //                 txid: "0x4be260073491fe63935e9e0da42bd71138fdeb803732f41501015a2d46eb479d",
        //                 timestamp: 1525060430,
        //                 status: "COMPLETE"
        //             }
        //         ],
        //         "withdrawals":[
        //             {
        //                 "withdrawalNumber":13449869,
        //                 "currency":"USDTTRON", // not documented in API docs, see commonCurrencies in describe()
        //                 "address":"TXGaqPW23JdRWhsVwS2mRsGsegbdnAd3Rw",
        //                 "amount":"1.00000000",
        //                 "fee":"0.00000000",
        //                 "timestamp":1591573420,
        //                 "status":"COMPLETE: dadf427224b3d44b38a2c13caa4395e4666152556ca0b2f67dbd86a95655150f",
        //                 "ipAddress":"x.x.x.x",
        //                 "canCancel":0,
        //                 "canResendEmail":0,
        //                 "paymentID":null,
        //                 "scope":"crypto"
        //             },
        //             {
        //                 withdrawalNumber: 8224394,
        //                 currency: "EMC2",
        //                 address: "EYEKyCrqTNmVCpdDV8w49XvSKRP9N3EUyF",
        //                 amount: "63.10796020",
        //                 fee: "0.01000000",
        //                 timestamp: 1510819838,
        //                 status: "COMPLETE: d37354f9d02cb24d98c8c4fc17aa42f475530b5727effdf668ee5a43ce667fd6",
        //                 ipAddress: "x.x.x.x"
        //             },
        //             {
        //                 withdrawalNumber: 9290444,
        //                 currency: "ETH",
        //                 address: "0x191015ff2e75261d50433fbd05bd57e942336149",
        //                 amount: "0.15500000",
        //                 fee: "0.00500000",
        //                 timestamp: 1514099289,
        //                 status: "COMPLETE: 0x12d444493b4bca668992021fd9e54b5292b8e71d9927af1f076f554e4bea5b2d",
        //                 ipAddress: "x.x.x.x"
        //             },
        //             {
        //                 withdrawalNumber: 11518260,
        //                 currency: "BTC",
        //                 address: "8JoDXAmE1GY2LRK8jD1gmAmgRPq54kXJ4t",
        //                 amount: "0.20000000",
        //                 fee: "0.00050000",
        //                 timestamp: 1527918155,
        //                 status: "COMPLETE: 1864f4ebb277d90b0b1ff53259b36b97fa1990edc7ad2be47c5e0ab41916b5ff",
        //                 ipAddress: "x.x.x.x"
        //             }
        //         ]
        //     }
        //
        return response;
    }

    public async override Task<object> fetchTransactions(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniex#fetchTransactions
        * @description fetch history of deposits and withdrawals
        * @param {string|undefined} code unified currency code for the currency of the transactions, default is undefined
        * @param {int|undefined} since timestamp in ms of the earliest transaction, default is undefined
        * @param {int|undefined} limit max number of transactions to return, default is undefined
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {object} a list of [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.fetchTransactionsHelper(code, since, limit, parameters);
        object currency = null;
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
        }
        object withdrawals = this.safeValue(response, "withdrawals", new List<object>() {});
        object deposits = this.safeValue(response, "deposits", new List<object>() {});
        object withdrawalTransactions = this.parseTransactions(withdrawals, currency, since, limit);
        object depositTransactions = this.parseTransactions(deposits, currency, since, limit);
        object transactions = this.arrayConcat(depositTransactions, withdrawalTransactions);
        return this.filterByCurrencySinceLimit(this.sortBy(transactions, "timestamp"), code, since, limit);
    }

    public async override Task<object> fetchWithdrawals(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniex#fetchWithdrawals
        * @description fetch all withdrawals made from an account
        * @param {string|undefined} code unified currency code
        * @param {int|undefined} since the earliest time in ms to fetch withdrawals for
        * @param {int|undefined} limit the maximum number of withdrawals structures to retrieve
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.fetchTransactionsHelper(code, since, limit, parameters);
        object currency = null;
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
        }
        object withdrawals = this.safeValue(response, "withdrawals", new List<object>() {});
        object transactions = this.parseTransactions(withdrawals, currency, since, limit);
        return this.filterByCurrencySinceLimit(transactions, code, since, limit);
    }

    public async override Task<object> fetchDepositWithdrawFees(object codes = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniex#fetchDepositWithdrawFees
        * @description fetch deposit and withdraw fees
        * @see https://docs.poloniex.com/#public-endpoints-reference-data-currency-information
        * @param {[string]|undefined} codes list of unified currency codes
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {[object]} a list of [fees structures]{@link https://docs.ccxt.com/#/?id=fee-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.publicGetCurrencies(this.extend(parameters, new Dictionary<string, object>() {
    { "includeMultiChainCurrencies", true },
}));
        //
        //     [
        //         {
        //             "1CR": {
        //                 "id": 1,
        //                 "name": "1CRedit",
        //                 "description": "BTC Clone",
        //                 "type": "address",
        //                 "withdrawalFee": "0.01000000",
        //                 "minConf": 10000,
        //                 "depositAddress": null,
        //                 "blockchain": "1CR",
        //                 "delisted": false,
        //                 "tradingState": "NORMAL",
        //                 "walletState": "DISABLED",
        //                 "parentChain": null,
        //                 "isMultiChain": false,
        //                 "isChildChain": false,
        //                 "childChains": []
        //             }
        //         }
        //     ]
        //
        object data = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object entry = getValue(response, i);
            object currencies = new List<string>(((Dictionary<string,object>)entry).Keys);
            object currencyId = this.safeString(currencies, 0);
            ((Dictionary<string, object>)data)[(string)currencyId] = getValue(entry, currencyId);
        }
        return this.parseDepositWithdrawFees(data, codes);
    }

    public override object parseDepositWithdrawFees(object response, object codes = null, object currencyIdKey = null)
    {
        //
        //         {
        //             "1CR": {
        //                 "id": 1,
        //                 "name": "1CRedit",
        //                 "description": "BTC Clone",
        //                 "type": "address",
        //                 "withdrawalFee": "0.01000000",
        //                 "minConf": 10000,
        //                 "depositAddress": null,
        //                 "blockchain": "1CR",
        //                 "delisted": false,
        //                 "tradingState": "NORMAL",
        //                 "walletState": "DISABLED",
        //                 "parentChain": null,
        //                 "isMultiChain": false,
        //                 "isChildChain": false,
        //                 "childChains": []
        //             },
        //         }
        //
        object depositWithdrawFees = new Dictionary<string, object>() {};
        codes = this.marketCodes(codes);
        object responseKeys = new List<string>(((Dictionary<string,object>)response).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(responseKeys)); postFixIncrement(ref i))
        {
            object currencyId = getValue(responseKeys, i);
            object code = this.safeCurrencyCode(currencyId);
            object feeInfo = getValue(response, currencyId);
            if (isTrue(isTrue((isEqual(codes, null))) || isTrue((this.inArray(code, codes)))))
            {
                ((Dictionary<string, object>)depositWithdrawFees)[(string)code] = this.parseDepositWithdrawFee(feeInfo, code);
                object childChains = this.safeValue(feeInfo, "childChains");
                object chainsLength = getArrayLength(childChains);
                if (isTrue(isGreaterThan(chainsLength, 0)))
                {
                    for (object j = 0; isLessThan(j, getArrayLength(childChains)); postFixIncrement(ref j))
                    {
                        object networkId = getValue(childChains, j);
                        networkId = ((string)networkId).Replace((string)code, (string)"");
                        object networkCode = this.networkIdToCode(networkId);
                        object networkInfo = this.safeValue(response, networkId);
                        object networkObject = new Dictionary<string, object>() {};
                        object withdrawFee = this.safeNumber(networkInfo, "withdrawalFee");
                        ((Dictionary<string, object>)networkObject)[(string)networkCode] = new Dictionary<string, object>() {
                            { "withdraw", new Dictionary<string, object>() {
                                { "fee", withdrawFee },
                                { "percentage", ((bool) isTrue((!isEqual(withdrawFee, null)))) ? false : null },
                            } },
                            { "deposit", new Dictionary<string, object>() {
                                { "fee", null },
                                { "percentage", null },
                            } },
                        };
                        ((Dictionary<string, object>)getValue(depositWithdrawFees, code))["networks"] = this.extend(getValue(getValue(depositWithdrawFees, code), "networks"), networkObject);
                    }
                }
            }
        }
        return depositWithdrawFees;
    }

    public override object parseDepositWithdrawFee(object fee, object currency = null)
    {
        object depositWithdrawFee = this.depositWithdrawFee(new Dictionary<string, object>() {});
        ((Dictionary<string, object>)getValue(depositWithdrawFee, "info"))[(string)currency] = fee;
        object networkId = this.safeString(fee, "blockchain");
        object withdrawFee = this.safeNumber(fee, "withdrawalFee");
        object withdrawResult = new Dictionary<string, object>() {
            { "fee", withdrawFee },
            { "percentage", ((bool) isTrue((!isEqual(withdrawFee, null)))) ? false : null },
        };
        object depositResult = new Dictionary<string, object>() {
            { "fee", null },
            { "percentage", null },
        };
        ((Dictionary<string, object>)depositWithdrawFee)["withdraw"] = withdrawResult;
        ((Dictionary<string, object>)depositWithdrawFee)["deposit"] = depositResult;
        object networkCode = this.networkIdToCode(networkId);
        ((Dictionary<string, object>)getValue(depositWithdrawFee, "networks"))[(string)networkCode] = new Dictionary<string, object>() {
            { "withdraw", withdrawResult },
            { "deposit", depositResult },
        };
        return depositWithdrawFee;
    }

    public async override Task<object> fetchDeposits(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniex#fetchDeposits
        * @description fetch all deposits made to an account
        * @param {string|undefined} code unified currency code
        * @param {int|undefined} since the earliest time in ms to fetch deposits for
        * @param {int|undefined} limit the maximum number of deposits structures to retrieve
        * @param {object} params extra parameters specific to the poloniex api endpoint
        * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.fetchTransactionsHelper(code, since, limit, parameters);
        object currency = null;
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
        }
        object deposits = this.safeValue(response, "deposits", new List<object>() {});
        object transactions = this.parseTransactions(deposits, currency, since, limit);
        return this.filterByCurrencySinceLimit(transactions, code, since, limit);
    }

    public virtual object parseTransactionStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "COMPLETE", "ok" },
            { "COMPLETED", "ok" },
            { "AWAITING APPROVAL", "pending" },
            { "AWAITING_APPROVAL", "pending" },
            { "PENDING", "pending" },
            { "PROCESSING", "pending" },
            { "COMPLETE ERROR", "failed" },
            { "COMPLETE_ERROR", "failed" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseTransaction(object transaction, object currency = null)
    {
        //
        // deposits
        //
        //     {
        //         "txid": "f49d489616911db44b740612d19464521179c76ebe9021af85b6de1e2f8d68cd",
        //         "amount": "49798.01987021",
        //         "status": "COMPLETE",
        //         "address": "DJVJZ58tJC8UeUv9Tqcdtn6uhWobouxFLT",
        //         "currency": "DOGE",
        //         "timestamp": 1524321838,
        //         "confirmations": 3371,
        //         "depositNumber": 134587098
        //     }
        //
        // withdrawals
        //
        //     {
        //         "withdrawalRequestsId": 7397527,
        //         "currency": "ETC",
        //         "address": "0x26419a62055af459d2cd69bb7392f5100b75e304",
        //         "amount": "13.19951600",
        //         "fee": "0.01000000",
        //         "timestamp": 1506010932,
        //         "status": "COMPLETED",
        //         "txid": "343346392f82ac16e8c2604f2a604b7b2382d0e9d8030f673821f8de4b5f5bk",
        //         "ipAddress": "1.2.3.4",
        //         "paymentID": null
        //     }
        //
        // withdraw
        //
        //     {
        //         "withdrawalRequestsId": 33485231
        //     }
        //
        object timestamp = this.safeTimestamp(transaction, "timestamp");
        object currencyId = this.safeString(transaction, "currency");
        object code = this.safeCurrencyCode(currencyId);
        object status = this.safeString(transaction, "status", "pending");
        status = this.parseTransactionStatus(status);
        object txid = this.safeString(transaction, "txid");
        object type = ((bool) isTrue((((Dictionary<string,object>)transaction).ContainsKey(toStringOrNull("withdrawalRequestsId"))))) ? "withdrawal" : "deposit";
        object id = this.safeString2(transaction, "withdrawalRequestsId", "depositNumber");
        object address = this.safeString(transaction, "address");
        object tag = this.safeString(transaction, "paymentID");
        object amountString = this.safeString(transaction, "amount");
        object feeCostString = this.safeString(transaction, "fee");
        if (isTrue(isEqual(type, "withdrawal")))
        {
            amountString = Precise.stringSub(amountString, feeCostString);
        }
        return new Dictionary<string, object>() {
            { "info", transaction },
            { "id", id },
            { "currency", code },
            { "amount", this.parseNumber(amountString) },
            { "network", null },
            { "address", address },
            { "addressTo", null },
            { "addressFrom", null },
            { "tag", tag },
            { "tagTo", null },
            { "tagFrom", null },
            { "status", status },
            { "type", type },
            { "updated", null },
            { "txid", txid },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "fee", new Dictionary<string, object>() {
                { "currency", code },
                { "cost", this.parseNumber(feeCostString) },
            } },
        };
    }

    public override object nonce()
    {
        return this.milliseconds();
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = getValue(getValue(this.urls, "api"), "rest");
        object query = this.omit(parameters, this.extractParams(path));
        object implodedPath = this.implodeParams(path, parameters);
        if (isTrue(isEqual(api, "public")))
        {
            url = add(url, add("/", implodedPath));
            if (isTrue(getArrayLength(new List<string>(((Dictionary<string,object>)query).Keys))))
            {
                url = add(url, add("?", this.urlencode(query)));
            }
        } else
        {
            this.checkRequiredCredentials();
            object timestamp = ((object)this.nonce()).ToString();
            object auth = add(method, "\n"); // eslint-disable-line quotes
            url = add(url, add("/", implodedPath));
            auth = add(auth, add("/", implodedPath));
            if (isTrue(isTrue(isTrue((isEqual(method, "POST"))) || isTrue((isEqual(method, "PUT")))) || isTrue((isEqual(method, "DELETE")))))
            {
                auth = add(auth, "\n"); // eslint-disable-line quotes
                if (isTrue(getArrayLength(new List<string>(((Dictionary<string,object>)query).Keys))))
                {
                    body = this.json(query);
                    auth = add(auth, add(add("requestBody=", body), "&"));
                }
                auth = add(auth, add("signTimestamp=", timestamp));
            } else
            {
                object sortedQuery = this.extend(new Dictionary<string, object>() {
                    { "signTimestamp", timestamp },
                }, query);
                sortedQuery = this.keysort(sortedQuery);
                auth = add(auth, add("\n", this.urlencode(sortedQuery))); // eslint-disable-line quotes
                if (isTrue(getArrayLength(new List<string>(((Dictionary<string,object>)query).Keys))))
                {
                    url = add(url, add("?", this.urlencode(query)));
                }
            }
            object signature = this.hmac(this.encode(auth), this.encode(this.secret), sha256, "base64");
            headers = new Dictionary<string, object>() {
                { "Content-Type", "application/json" },
                { "key", this.apiKey },
                { "signTimestamp", timestamp },
                { "signature", signature },
            };
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object code, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;
        }
        // {"error":"Permission denied."}
        if (isTrue(((Dictionary<string,object>)response).ContainsKey(toStringOrNull("error"))))
        {
            object message = getValue(response, "error");
            object feedback = add(add(this.id, " "), body);
            this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), message, feedback);
            this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), message, feedback);
            throw new ExchangeError ((string)feedback) ;
        }
        return null;
    }
}
