using Main;
namespace Main;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

partial class krakenfutures : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "krakenfutures" },
            { "name", "Kraken Futures" },
            { "countries", new List<object>() {"US"} },
            { "version", "v3" },
            { "userAgent", null },
            { "rateLimit", 600 },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", false },
                { "margin", false },
                { "swap", true },
                { "future", true },
                { "option", false },
                { "cancelAllOrders", true },
                { "cancelOrder", true },
                { "createMarketOrder", false },
                { "createOrder", true },
                { "editOrder", true },
                { "fetchBalance", true },
                { "fetchBorrowRate", false },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchBorrowRates", false },
                { "fetchBorrowRatesPerSymbol", false },
                { "fetchClosedOrders", null },
                { "fetchFundingHistory", null },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", true },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchIsolatedPositions", false },
                { "fetchLeverageTiers", true },
                { "fetchMarketLeverageTiers", "emulated" },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", true },
                { "fetchMyTrades", true },
                { "fetchOHLCV", true },
                { "fetchOpenOrders", true },
                { "fetchOrder", false },
                { "fetchOrderBook", true },
                { "fetchOrders", false },
                { "fetchPositions", true },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTickers", true },
                { "fetchTrades", true },
                { "setLeverage", false },
                { "setMarginMode", false },
                { "transfer", true },
            } },
            { "urls", new Dictionary<string, object>() {
                { "test", new Dictionary<string, object>() {
                    { "public", "https://demo-futures.kraken.com/derivatives" },
                    { "private", "https://demo-futures.kraken.com/derivatives" },
                    { "www", "https://demo-futures.kraken.com" },
                } },
                { "logo", "https://user-images.githubusercontent.com/24300605/81436764-b22fd580-9172-11ea-9703-742783e6376d.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "charts", "https://futures.kraken.com/api/charts/" },
                    { "history", "https://futures.kraken.com/api/history/" },
                    { "feeschedules", "https://futures.kraken.com/api/feeschedules/" },
                    { "public", "https://futures.kraken.com/derivatives/api/" },
                    { "private", "https://futures.kraken.com/derivatives/api/" },
                } },
                { "www", "https://futures.kraken.com/" },
                { "doc", new List<object>() {"https://support.kraken.com/hc/en-us/categories/360001806372-Futures-API"} },
                { "fees", "https://support.kraken.com/hc/en-us/articles/360022835771-Transaction-fees-and-rebates-for-Kraken-Futures" },
                { "referral", null },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new List<object>() {"instruments", "orderbook", "tickers", "history", "historicalfundingrates"} },
                } },
                { "private", new Dictionary<string, object>() {
                    { "get", new List<object>() {"openpositions", "notifications", "accounts", "openorders", "recentorders", "fills", "transfers"} },
                    { "post", new List<object>() {"sendorder", "editorder", "cancelorder", "transfer", "batchorder", "cancelallorders", "cancelallordersafter", "withdrawal"} },
                } },
                { "charts", new Dictionary<string, object>() {
                    { "get", new List<object>() {"{price_type}/{symbol}/{interval}"} },
                } },
                { "history", new Dictionary<string, object>() {
                    { "get", new List<object>() {"orders", "executions", "triggers", "accountlogcsv", "market/{symbol}/orders", "market/{symbol}/executions"} },
                } },
                { "feeschedules", new Dictionary<string, object>() {
                    { "get", new List<object>() {"volumes"} },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "tierBased", false },
                    { "percentage", true },
                    { "maker", this.parseNumber("-0.0002") },
                    { "taker", this.parseNumber("0.00075") },
                } },
            } },
            { "exceptions", new Dictionary<string, object>() {
                { "exact", new Dictionary<string, object>() {
                    { "apiLimitExceeded", typeof(RateLimitExceeded) },
                    { "marketUnavailable", typeof(ExchangeNotAvailable) },
                    { "requiredArgumentMissing", typeof(BadRequest) },
                    { "unavailable", typeof(ExchangeNotAvailable) },
                    { "authenticationError", typeof(AuthenticationError) },
                    { "accountInactive", typeof(ExchangeError) },
                    { "invalidAccount", typeof(BadRequest) },
                    { "invalidAmount", typeof(BadRequest) },
                    { "insufficientFunds", typeof(InsufficientFunds) },
                    { "Bad Request", typeof(BadRequest) },
                    { "Unavailable", typeof(InsufficientFunds) },
                } },
                { "broad", new Dictionary<string, object>() {
                    { "invalidArgument", typeof(BadRequest) },
                    { "nonceBelowThreshold", typeof(InvalidNonce) },
                    { "nonceDuplicate", typeof(InvalidNonce) },
                } },
            } },
            { "precisionMode", TICK_SIZE },
            { "options", new Dictionary<string, object>() {
                { "access", new Dictionary<string, object>() {
                    { "history", new Dictionary<string, object>() {
                        { "GET", new Dictionary<string, object>() {
                            { "orders", "private" },
                            { "executions", "private" },
                            { "triggers", "private" },
                            { "accountlogcsv", "private" },
                        } },
                    } },
                } },
                { "settlementCurrencies", new Dictionary<string, object>() {
                    { "flex", new List<object>() {"USDT", "BTC", "USD", "GBP", "EUR", "USDC"} },
                } },
                { "symbol", new Dictionary<string, object>() {
                    { "quoteIds", new List<object>() {"USD", "XBT"} },
                    { "reversed", false },
                } },
                { "versions", new Dictionary<string, object>() {
                    { "public", new Dictionary<string, object>() {
                        { "GET", new Dictionary<string, object>() {
                            { "historicalfundingrates", "v4" },
                        } },
                    } },
                    { "charts", new Dictionary<string, object>() {
                        { "GET", new Dictionary<string, object>() {
                            { "{price_type}/{symbol}/{interval}", "v1" },
                        } },
                    } },
                    { "history", new Dictionary<string, object>() {
                        { "GET", new Dictionary<string, object>() {
                            { "orders", "v2" },
                            { "executions", "v2" },
                            { "triggers", "v2" },
                            { "accountlogcsv", "v2" },
                        } },
                    } },
                } },
            } },
            { "timeframes", new Dictionary<string, object>() {
                { "1m", "1m" },
                { "5m", "5m" },
                { "15m", "15m" },
                { "30m", "30m" },
                { "1h", "1h" },
                { "4h", "4h" },
                { "12h", "12h" },
                { "1d", "1d" },
                { "1w", "1w" },
            } },
        });
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name krakenfutures#fetchMarkets
        * @description Fetches the available trading markets from the exchange, Multi-collateral markets are returned as linear markets, but can be settled in multiple currencies
        * @see https://docs.futures.kraken.com/#http-api-trading-v3-api-instrument-details-get-instruments
        * @param {object} params exchange specific params
        * @returns An array of market structures
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetInstruments(parameters);
        //
        //    {
        //        "result": "success",
        //        "instruments": [
        //            {
        //                "symbol": "fi_ethusd_180928",
        //                "type": "futures_inverse", // futures_vanilla  // spot index
        //                "underlying": "rr_ethusd",
        //                "lastTradingTime": "2018-09-28T15:00:00.000Z",
        //                "tickSize": 0.1,
        //                "contractSize": 1,
        //                "tradeable": true,
        //                "marginLevels": [
        //                    {
        //                        "contracts":0,
        //                        "initialMargin":0.02,
        //                        "maintenanceMargin":0.01
        //                    },
        //                    {
        //                        "contracts":250000,
        //                        "initialMargin":0.04,
        //                        "maintenanceMargin":0.02
        //                    },
        //                    ...
        //                ],
        //                "isin": "GB00JVMLMP88",
        //                "retailMarginLevels": [
        //                    {
        //                        "contracts": 0,
        //                        "initialMargin": 0.5,
        //                        "maintenanceMargin": 0.25
        //                    }
        //                ],
        //                "tags": [],
        //            },
        //            {
        //                "symbol": "in_xbtusd",
        //                "type": "spot index",
        //                "tradeable":false
        //            }
        //        ]
        //        "serverTime": "2018-07-19T11:32:39.433Z"
        //    }
        //
        object instruments = this.safeValue(response, "instruments", new List<object>() {});
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(instruments)); postFixIncrement(ref i))
        {
            object market = getValue(instruments, i);
            object id = this.safeString(market, "symbol");
            object marketType = this.safeString(market, "type");
            object type = null;
            object index = (isGreaterThanOrEqual(getIndexOf(marketType, " index"), 0));
            object linear = null;
            object inverse = null;
            object expiry = null;
            if (!isTrue(index))
            {
                linear = (isGreaterThanOrEqual(getIndexOf(marketType, "_vanilla"), 0));
                inverse = !isTrue(linear);
                object settleTime = this.safeString(market, "lastTradingTime");
                type = ((bool) isTrue((isEqual(settleTime, null)))) ? "swap" : "future";
                expiry = this.parse8601(settleTime);
            } else
            {
                type = "index";
            }
            object swap = (isEqual(type, "swap"));
            object future = (isEqual(type, "future"));
            object symbol = id;
            object split = ((string)id).Split((string)"_").ToList<object>();
            object splitMarket = this.safeString(split, 1);
            object baseId = ((string)splitMarket).Substring((int)0, (int)subtract(((string)splitMarket).Length, 3));
            object quoteId = "usd"; // always USD
            object bs = this.safeCurrencyCode(baseId);
            object quote = this.safeCurrencyCode(quoteId);
            // swap == perpetual
            object settle = null;
            object settleId = null;
            object amountPrecision = this.parseNumber(this.parsePrecision(this.safeString(market, "contractValueTradePrecision", "0")));
            object pricePrecision = this.safeNumber(market, "tickSize");
            object contract = (isTrue(swap) || isTrue(future));
            if (isTrue(contract))
            {
                object exchangeType = this.safeString(market, "type");
                if (isTrue(isEqual(exchangeType, "futures_inverse")))
                {
                    settle = bs;
                    settleId = baseId;
                    inverse = true;
                } else
                {
                    settle = quote;
                    settleId = quoteId;
                    inverse = false;
                }
                linear = !isTrue(inverse);
                symbol = add(add(add(add(bs, "/"), quote), ":"), settle);
                if (isTrue(future))
                {
                    symbol = add(add(symbol, "-"), this.yymmdd(expiry));
                }
            }
            ((List<object>)result).Add(new Dictionary<string, object>() {
                { "id", id },
                { "symbol", symbol },
                { "base", bs },
                { "quote", quote },
                { "settle", settle },
                { "baseId", baseId },
                { "quoteId", quoteId },
                { "settleId", settleId },
                { "type", type },
                { "spot", false },
                { "margin", false },
                { "swap", swap },
                { "future", future },
                { "option", false },
                { "index", index },
                { "active", null },
                { "contract", contract },
                { "linear", linear },
                { "inverse", inverse },
                { "contractSize", this.safeNumber(market, "contractSize") },
                { "maintenanceMarginRate", null },
                { "expiry", expiry },
                { "expiryDatetime", this.iso8601(expiry) },
                { "strike", null },
                { "optionType", null },
                { "precision", new Dictionary<string, object>() {
                    { "amount", amountPrecision },
                    { "price", pricePrecision },
                } },
                { "limits", new Dictionary<string, object>() {
                    { "leverage", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "amount", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "price", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "cost", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                } },
                { "info", market },
            });
        }
        object settlementCurrencies = getValue(getValue(this.options, "settlementCurrencies"), "flex");
        object currencies = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(settlementCurrencies)); postFixIncrement(ref i))
        {
            object code = getValue(settlementCurrencies, i);
            ((List<object>)currencies).Add(new Dictionary<string, object>() {
                { "id", ((string)code).ToLower() },
                { "numericId", null },
                { "code", code },
                { "precision", null },
            });
        }
        this.currencies = this.deepExtend(currencies, this.currencies);
        return result;
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name krakenfutures#fetchOrderBook
        * @description Fetches a list of open orders in a market
        * @param {string} symbol Unified market symbol
        * @param {int|undefined} limit Not used by krakenfutures
        * @param {object} params exchange specific params
        * @returns An [order book structure]{@link https://docs.ccxt.com/#/?id=order-book-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = await this.publicGetOrderbook(this.extend(request, parameters));
        //
        //    {
        //       "result": "success",
        //       "serverTime": "2016-02-25T09:45:53.818Z",
        //       "orderBook": {
        //          "bids": [
        //                [
        //                    4213,
        //                    2000,
        //                ],
        //                [
        //                    4210,
        //                    4000,
        //                ],
        //                ...
        //            ],
        //            "asks": [
        //                [
        //                    4218,
        //                    4000,
        //                ],
        //                [
        //                    4220,
        //                    5000,
        //                ],
        //                ...
        //            ],
        //        },
        //    }
        //
        object timestamp = this.parse8601(getValue(response, "serverTime"));
        return this.parseOrderBook(getValue(response, "orderBook"), symbol, timestamp);
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.publicGetTickers(parameters);
        //
        //    {
        //        result: 'success',
        //        tickers: [
        //            {
        //                tag: 'semiannual',  // 'month', 'quarter', 'perpetual', 'semiannual',
        //                pair: 'ETH:USD',
        //                symbol: 'fi_ethusd_220624',
        //                markPrice: '2925.72',
        //                bid: '2923.8',
        //                bidSize: '16804',
        //                ask: '2928.65',
        //                askSize: '1339',
        //                vol24h: '860493',
        //                openInterest: '3023363.00000000',
        //                open24h: '3021.25',
        //                indexPrice: '2893.71',
        //                last: '2942.25',
        //                lastTime: '2022-02-18T14:08:15.578Z',
        //                lastSize: '151',
        //                suspended: false
        //            },
        //            {
        //                symbol: 'in_xbtusd', // 'rr_xbtusd',
        //                last: '40411',
        //                lastTime: '2022-02-18T14:16:28.000Z'
        //            },
        //            ...
        //        ],
        //        serverTime: '2022-02-18T14:16:29.440Z'
        //    }
        //
        object tickers = this.safeValue(response, "tickers");
        return this.parseTickers(tickers, symbols);
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        //    {
        //        tag: 'semiannual',  // 'month', 'quarter', 'perpetual', 'semiannual',
        //        pair: 'ETH:USD',
        //        symbol: 'fi_ethusd_220624',
        //        markPrice: '2925.72',
        //        bid: '2923.8',
        //        bidSize: '16804',
        //        ask: '2928.65',
        //        askSize: '1339',
        //        vol24h: '860493',
        //        openInterest: '3023363.00000000',
        //        open24h: '3021.25',
        //        indexPrice: '2893.71',
        //        last: '2942.25',
        //        lastTime: '2022-02-18T14:08:15.578Z',
        //        lastSize: '151',
        //        suspended: false
        //    }
        //
        //    {
        //        symbol: 'in_xbtusd', // 'rr_xbtusd',
        //        last: '40411',
        //        lastTime: '2022-02-18T14:16:28.000Z'
        //    }
        //
        object marketId = this.safeString(ticker, "symbol");
        market = this.safeMarket(marketId, market);
        object symbol = getValue(market, "symbol");
        object timestamp = this.parse8601(this.safeString(ticker, "lastTime"));
        object open = this.safeString(ticker, "open24h");
        object last = this.safeString(ticker, "last");
        object change = Precise.stringSub(last, open);
        object percentage = Precise.stringMul(Precise.stringDiv(change, open), "100");
        object average = Precise.stringDiv(Precise.stringAdd(open, last), "2");
        object volume = this.safeString(ticker, "vol24h");
        object baseVolume = null;
        object quoteVolume = null;
        object isIndex = this.safeValue(market, "index", false);
        if (!isTrue(isIndex))
        {
            if (isTrue(getValue(market, "linear")))
            {
                baseVolume = volume;
            } else if (isTrue(getValue(market, "inverse")))
            {
                quoteVolume = volume;
            }
        }
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", null },
            { "low", null },
            { "bid", this.safeString(ticker, "bid") },
            { "bidVolume", this.safeString(ticker, "bidSize") },
            { "ask", this.safeString(ticker, "ask") },
            { "askVolume", this.safeString(ticker, "askSize") },
            { "vwap", null },
            { "open", open },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", change },
            { "percentage", percentage },
            { "average", average },
            { "baseVolume", baseVolume },
            { "quoteVolume", quoteVolume },
            { "info", ticker },
        });
    }

    public async override Task<object> fetchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "price_type", this.safeString(parameters, "price", "trade") },
            { "interval", getValue(this.timeframes, timeframe) },
        };
        parameters = this.omit(parameters, "price");
        if (isTrue(!isEqual(since, null)))
        {
            object duration = this.parseTimeframe(timeframe);
            ((Dictionary<string, object>)request)["from"] = this.parseToInt(divide(since, 1000));
            if (isTrue(isEqual(limit, null)))
            {
                limit = 5000;
            } else if (isTrue(isGreaterThan(limit, 5000)))
            {
                throw new BadRequest ((string)add(this.id, " fetchOHLCV() limit cannot exceed 5000")) ;
            }
            object toTimestamp = this.sum(getValue(request, "from"), subtract(multiply(limit, duration), 1));
            object currentTimestamp = this.seconds();
            ((Dictionary<string, object>)request)["to"] = mathMin(toTimestamp, currentTimestamp);
        } else if (isTrue(!isEqual(limit, null)))
        {
            if (isTrue(isGreaterThan(limit, 5000)))
            {
                throw new BadRequest ((string)add(this.id, " fetchOHLCV() limit cannot exceed 5000")) ;
            }
            object duration = this.parseTimeframe(timeframe);
            ((Dictionary<string, object>)request)["to"] = this.seconds();
            ((Dictionary<string, object>)request)["from"] = this.parseToInt(subtract(getValue(request, "to"), (multiply(duration, limit))));
        }
        object response = await this.chartsGetPriceTypeSymbolInterval(this.extend(request, parameters));
        //
        //    {
        //        "candles": [
        //            {
        //                "time": 1645198500000,
        //                "open": "309.15000000000",
        //                "high": "309.15000000000",
        //                "low": "308.70000000000",
        //                "close": "308.85000000000",
        //                "volume": 0
        //            }
        //        ],
        //        "more_candles": true
        //    }
        //
        object candles = this.safeValue(response, "candles");
        return this.parseOHLCVs(candles, market, timeframe, since, limit);
    }

    public override object parseOHLCV(object ohlcv, object market = null)
    {
        //
        //    {
        //        "time": 1645198500000,
        //        "open": "309.15000000000",
        //        "high": "309.15000000000",
        //        "low": "308.70000000000",
        //        "close": "308.85000000000",
        //        "volume": 0
        //    }
        //
        return new List<object> {this.safeInteger(ohlcv, "time"), this.safeNumber(ohlcv, "open"), this.safeNumber(ohlcv, "high"), this.safeNumber(ohlcv, "low"), this.safeNumber(ohlcv, "close"), this.safeNumber(ohlcv, "volume")};
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name krakenfutures#fetchTrades
        * @descriptions Fetch a history of filled trades that this account has made
        * @param {string} symbol Unified CCXT market symbol
        * @param {int|undefined} since Timestamp in ms of earliest trade. Not used by krakenfutures except in combination with params.until
        * @param {int|undefined} limit Total number of trades, cannot exceed 100
        * @param {object} params Exchange specific params
        * @param {int|undefined} params.until Timestamp in ms of latest trade
        * @returns An array of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object until = this.safeInteger(parameters, "until");
        if (isTrue(!isEqual(until, null)))
        {
            ((Dictionary<string, object>)request)["lastTime"] = this.iso8601(until);
        }
        //
        //    {
        //        "result": "success",
        //        "history": [
        //            {
        //                "time": "2022-03-18T04:55:37.692Z",
        //                "trade_id": 100,
        //                "price": 0.7921,
        //                "size": 1068,
        //                "side": "sell",
        //                "type": "fill",
        //                "uid": "6c5da0b0-f1a8-483f-921f-466eb0388265"
        //            },
        //            ...
        //        ],
        //        "serverTime": "2022-03-18T06:39:18.056Z"
        //    }
        //
        object response = await this.publicGetHistory(this.extend(request, parameters));
        object history = this.safeValue(response, "history");
        return this.parseTrades(history, market, since, limit);
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // fetchTrades (public)
        //
        //    {
        //        "time": "2019-02-14T09:25:33.920Z",
        //        "trade_id": 100,
        //        "price": 3574,
        //        "size": 100,
        //        "side": "buy",
        //        "type": "fill"                                          // fill, liquidation, assignment, termination
        //        "uid": "11c3d82c-9e70-4fe9-8115-f643f1b162d4"
        //    }
        //
        // fetchMyTrades (private)
        //
        //    {
        //        "fillTime": "2016-02-25T09:47:01.000Z",
        //        "order_id": "c18f0c17-9971-40e6-8e5b-10df05d422f0",
        //        "fill_id": "522d4e08-96e7-4b44-9694-bfaea8fe215e",
        //        "cliOrdId": "d427f920-ec55-4c18-ba95-5fe241513b30",     // OPTIONAL
        //        "symbol": "fi_xbtusd_180615",
        //        "side": "buy",
        //        "size": 2000,
        //        "price": 4255,
        //        "fillType": "maker"                                     // taker, takerAfterEdit, maker, liquidation, assignee
        //    }
        //
        // execution report (createOrder, editOrder)
        //
        //    {
        //        "executionId": "e1ec9f63-2338-4c44-b40a-43486c6732d7",
        //        "price": 7244.5,
        //        "amount": 10,
        //        "orderPriorEdit": null,
        //        "orderPriorExecution": {
        //            "orderId": "61ca5732-3478-42fe-8362-abbfd9465294",
        //            "cliOrdId": null,
        //            "type": "lmt",
        //            "symbol": "pi_xbtusd",
        //            "side": "buy",
        //            "quantity": 10,
        //            "filled": 0,
        //            "limitPrice": 7500,
        //            "reduceOnly": false,
        //            "timestamp": "2019-12-11T17:17:33.888Z",
        //            "lastUpdateTimestamp": "2019-12-11T17:17:33.888Z"
        //        },
        //        "takerReducedQuantity": null,
        //        "type": "EXECUTION"
        //    }
        //
        object timestamp = this.parse8601(this.safeString2(trade, "time", "fillTime"));
        object price = this.safeString(trade, "price");
        object amount = this.safeString2(trade, "size", "amount", "0.0");
        object id = this.safeString2(trade, "uid", "fill_id");
        if (isTrue(isEqual(id, null)))
        {
            id = this.safeString(trade, "executionId");
        }
        object order = this.safeString(trade, "order_id");
        object symbolId = this.safeString(trade, "symbol");
        object side = this.safeString(trade, "side");
        object type = null;
        object priorEdit = this.safeValue(trade, "orderPriorEdit");
        object priorExecution = this.safeValue(trade, "orderPriorExecution");
        if (isTrue(!isEqual(priorExecution, null)))
        {
            order = this.safeString(priorExecution, "orderId");
            symbolId = this.safeString(priorExecution, "symbol");
            side = this.safeString(priorExecution, "side");
            type = this.safeString(priorExecution, "type");
        } else if (isTrue(!isEqual(priorEdit, null)))
        {
            order = this.safeString(priorEdit, "orderId");
            symbolId = this.safeString(priorEdit, "symbol");
            side = this.safeString(priorEdit, "type");
            type = this.safeString(priorEdit, "type");
        }
        if (isTrue(!isEqual(type, null)))
        {
            type = this.parseOrderType(type);
        }
        object symbol = null;
        if (isTrue(!isEqual(symbolId, null)))
        {
            market = this.safeValue(this.markets_by_id, symbolId);
            if (isTrue(isEqual(market, null)))
            {
                symbol = symbolId;
            }
        }
        symbol = this.safeString(market, "symbol", symbol);
        object cost = null;
        if (isTrue(isTrue(isTrue((!isEqual(amount, null))) && isTrue((!isEqual(price, null)))) && isTrue((!isEqual(market, null)))))
        {
            object linear = this.safeValue(market, "linear");
            if (isTrue(linear))
            {
                cost = Precise.stringMul(amount, price); // in quote
            } else
            {
                cost = Precise.stringDiv(amount, price); // in base
            }
            object contractSize = this.safeString(market, "contractSize");
            cost = Precise.stringMul(cost, contractSize);
        }
        object takerOrMaker = null;
        object fillType = this.safeString(trade, "fillType");
        if (isTrue(!isEqual(fillType, null)))
        {
            if (isTrue(isGreaterThanOrEqual(getIndexOf(fillType, "taker"), 0)))
            {
                takerOrMaker = "taker";
            } else if (isTrue(isGreaterThanOrEqual(getIndexOf(fillType, "maker"), 0)))
            {
                takerOrMaker = "maker";
            }
        }
        return this.safeTrade(new Dictionary<string, object>() {
            { "info", trade },
            { "id", id },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", symbol },
            { "order", order },
            { "type", type },
            { "side", side },
            { "takerOrMaker", takerOrMaker },
            { "price", price },
            { "amount", amount },
            { "cost", cost },
            { "fee", null },
        });
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name krakenfutures#createOrder
        * @description Create an order on the exchange
        * @param {string} symbol market symbol
        * @param {string} type One of 'limit', 'market', 'take_profit'
        * @param {string} side buy or sell
        * @param {int} amount Contract quantity
        * @param {float} price Limit order price
        * @param {float|undefined} params.stopPrice The stop price associated with a stop or take profit order, Required if orderType is stp or take_profit, Must not have more than 2 decimal places, Note that for stop orders, limitPrice denotes the worst price at which the stop or take_profit order can get filled at. If no limitPrice is provided the stop or take_profit order will trigger a market order,
        * @param {bool|undefined} params.reduceOnly Set as true if you wish the order to only reduce an existing position, Any order which increases an existing position will be rejected, Default false,
        * @param {bool|undefined} params.postOnly Set as true if you wish to make a postOnly order, Default false
        * @param {string|undefined} params.triggerSignal If placing a stp or take_profit, the signal used for trigger, One of: 'mark', 'index', 'last', last is market price
        * @param {string|undefined} params.cliOrdId UUID The order identity that is specified from the user, It must be globally unique
        * @param {string|undefined} params.clientOrderId UUID The order identity that is specified from the user, It must be globally unique
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        type = this.safeString(parameters, "orderType", type);
        object timeInForce = this.safeString(parameters, "timeInForce");
        object stopPrice = this.safeString(parameters, "stopPrice");
        object postOnly = this.safeString(parameters, "postOnly");
        object clientOrderId = this.safeString2(parameters, "clientOrderId", "cliOrdId");
        parameters = this.omit(parameters, new List<object>() {"clientOrderId", "cliOrdId"});
        if (isTrue(isTrue((isTrue(isEqual(type, "stp")) || isTrue(isEqual(type, "take_profit")))) && isTrue(isEqual(stopPrice, null))))
        {
            throw new ArgumentsRequired ((string)add(add(this.id, " createOrder requires params.stopPrice when type is "), type)) ;
        }
        if (isTrue(!isEqual(stopPrice, null)))
        {
            type = "stp";
        } else if (isTrue(postOnly))
        {
            type = "postOnly";
        } else if (isTrue(isEqual(timeInForce, "ioc")))
        {
            type = "ioc";
        } else if (isTrue(isEqual(type, "limit")))
        {
            type = "lmt";
        } else if (isTrue(isEqual(type, "market")))
        {
            type = "mkt";
        }
        object request = new Dictionary<string, object>() {
            { "orderType", type },
            { "symbol", this.marketId(symbol) },
            { "side", side },
            { "size", amount },
        };
        if (isTrue(!isEqual(price, null)))
        {
            ((Dictionary<string, object>)request)["limitPrice"] = price;
        }
        if (isTrue(!isEqual(clientOrderId, null)))
        {
            ((Dictionary<string, object>)request)["cliOrdId"] = clientOrderId;
        }
        object response = await this.privatePostSendorder(this.extend(request, parameters));
        //
        //    {
        //        "result": "success",
        //        "sendStatus": {
        //            "order_id": "salf320-e337-47ac-b345-30sdfsalj",
        //            "status": "placed",
        //            "receivedTime": "2022-02-28T19:32:17.122Z",
        //            "orderEvents": [
        //                {
        //                    "order": {
        //                        "orderId": "salf320-e337-47ac-b345-30sdfsalj",
        //                        "cliOrdId": null,
        //                        "type": "lmt",
        //                        "symbol": "pi_xrpusd",
        //                        "side": "buy",
        //                        "quantity": 1,
        //                        "filled": 0,
        //                        "limitPrice": 0.7,
        //                        "reduceOnly": false,
        //                        "timestamp": "2022-02-28T19:32:17.122Z",
        //                        "lastUpdateTimestamp": "2022-02-28T19:32:17.122Z"
        //                    },
        //                    "reducedQuantity": null,
        //                    "type": "PLACE"
        //                }
        //            ]
        //        },
        //        "serverTime": "2022-02-28T19:32:17.122Z"
        //    }
        //
        object sendStatus = this.safeValue(response, "sendStatus");
        object status = this.safeString(sendStatus, "status");
        this.verifyOrderActionSuccess(status, "createOrder", new List<object>() {"filled"});
        return this.parseOrder(sendStatus);
    }

    public async override Task<object> editOrder(object id, object symbol, object type, object side, object amount = null, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name krakenfutures#editOrder
        * @description Edit an open order on the exchange
        * @param {string} id order id
        * @param {string} symbol Not used by Krakenfutures
        * @param {string} type Not used by Krakenfutures
        * @param {string} side Not used by Krakenfutures
        * @param {float|undefined} amount Order size
        * @param {float|undefined} price Price to fill order at
        * @param {object} params Exchange specific params
        * @returns An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "orderId", id },
        };
        if (isTrue(!isEqual(amount, null)))
        {
            ((Dictionary<string, object>)request)["size"] = amount;
        }
        if (isTrue(!isEqual(price, null)))
        {
            ((Dictionary<string, object>)request)["limitPrice"] = price;
        }
        object response = await this.privatePostEditorder(this.extend(request, parameters));
        object status = this.safeString(getValue(response, "editStatus"), "status");
        this.verifyOrderActionSuccess(status, "editOrder", new List<object>() {"filled"});
        object order = this.parseOrder(getValue(response, "editStatus"));
        return this.extend(new Dictionary<string, object>() {
            { "info", response },
        }, order);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @param {string} id Order id
        * @param {string|undefined} symbol Not used by Krakenfutures
        * @param {object} params Exchange specific params
        * @returns An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privatePostCancelorder(this.extend(new Dictionary<string, object>() {
            { "order_id", id },
        }, parameters));
        object status = this.safeString(this.safeValue(response, "cancelStatus", new Dictionary<string, object>() {}), "status");
        this.verifyOrderActionSuccess(status, "cancelOrder");
        object order = new Dictionary<string, object>() {};
        if (isTrue(((Dictionary<string,object>)response).ContainsKey(toStringOrNull("cancelStatus"))))
        {
            order = this.parseOrder(getValue(response, "cancelStatus"));
        }
        return this.extend(new Dictionary<string, object>() {
            { "info", response },
        }, order);
    }

    public async override Task<object> cancelAllOrders(object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name krakenfutures#cancelAllOrders
        * @description Cancels all orders on the exchange, including trigger orders
        * @param {str} symbol Unified market symbol
        * @param {dict} params Exchange specific params
        * @returns Response from exchange api
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(symbol, null)))
        {
            ((Dictionary<string, object>)request)["symbol"] = this.marketId(symbol);
        }
        object response = await this.privatePostCancelallorders(this.extend(request, parameters));
        return response;
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name krakenfutures#fetchOpenOrders
        * @description Gets all open orders, including trigger orders, for an account from the exchange api
        * @param {string} symbol Unified market symbol
        * @param {int} since Timestamp (ms) of earliest order. (Not used by kraken api but filtered internally by CCXT)
        * @param {int} limit How many orders to return. (Not used by kraken api but filtered internally by CCXT)
        * @param {object} params Exchange specific parameters
        * @returns An array of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object response = await this.privateGetOpenorders(parameters);
        object orders = this.safeValue(response, "openOrders", new List<object>() {});
        return this.parseOrders(orders, market, since, limit);
    }

    public virtual object parseOrderType(object orderType)
    {
        object map = new Dictionary<string, object>() {
            { "lmt", "limit" },
            { "mkt", "market" },
            { "post", "limit" },
            { "ioc", "market" },
        };
        return this.safeString(map, orderType, orderType);
    }

    public virtual void verifyOrderActionSuccess(object status, object method, object omit = null)
    {
        omit ??= new List<object>();
        object errors = new Dictionary<string, object>() {
            { "invalidOrderType", typeof(InvalidOrder) },
            { "invalidSide", typeof(InvalidOrder) },
            { "invalidSize", typeof(InvalidOrder) },
            { "invalidPrice", typeof(InvalidOrder) },
            { "insufficientAvailableFunds", typeof(InsufficientFunds) },
            { "selfFill", typeof(ExchangeError) },
            { "tooManySmallOrders", typeof(ExchangeError) },
            { "maxPositionViolation", typeof(BadRequest) },
            { "marketSuspended", typeof(ExchangeNotAvailable) },
            { "marketInactive", typeof(ExchangeNotAvailable) },
            { "clientOrderIdAlreadyExist", typeof(DuplicateOrderId) },
            { "clientOrderIdTooLong", typeof(BadRequest) },
            { "outsidePriceCollar", typeof(InvalidOrder) },
            { "postWouldExecute", typeof(OrderImmediatelyFillable) },
            { "iocWouldNotExecute", typeof(OrderNotFillable) },
            { "wouldNotReducePosition", typeof(ExchangeError) },
            { "orderForEditNotFound", typeof(OrderNotFound) },
            { "orderForEditNotAStop", typeof(InvalidOrder) },
            { "filled", typeof(OrderNotFound) },
            { "notFound", typeof(OrderNotFound) },
        };
        if (isTrue(isTrue((((Dictionary<string,object>)errors).ContainsKey(toStringOrNull(status)))) && !isTrue(this.inArray(status, omit))))
        {
            throwDynamicException(getValue(errors, status), add(add(add(add(this.id, ": "), method), " failed due to "), status));
        }
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "placed", "open" },
            { "cancelled", "canceled" },
            { "invalidOrderType", "rejected" },
            { "invalidSide", "rejected" },
            { "invalidSize", "rejected" },
            { "invalidPrice", "rejected" },
            { "insufficientAvailableFunds", "rejected" },
            { "selfFill", "rejected" },
            { "tooManySmallOrders", "rejected" },
            { "maxPositionViolation", "rejected" },
            { "marketSuspended", "rejected" },
            { "marketInactive", "rejected" },
            { "clientOrderIdAlreadyExist", "rejected" },
            { "clientOrderIdTooLong", "rejected" },
            { "outsidePriceCollar", "rejected" },
            { "postWouldExecute", "rejected" },
            { "iocWouldNotExecute", "rejected" },
            { "wouldNotReducePosition", "rejected" },
            { "edited", "open" },
            { "orderForEditNotFound", "rejected" },
            { "orderForEditNotAStop", "rejected" },
            { "filled", "closed" },
            { "notFound", "rejected" },
            { "untouched", "open" },
            { "partiallyFilled", "open" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // LIMIT
        //
        //    {
        //        "order_id": "179f9af8-e45e-469d-b3e9-2fd4675cb7d0",
        //        "status": "placed",
        //        "receivedTime": "2019-09-05T16:33:50.734Z",
        //        "orderEvents": [
        //            {
        //                "uid": "614a5298-0071-450f-83c6-0617ce8c6bc4",
        //                "order": {
        //                    "orderId": "179f9af8-e45e-469d-b3e9-2fd4675cb7d0",
        //                    "cliOrdId": null,
        //                    "type": "lmt",
        //                    "symbol": "pi_xbtusd",
        //                    "side": "buy",
        //                    "quantity": 10000,
        //                    "filled": 0,
        //                    "limitPrice": 9400,
        //                    "reduceOnly": false,
        //                    "timestamp": "2019-09-05T16:33:50.734Z",
        //                    "lastUpdateTimestamp": "2019-09-05T16:33:50.734Z"
        //                },
        //                "reducedQuantity": null,
        //                "reason": "WOULD_NOT_REDUCE_POSITION", // REJECTED
        //                "type": "PLACE"
        //            }
        //        ]
        //    }
        //
        // CONDITIONAL
        //
        //    {
        //        "order_id": "1abfd3c6-af93-4b30-91cc-e4a93797f3f5",
        //        "status": "placed",
        //        "receivedTime": "2019-12-05T10:20:50.701Z",
        //        "orderEvents": [
        //            {
        //                "orderTrigger": {
        //                    "uid": "1abfd3c6-af93-4b30-91cc-e4a93797f3f5",
        //                    "clientId":null,
        //                    "type": "lmt",                                // "ioc" if stop market
        //                    "symbol": "pi_xbtusd",
        //                    "side": "buy",
        //                    "quantity":10,
        //                    "limitPrice":15000,
        //                    "triggerPrice":9500,
        //                    "triggerSide": "trigger_below",
        //                    "triggerSignal": "mark_price",
        //                    "reduceOnly":false,
        //                    "timestamp": "2019-12-05T10:20:50.701Z",
        //                    "lastUpdateTimestamp": "2019-12-05T10:20:50.701Z"
        //                },
        //                "type": "PLACE"
        //            }
        //        ]
        //    }
        //
        // EXECUTION
        //
        //    {
        //        "order_id": "61ca5732-3478-42fe-8362-abbfd9465294",
        //        "status": "placed",
        //        "receivedTime": "2019-12-11T17:17:33.888Z",
        //        "orderEvents": [
        //            {
        //                "executionId": "e1ec9f63-2338-4c44-b40a-43486c6732d7",
        //                "price": 7244.5,
        //                "amount": 10,
        //                "orderPriorEdit": null,
        //                "orderPriorExecution": {
        //                    "orderId": "61ca5732-3478-42fe-8362-abbfd9465294",
        //                    "cliOrdId": null,
        //                    "type": "lmt",
        //                    "symbol": "pi_xbtusd",
        //                    "side": "buy",
        //                    "quantity": 10,
        //                    "filled": 0,
        //                    "limitPrice": 7500,
        //                    "reduceOnly": false,
        //                    "timestamp": "2019-12-11T17:17:33.888Z",
        //                    "lastUpdateTimestamp": "2019-12-11T17:17:33.888Z"
        //                },
        //                "takerReducedQuantity": null,
        //                "type": "EXECUTION"
        //            }
        //        ]
        //    }
        //
        // EDIT ORDER
        //
        //    {
        //        "status": "edited",
        //        "orderId": "022774bc-2c4a-4f26-9317-436c8d85746d",
        //        "receivedTime": "2019-09-05T16:47:47.521Z",
        //        "orderEvents": [
        //            {
        //                "old": {
        //                    "orderId": "022774bc-2c4a-4f26-9317-436c8d85746d",
        //                    "cliOrdId":null,
        //                    "type": "lmt",
        //                    "symbol": "pi_xbtusd",
        //                    "side": "buy",
        //                    "quantity":1000,
        //                    "filled":0,
        //                    "limitPrice":9400.0,
        //                    "reduceOnly":false,
        //                    "timestamp": "2019-09-05T16:41:35.173Z",
        //                    "lastUpdateTimestamp": "2019-09-05T16:41:35.173Z"
        //                },
        //                "new": {
        //                    "orderId": "022774bc-2c4a-4f26-9317-436c8d85746d",
        //                    "cliOrdId": null,
        //                    "type": "lmt",
        //                    "symbol": "pi_xbtusd",
        //                    "side": "buy",
        //                    "quantity": 1501,
        //                    "filled": 0,
        //                    "limitPrice": 7200,
        //                    "reduceOnly": false,
        //                    "timestamp": "2019-09-05T16:41:35.173Z",
        //                    "lastUpdateTimestamp": "2019-09-05T16:47:47.519Z"
        //                },
        //                "reducedQuantity": null,
        //                "type": "EDIT"
        //            }
        //        ]
        //    }
        //
        // CANCEL ORDER
        //
        //    {
        //        "status": "cancelled",
        //        "orderEvents": [
        //            {
        //                "uid": "85c40002-3f20-4e87-9302-262626c3531b",
        //                "order": {
        //                    "orderId": "85c40002-3f20-4e87-9302-262626c3531b",
        //                    "cliOrdId": null,
        //                    "type": "lmt",
        //                    "symbol": "pi_xbtusd",
        //                    "side": "buy",
        //                    "quantity": 1000,
        //                    "filled": 0,
        //                    "limitPrice": 10144,
        //                    "stopPrice": null,
        //                    "reduceOnly": false,
        //                    "timestamp": "2019-08-01T15:26:27.790Z"
        //                },
        //                "type": "CANCEL"
        //            }
        //        ]
        //    }
        //
        // FETCH OPEN ORDERS
        //
        //    {
        //        "order_id": "59302619-41d2-4f0b-941f-7e7914760ad3",
        //        "symbol": "pi_xbtusd",
        //        "side": "sell",
        //        "orderType": "lmt",
        //        "limitPrice": 10640,
        //        "unfilledSize": 304,
        //        "receivedTime": "2019-09-05T17:01:17.410Z",
        //        "status": "untouched",
        //        "filledSize": 0,
        //        "reduceOnly": true,
        //        "lastUpdateTime": "2019-09-05T17:01:17.410Z"
        //    }
        //
        object orderEvents = this.safeValue(order, "orderEvents", new List<object>() {});
        object details = null;
        object isPrior = false;
        object fixedVar = false;
        object statusId = null;
        object price = null;
        object trades = new List<object>() {};
        if (isTrue(isGreaterThan(getArrayLength(orderEvents), 0)))
        {
            object executions = new List<object>() {};
            for (object i = 0; isLessThan(i, getArrayLength(orderEvents)); postFixIncrement(ref i))
            {
                object item = getValue(orderEvents, i);
                if (isTrue(isEqual(this.safeString(item, "type"), "EXECUTION")))
                {
                    ((List<object>)executions).Add(item);
                }
                // Final order (after placement / editing / execution / canceling)
                object orderTrigger = this.safeValue(item, "orderTrigger");
                details = this.safeValue2(item, "new", "order", orderTrigger);
                if (isTrue(!isEqual(details, null)))
                {
                    isPrior = false;
                    fixedVar = true;
                } else if (!isTrue(fixedVar))
                {
                    object orderPriorExecution = this.safeValue(item, "orderPriorExecution");
                    details = this.safeValue2(item, "orderPriorExecution", "orderPriorEdit");
                    price = this.safeString(orderPriorExecution, "limitPrice");
                    if (isTrue(!isEqual(details, null)))
                    {
                        isPrior = true;
                    }
                }
            }
            trades = this.parseTrades(executions);
            statusId = this.safeString(order, "status");
        }
        if (isTrue(isEqual(details, null)))
        {
            details = order;
        }
        if (isTrue(isEqual(statusId, null)))
        {
            statusId = this.safeString(details, "status");
        }
        // This may be incorrectly marked as "open" if only execution report is given,
        // but will be fixed below
        object status = this.parseOrderStatus(statusId);
        object isClosed = this.inArray(status, new List<object>() {"canceled", "rejected", "closed"});
        object marketId = this.safeString(details, "symbol");
        market = this.safeMarket(marketId, market);
        object timestamp = this.parse8601(this.safeString2(details, "timestamp", "receivedTime"));
        if (isTrue(isEqual(price, null)))
        {
            price = this.safeString(details, "limitPrice");
        }
        object amount = this.safeString(details, "quantity");
        object filled = this.safeString2(details, "filledSize", "filled", "0.0");
        object remaining = this.safeString(details, "unfilledSize");
        object average = null;
        object filled2 = "0.0";
        if (isTrue(isGreaterThan(getArrayLength(trades), 0)))
        {
            object vwapSum = "0.0";
            for (object i = 0; isLessThan(i, getArrayLength(trades)); postFixIncrement(ref i))
            {
                object trade = getValue(trades, i);
                object tradeAmount = this.safeString(trade, "amount");
                object tradePrice = this.safeString(trade, "price");
                filled2 = Precise.stringAdd(filled2, tradeAmount);
                vwapSum = Precise.stringAdd(vwapSum, Precise.stringMul(tradeAmount, tradePrice));
            }
            average = Precise.stringDiv(vwapSum, filled2);
            if (isTrue(isTrue(isTrue(isTrue((!isEqual(amount, null))) && isTrue((!isTrue(isClosed)))) && isTrue(isPrior)) && isTrue(Precise.stringGe(filled2, amount))))
            {
                status = "closed";
                isClosed = true;
            }
            if (isTrue(isPrior))
            {
                filled = Precise.stringAdd(filled, filled2);
            } else
            {
                filled = Precise.stringMax(filled, filled2);
            }
        }
        if (isTrue(isEqual(remaining, null)))
        {
            if (isTrue(isPrior))
            {
                if (isTrue(!isEqual(amount, null)))
                {
                    // remaining amount before execution minus executed amount
                    remaining = Precise.stringSub(amount, filled2);
                }
            } else
            {
                remaining = amount;
            }
        }
        // if fetchOpenOrders are parsed
        if (isTrue(isTrue(isTrue((isEqual(amount, null))) && isTrue((!isTrue(isPrior)))) && isTrue((!isEqual(remaining, null)))))
        {
            amount = Precise.stringAdd(filled, remaining);
        }
        object cost = null;
        if (isTrue(isTrue((!isEqual(filled, null))) && isTrue((!isEqual(market, null)))))
        {
            object whichPrice = ((bool) isTrue((!isEqual(average, null)))) ? average : price;
            if (isTrue(!isEqual(whichPrice, null)))
            {
                if (isTrue(getValue(market, "linear")))
                {
                    cost = Precise.stringMul(filled, whichPrice); // in quote
                } else
                {
                    cost = Precise.stringDiv(filled, whichPrice); // in base
                }
            }
        }
        object id = this.safeString2(order, "order_id", "orderId");
        if (isTrue(isEqual(id, null)))
        {
            id = this.safeString2(details, "orderId", "uid");
        }
        object type = this.safeStringLower2(details, "type", "orderType");
        object timeInForce = "gtc";
        if (isTrue(isTrue(isEqual(type, "ioc")) || isTrue(isEqual(this.parseOrderType(type), "market"))))
        {
            timeInForce = "ioc";
        }
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "id", id },
            { "clientOrderId", this.safeString2(details, "clientOrderId", "clientId") },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "symbol", this.safeString(market, "symbol") },
            { "type", this.parseOrderType(type) },
            { "timeInForce", timeInForce },
            { "postOnly", isEqual(type, "post") },
            { "side", this.safeString(details, "side") },
            { "price", price },
            { "stopPrice", this.safeString(details, "triggerPrice") },
            { "triggerPrice", this.safeString(details, "triggerPrice") },
            { "amount", amount },
            { "cost", cost },
            { "average", average },
            { "filled", filled },
            { "remaining", remaining },
            { "status", status },
            { "fee", null },
            { "fees", null },
            { "trades", trades },
        });
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object response = await this.privateGetFills(parameters);
        //
        //    {
        //        "result": "success",
        //        "serverTime": "2016-02-25T09:45:53.818Z",
        //        "fills": [
        //            {
        //                "fillTime": "2016-02-25T09:47:01.000Z",
        //                "order_id": "c18f0c17-9971-40e6-8e5b-10df05d422f0",
        //                "fill_id": "522d4e08-96e7-4b44-9694-bfaea8fe215e",
        //                "cliOrdId": "d427f920-ec55-4c18-ba95-5fe241513b30", // EXTRA
        //                "symbol": "fi_xbtusd_180615",
        //                "side": "buy",
        //                "size": 2000,
        //                "price": 4255,
        //                "fillType": "maker"
        //            },
        //            ...
        //        ]
        //    }
        //
        return this.parseTrades(getValue(response, "fills"), market, since, limit);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name krakenfutures#fetchBalance
        * @description Fetch the balance for a sub-account, all sub-account balances are inside 'info' in the response
        * @param {object} params Exchange specific parameters
        * @param {string} params.type The sub-account type to query the balance of, possible values include 'flex', 'cash'/'main'/'funding', or a market symbol * defaults to 'cash' *
        * @param {string} params.symbol A unified market symbol, when assigned the balance for a trading market that matches the symbol is returned
        * @returns A [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object type = this.safeString2(parameters, "type", "account");
        object symbol = this.safeString(parameters, "symbol");
        parameters = this.omit(parameters, new List<object>() {"type", "account", "symbol"});
        object response = await this.privateGetAccounts(parameters);
        //
        //    {
        //        result: 'success',
        //        accounts: {
        //            fi_xbtusd: {
        //                auxiliary: { usd: '0', pv: '0.0', pnl: '0.0', af: '0.0', funding: '0.0' },
        //                marginRequirements: { im: '0.0', mm: '0.0', lt: '0.0', tt: '0.0' },
        //                triggerEstimates: { im: '0', mm: '0', lt: '0', tt: '0' },
        //                balances: { xbt: '0.0' },
        //                currency: 'xbt',
        //                type: 'marginAccount'
        //            },
        //            cash: {
        //                balances: {
        //                    eur: '0.0',
        //                    gbp: '0.0',
        //                    bch: '0.0',
        //                    xrp: '2.20188538338',
        //                    usd: '0.0',
        //                    eth: '0.0',
        //                    usdt: '0.0',
        //                    ltc: '0.0',
        //                    usdc: '0.0',
        //                    xbt: '0.0'
        //                },
        //                type: 'cashAccount'
        //            },
        //            fv_xrpxbt: {
        //                auxiliary: { usd: '0', pv: '0.0', pnl: '0.0', af: '0.0', funding: '0.0' },
        //                marginRequirements: { im: '0.0', mm: '0.0', lt: '0.0', tt: '0.0' },
        //                triggerEstimates: { im: '0', mm: '0', lt: '0', tt: '0' },
        //                balances: { xbt: '0.0' },
        //                currency: 'xbt',
        //                type: 'marginAccount'
        //            },
        //            fi_xrpusd: {
        //                auxiliary: { usd: '0', pv: '11.0', pnl: '0.0', af: '11.0', funding: '0.0' },
        //                marginRequirements: { im: '0.0', mm: '0.0', lt: '0.0', tt: '0.0' },
        //                triggerEstimates: { im: '0', mm: '0', lt: '0', tt: '0' },
        //                balances: { xrp: '11.0' },
        //                currency: 'xrp',
        //                type: 'marginAccount'
        //            },
        //            fi_ethusd: {
        //                auxiliary: { usd: '0', pv: '0.0', pnl: '0.0', af: '0.0', funding: '0.0' },
        //                marginRequirements: { im: '0.0', mm: '0.0', lt: '0.0', tt: '0.0' },
        //                triggerEstimates: { im: '0', mm: '0', lt: '0', tt: '0' },
        //                balances: { eth: '0.0' },
        //                currency: 'eth',
        //                type: 'marginAccount'
        //            },
        //            fi_ltcusd: {
        //                auxiliary: { usd: '0', pv: '0.0', pnl: '0.0', af: '0.0', funding: '0.0' },
        //                marginRequirements: { im: '0.0', mm: '0.0', lt: '0.0', tt: '0.0' },
        //                triggerEstimates: { im: '0', mm: '0', lt: '0', tt: '0' },
        //                balances: { ltc: '0.0' },
        //                currency: 'ltc',
        //                type: 'marginAccount'
        //            },
        //            fi_bchusd: {
        //                auxiliary: { usd: '0', pv: '0.0', pnl: '0.0', af: '0.0', funding: '0.0' },
        //                marginRequirements: { im: '0.0', mm: '0.0', lt: '0.0', tt: '0.0' },
        //                triggerEstimates: { im: '0', mm: '0', lt: '0', tt: '0' },
        //                balances: { bch: '0.0' },
        //                currency: 'bch',
        //                type: 'marginAccount'
        //            },
        //            flex: {
        //                currencies: {},
        //                initialMargin: '0.0',
        //                initialMarginWithOrders: '0.0',
        //                maintenanceMargin: '0.0',
        //                balanceValue: '0.0',
        //                portfolioValue: '0.0',
        //                collateralValue: '0.0',
        //                pnl: '0.0',
        //                unrealizedFunding: '0.0',
        //                totalUnrealized: '0.0',
        //                totalUnrealizedAsMargin: '0.0',
        //                availableMargin: '0.0',
        //                marginEquity: '0.0',
        //                type: 'multiCollateralMarginAccount'
        //            }
        //        },
        //        serverTime: '2022-04-12T07:48:07.475Z'
        //    }
        //
        object datetime = this.safeString(response, "serverTime");
        if (isTrue(isTrue(isEqual(type, "marginAccount")) || isTrue(isEqual(type, "margin"))))
        {
            if (isTrue(isEqual(symbol, null)))
            {
                throw new ArgumentsRequired ((string)add(this.id, " fetchBalance requires symbol argument for margin accounts")) ;
            }
            type = symbol;
        }
        if (isTrue(isEqual(type, null)))
        {
            type = ((bool) isTrue((isEqual(symbol, null)))) ? "cash" : symbol;
        }
        object accountName = this.parseAccount(type);
        object accounts = this.safeValue(response, "accounts");
        object account = this.safeValue(accounts, accountName);
        if (isTrue(isEqual(account, null)))
        {
            type = ((bool) isTrue((isEqual(type, null)))) ? "" : type;
            symbol = ((bool) isTrue((isEqual(symbol, null)))) ? "" : symbol;
            throw new BadRequest ((string)add(add(this.id, " fetchBalance has no account for "), type)) ;
        }
        object balance = this.parseBalance(account);
        return this.extend(new Dictionary<string, object>() {
            { "info", response },
            { "timestamp", this.parse8601(datetime) },
            { "datetime", datetime },
        }, balance);
    }

    public virtual object parseBalance(object response)
    {
        //
        // cashAccount
        //
        //    {
        //        balances: {
        //            eur: '0.0',
        //            gbp: '0.0',
        //            bch: '0.0',
        //            xrp: '2.20188538338',
        //            usd: '0.0',
        //            eth: '0.0',
        //            usdt: '0.0',
        //            ltc: '0.0',
        //            usdc: '0.0',
        //            xbt: '0.0'
        //        },
        //        type: 'cashAccount'
        //    }
        //
        // marginAccount e,g, fi_xrpusd
        //
        //    {
        //        auxiliary: {
        //            usd: '0',
        //            pv: '11.0',
        //            pnl: '0.0',
        //            af: '11.0',
        //            funding: '0.0'
        //        },
        //        marginRequirements: { im: '0.0', mm: '0.0', lt: '0.0', tt: '0.0' },
        //        triggerEstimates: { im: '0', mm: '0', lt: '0', tt: '0' },
        //        balances: { xrp: '11.0' },
        //        currency: 'xrp',
        //        type: 'marginAccount'
        //    }
        //
        // flex/multiCollateralMarginAccount
        //
        //    {
        //       currencies: {
        //            USDT: {
        //                quantity: '1',
        //                value: '1.0001',
        //                collateral: '0.9477197625',
        //                available: '1.0'
        //             }
        //       },
        //       initialMargin: '0.0',
        //       initialMarginWithOrders: '0.0',
        //       maintenanceMargin: '0.0',
        //       balanceValue: '1.0',
        //       portfolioValue: '1.0',
        //       collateralValue: '0.95',
        //       pnl: '0.0',
        //       unrealizedFunding: '0.0',
        //       totalUnrealized: '0.0',
        //       totalUnrealizedAsMargin: '0.0',
        //       availableMargin: '0.95',
        //       marginEquity: '0.95',
        //       type: 'multiCollateralMarginAccount'
        //    }
        //
        object accountType = this.safeString2(response, "accountType", "type");
        object isFlex = (isEqual(accountType, "multiCollateralMarginAccount"));
        object isCash = (isEqual(accountType, "cashAccount"));
        object balances = this.safeValue2(response, "balances", "currencies", new Dictionary<string, object>() {});
        object result = new Dictionary<string, object>() {};
        object currencyIds = new List<string>(((Dictionary<string,object>)balances).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(currencyIds)); postFixIncrement(ref i))
        {
            object currencyId = getValue(currencyIds, i);
            object balance = getValue(balances, currencyId);
            object code = this.safeCurrencyCode(currencyId);
            object splitCode = ((string)code).Split((string)"_").ToList<object>();
            object codeLength = getArrayLength(splitCode);
            if (isTrue(isGreaterThan(codeLength, 1)))
            {

            }
            object account = this.account();
            if (isTrue(isFlex))
            {
                ((Dictionary<string, object>)account)["total"] = this.safeString(balance, "quantity");
                ((Dictionary<string, object>)account)["free"] = this.safeString(balance, "available");
            } else if (isTrue(isCash))
            {
                ((Dictionary<string, object>)account)["used"] = "0.0";
                ((Dictionary<string, object>)account)["total"] = balance;
            } else
            {
                object auxiliary = this.safeValue(response, "auxiliary");
                ((Dictionary<string, object>)account)["free"] = this.safeString(auxiliary, "af");
                ((Dictionary<string, object>)account)["total"] = this.safeString(auxiliary, "pv");
            }
            ((Dictionary<string, object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async virtual Task<object> fetchFundingRateHistory(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        this.checkRequiredSymbol("fetchFundingRateHistory", symbol);
        await this.loadMarkets();
        object market = this.market(symbol);
        if (!isTrue(getValue(market, "swap")))
        {
            throw new BadRequest ((string)add(this.id, " fetchFundingRateHistory() supports swap contracts only")) ;
        }
        object request = new Dictionary<string, object>() {
            { "symbol", ((string)getValue(market, "id")).ToUpper() },
        };
        object response = await this.publicGetHistoricalfundingrates(this.extend(request, parameters));
        //
        //    {
        //        rates: [
        //          {
        //            timestamp: '2018-08-31T16:00:00.000Z',
        //            fundingRate: '2.18900669884E-7',
        //            relativeFundingRate: '0.000060779960000000'
        //          },
        //          ...
        //        ]
        //    }
        //
        object rates = this.safeValue(response, "rates");
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(rates)); postFixIncrement(ref i))
        {
            object item = getValue(rates, i);
            object datetime = this.safeString(item, "timestamp");
            ((List<object>)result).Add(new Dictionary<string, object>() {
                { "info", item },
                { "symbol", symbol },
                { "fundingRate", this.safeNumber(item, "fundingRate") },
                { "timestamp", this.parse8601(datetime) },
                { "datetime", datetime },
            });
        }
        object sorted = this.sortBy(result, "timestamp");
        return this.filterBySymbolSinceLimit(sorted, symbol, since, limit);
    }

    public async override Task<object> fetchPositions(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name krakenfutures#fetchPositions
        * @description Fetches current contract trading positions
        * @param {[string]} symbols List of unified symbols
        * @param {object} params Not used by krakenfutures
        * @returns Parsed exchange response for positions
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object response = await this.privateGetOpenpositions(request);
        //
        //    {
        //        result: 'success',
        //        openPositions: [
        //            {
        //                side: 'long',
        //                symbol: 'pi_xrpusd',
        //                price: '0.7533',
        //                fillTime: '2022-03-03T22:51:16.566Z',
        //                size: '230',
        //                unrealizedFunding: '-0.001878596918214635'
        //            }
        //        ],
        //        serverTime: '2022-03-03T22:51:16.566Z'
        //    }
        //
        object result = this.parsePositions(response);
        return this.filterByArray(result, "symbol", symbols, false);
    }

    public override object parsePositions(object response, object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object result = new List<object>() {};
        object positions = this.safeValue(response, "openPositions");
        for (object i = 0; isLessThan(i, getArrayLength(positions)); postFixIncrement(ref i))
        {
            object position = this.parsePosition(getValue(positions, i));
            ((List<object>)result).Add(position);
        }
        return result;
    }

    public override object parsePosition(object position, object market = null)
    {
        // cross
        //    {
        //        side: 'long',
        //        symbol: 'pi_xrpusd',
        //        price: '0.7533',
        //        fillTime: '2022-03-03T22:51:16.566Z',
        //        size: '230',
        //        unrealizedFunding: '-0.001878596918214635'
        //    }
        //
        // isolated
        //    {
        //        "side":"long",
        //        "symbol":"pf_ftmusd",
        //        "price":"0.4921",
        //        "fillTime":"2023-02-22T11:37:16.685Z",
        //        "size":"1",
        //        "unrealizedFunding":"-8.155240068885155E-8",
        //        "pnlCurrency":"USD",
        //        "maxFixedLeverage":"1.0"
        //    }
        //
        object leverage = this.safeNumber(position, "maxFixedLeverage");
        object marginType = "cross";
        if (isTrue(!isEqual(leverage, null)))
        {
            marginType = "isolated";
        }
        object datetime = this.safeString(position, "fillTime");
        object marketId = this.safeString(position, "symbol");
        market = this.safeMarket(marketId, market);
        return new Dictionary<string, object>() {
            { "info", position },
            { "symbol", getValue(market, "symbol") },
            { "timestamp", this.parse8601(datetime) },
            { "datetime", datetime },
            { "initialMargin", null },
            { "initialMarginPercentage", null },
            { "maintenanceMargin", null },
            { "maintenanceMarginPercentage", null },
            { "entryPrice", this.safeNumber(position, "price") },
            { "notional", null },
            { "leverage", leverage },
            { "unrealizedPnl", this.safeNumber(position, "unrealizedFunding") },
            { "contracts", this.safeNumber(position, "size") },
            { "contractSize", this.safeNumber(market, "contractSize") },
            { "marginRatio", null },
            { "liquidationPrice", null },
            { "markPrice", null },
            { "collateral", null },
            { "marginType", marginType },
            { "side", this.safeString(position, "side") },
            { "percentage", null },
        };
    }

    public async override Task<object> fetchLeverageTiers(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.publicGetInstruments(parameters);
        //
        //    {
        //        "result": "success",
        //        "instruments": [
        //            {
        //                "symbol": "fi_ethusd_180928",
        //                "type": "futures_inverse",  // futures_vanilla  // spot index
        //                "underlying": "rr_ethusd",
        //                "lastTradingTime": "2018-09-28T15:00:00.000Z",
        //                "tickSize": 0.1,
        //                "contractSize": 1,
        //                "tradeable": true,
        //                "marginLevels": [
        //                    {
        //                        "contracts":0,
        //                        "initialMargin":0.02,
        //                        "maintenanceMargin":0.01
        //                    },
        //                    {
        //                        "contracts":250000,
        //                        "initialMargin":0.04,
        //                        "maintenanceMargin":0.02
        //                    },
        //                    ...
        //                ],
        //                "isin": "GB00JVMLMP88",
        //                "retailMarginLevels": [
        //                    {
        //                        "contracts": 0,
        //                        "initialMargin": 0.5,
        //                        "maintenanceMargin": 0.25
        //                    }
        //                ],
        //                "tags": [],
        //            },
        //            {
        //                "symbol": "in_xbtusd",
        //                "type": "spot index",
        //                "tradeable":false
        //            }
        //        ]
        //        "serverTime": "2018-07-19T11:32:39.433Z"
        //    }
        //
        object data = this.safeValue(response, "instruments");
        return this.parseLeverageTiers(data, symbols, "symbol");
    }

    public override object parseMarketLeverageTiers(object info, object market = null)
    {
        /**
         * @method
         * @ignore
         * @param info Exchange market response for 1 market
         * @param market CCXT market
         */
        //
        //    {
        //        "symbol": "fi_ethusd_180928",
        //        "type": "futures_inverse",  // futures_vanilla  // spot index
        //        "underlying": "rr_ethusd",
        //        "lastTradingTime": "2018-09-28T15:00:00.000Z",
        //        "tickSize": 0.1,
        //        "contractSize": 1,
        //        "tradeable": true,
        //        "marginLevels": [
        //            {
        //                "contracts":0,
        //                "initialMargin":0.02,
        //                "maintenanceMargin":0.01
        //            },
        //            {
        //                "contracts":250000,
        //                "initialMargin":0.04,
        //                "maintenanceMargin":0.02
        //            },
        //            ...
        //        ],
        //        "isin": "GB00JVMLMP88",
        //        "retailMarginLevels": [
        //            {
        //                "contracts": 0,
        //                "initialMargin": 0.5,
        //                "maintenanceMargin": 0.25
        //            }
        //        ],
        //        "tags": [],
        //    }
        //
        object marginLevels = this.safeValue(info, "marginLevels");
        object id = this.safeString(info, "symbol");
        market = this.safeMarket(id, market);
        object tiers = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(marginLevels)); postFixIncrement(ref i))
        {
            object tier = getValue(marginLevels, i);
            object initialMargin = this.safeString(tier, "initialMargin");
            object notionalFloor = this.safeNumber(tier, "contracts");
            if (isTrue(!isEqual(i, 0)))
            {
                object tiersLength = getArrayLength(tiers);
                object previousTier = getValue(tiers, subtract(tiersLength, 1));
                ((Dictionary<string, object>)previousTier)["notionalCap"] = notionalFloor;
            }
            ((List<object>)tiers).Add(new Dictionary<string, object>() {
                { "tier", this.sum(i, 1) },
                { "currency", getValue(market, "quote") },
                { "notionalFloor", notionalFloor },
                { "notionalCap", null },
                { "maintenanceMarginRate", this.safeNumber(tier, "maintenanceMargin") },
                { "maxLeverage", this.parseNumber(Precise.stringDiv("1", initialMargin)) },
                { "info", tier },
            });
        }
        return tiers;
    }

    public override object parseTransfer(object transfer, object currency = null)
    {
        //
        // transfer
        //
        //    {
        //        result: 'success',
        //        serverTime: '2022-04-12T01:22:53.420Z'
        //    }
        //
        object datetime = this.safeString(transfer, "serverTime");
        return new Dictionary<string, object>() {
            { "info", transfer },
            { "id", null },
            { "timestamp", this.parse8601(datetime) },
            { "datetime", datetime },
            { "currency", this.safeString(currency, "code") },
            { "amount", null },
            { "fromAccount", null },
            { "toAccount", null },
            { "status", this.safeString(transfer, "result") },
        };
    }

    public override object parseAccount(object account)
    {
        object accountByType = new Dictionary<string, object>() {
            { "main", "cash" },
            { "funding", "cash" },
            { "future", "cash" },
            { "futures", "cash" },
            { "cashAccount", "cash" },
            { "multiCollateralMarginAccount", "flex" },
            { "multiCollateral", "flex" },
            { "multiCollateralMargin", "flex" },
        };
        if (isTrue(((Dictionary<string,object>)accountByType).ContainsKey(toStringOrNull(account))))
        {
            return getValue(accountByType, account);
        } else if (isTrue(((Dictionary<string,object>)this.markets).ContainsKey(toStringOrNull(account))))
        {
            object market = this.market(account);
            object marketId = getValue(market, "id");
            object splitId = ((string)marketId).Split((string)"_").ToList<object>();
            if (isTrue(getValue(market, "inverse")))
            {
                return add("fi_", this.safeString(splitId, 1));
            } else
            {
                return add("fv_", this.safeString(splitId, 1));
            }
        } else
        {
            return account;
        }
    }

    public async virtual Task<object> transferOut(object code, object amount, object parameters = null)
    {
        /**
        * @description transfer from futures wallet to spot wallet
        * @param {str} code Unified currency code
        * @param {float} amount Size of the transfer
        * @param {dict} params Exchange specific parameters
        * @returns a [transfer structure]{@link https://docs.ccxt.com/#/?id=transfer-structure}
        */
        parameters ??= new Dictionary<string, object>();
        return await this.transfer(code, amount, "future", "spot", parameters);
    }

    public async override Task<object> transfer(object code, object amount, object fromAccount, object toAccount, object parameters = null)
    {
        /**
        * @method
        * @name krakenfutures#transfer
        * @description transfers currencies between sub-accounts
        * @param {string} code Unified currency code
        * @param {float} amount Size of the transfer
        * @param {string} fromAccount 'main'/'funding'/'future', 'flex', or a unified market symbol
        * @param {string} toAccount 'main'/'funding', 'flex', 'spot' or a unified market symbol
        * @param {object} params Exchange specific parameters
        * @returns a [transfer structure]{@link https://docs.ccxt.com/#/?id=transfer-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object method = "privatePostTransfer";
        object request = new Dictionary<string, object>() {
            { "amount", this.currencyToPrecision(code, amount) },
        };
        if (isTrue(isEqual(fromAccount, "spot")))
        {
            throw new BadRequest ((string)add(this.id, " transfer does not yet support transfers from spot")) ;
        }
        if (isTrue(isEqual(toAccount, "spot")))
        {
            if (isTrue(!isEqual(this.parseAccount(fromAccount), "cash")))
            {
                throw new BadRequest ((string)add(add(add(add(this.id, " transfer cannot transfer from "), fromAccount), " to "), toAccount)) ;
            }
            method = "privatePostWithdrawal";
            ((Dictionary<string, object>)request)["currency"] = getValue(currency, "id");
        } else
        {
            ((Dictionary<string, object>)request)["fromAccount"] = this.parseAccount(fromAccount);
            ((Dictionary<string, object>)request)["toAccount"] = this.parseAccount(toAccount);
            ((Dictionary<string, object>)request)["unit"] = getValue(currency, "id");
        }
        object response = await this.callAsync(method, this.extend(request, parameters));
        //
        //    {
        //        result: 'success',
        //        serverTime: '2022-04-12T01:22:53.420Z'
        //    }
        //
        object transfer = this.parseTransfer(response, currency);
        return this.extend(transfer, new Dictionary<string, object>() {
            { "amount", amount },
            { "fromAccount", fromAccount },
            { "toAccount", toAccount },
        });
    }

    public override object handleErrors(object code, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;
        }
        if (isTrue(isEqual(code, 429)))
        {
            throw new DDoSProtection ((string)add(add(this.id, " "), body)) ;
        }
        object message = this.safeString(response, "error");
        if (isTrue(isEqual(message, null)))
        {
            return null;
        }
        object feedback = add(add(this.id, " "), body);
        this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), message, feedback);
        this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), message, feedback);
        if (isTrue(isEqual(code, 400)))
        {
            throw new BadRequest ((string)feedback) ;
        }
        throw new ExchangeError ((string)feedback) ;
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object apiVersions = this.safeValue(getValue(this.options, "versions"), api, new Dictionary<string, object>() {});
        object methodVersions = this.safeValue(apiVersions, method, new Dictionary<string, object>() {});
        object defaultVersion = this.safeString(methodVersions, path, this.version);
        object version = this.safeString(parameters, "version", defaultVersion);
        parameters = this.omit(parameters, "version");
        object apiAccess = this.safeValue(getValue(this.options, "access"), api, new Dictionary<string, object>() {});
        object methodAccess = this.safeValue(apiAccess, method, new Dictionary<string, object>() {});
        object access = this.safeString(methodAccess, path, "public");
        object endpoint = add(add(version, "/"), this.implodeParams(path, parameters));
        parameters = this.omit(parameters, this.extractParams(path));
        object query = endpoint;
        object postData = "";
        if (isTrue(getArrayLength(new List<string>(((Dictionary<string,object>)parameters).Keys))))
        {
            postData = this.urlencode(parameters);
            query = add(query, add("?", postData));
        }
        object url = add(getValue(getValue(this.urls, "api"), api), query);
        if (isTrue(isTrue(isEqual(api, "private")) || isTrue(isEqual(access, "private"))))
        {
            object auth = add(add(postData, "/api/"), (((bool) isTrue(isEqual(api, "private"))) ? endpoint : add(add(api, "/"), endpoint))); // 1
            object hash = this.hash(this.encode(auth), sha256, "binary"); // 2
            object secret = this.base64ToBinary(this.secret); // 3
            object signature = this.hmac(hash, secret, sha512, "base64"); // 4-5
            headers = new Dictionary<string, object>() {
                { "Content-Type", "application/json" },
                { "APIKey", this.apiKey },
                { "Authent", signature },
            };
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }
}
