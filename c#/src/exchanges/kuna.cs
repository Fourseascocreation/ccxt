using Main;
namespace Main;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

partial class kuna : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "kuna" },
            { "name", "Kuna" },
            { "countries", new List<object>() {"UA"} },
            { "rateLimit", 1000 },
            { "version", "v2" },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", null },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "cancelOrder", true },
                { "createOrder", true },
                { "fetchBalance", true },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchL3OrderBook", true },
                { "fetchLeverage", false },
                { "fetchMarginMode", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", true },
                { "fetchOHLCV", "emulated" },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTime", true },
                { "fetchTrades", true },
                { "fetchTradingFee", false },
                { "fetchTradingFees", false },
                { "reduceMargin", false },
                { "setLeverage", false },
                { "setPositionMode", false },
            } },
            { "timeframes", null },
            { "urls", new Dictionary<string, object>() {
                { "extension", ".json" },
                { "referral", "https://kuna.io?r=kunaid-gvfihe8az7o4" },
                { "logo", "https://user-images.githubusercontent.com/51840849/87153927-f0578b80-c2c0-11ea-84b6-74612568e9e1.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "xreserve", "https://api.xreserve.fund" },
                    { "v3", "https://api.kuna.io" },
                    { "public", "https://kuna.io" },
                    { "private", "https://kuna.io" },
                } },
                { "www", "https://kuna.io" },
                { "doc", "https://kuna.io/documents/api" },
                { "fees", "https://kuna.io/documents/api" },
            } },
            { "api", new Dictionary<string, object>() {
                { "xreserve", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "nonce", 1 },
                        { "fee", 1 },
                        { "delegated-transactions", 1 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "delegate-transfer", 1 },
                    } },
                } },
                { "v3", new Dictionary<string, object>() {
                    { "public", new Dictionary<string, object>() {
                        { "get", new Dictionary<string, object>() {
                            { "timestamp", 1 },
                            { "currencies", 1 },
                            { "markets", 1 },
                            { "tickers", 1 },
                            { "k", 1 },
                            { "trades_history", 1 },
                            { "fees", 1 },
                            { "exchange-rates", 1 },
                            { "exchange-rates/currency", 1 },
                            { "book/market", 1 },
                            { "kuna_codes/code/check", 1 },
                            { "landing_page_statistic", 1 },
                            { "translations/locale", 1 },
                            { "trades/market/hist", 1 },
                        } },
                        { "post", new Dictionary<string, object>() {
                            { "http_test", 1 },
                            { "deposit_channels", 1 },
                            { "withdraw_channels", 1 },
                            { "subscription_plans", 1 },
                            { "send_to", 1 },
                            { "confirm_token", 1 },
                            { "kunaid", 1 },
                            { "withdraw/prerequest", 1 },
                            { "deposit/prerequest", 1 },
                            { "deposit/exchange-rates", 1 },
                        } },
                    } },
                    { "sign", new Dictionary<string, object>() {
                        { "get", new Dictionary<string, object>() {
                            { "reset_password/token", 1 },
                        } },
                        { "post", new Dictionary<string, object>() {
                            { "signup/google", 1 },
                            { "signup/resend_confirmation", 1 },
                            { "signup", 1 },
                            { "signin", 1 },
                            { "signin/two_factor", 1 },
                            { "signin/resend_confirm_device", 1 },
                            { "signin/confirm_device", 1 },
                            { "reset_password", 1 },
                            { "cool-signin", 1 },
                        } },
                        { "put", new Dictionary<string, object>() {
                            { "reset_password/token", 1 },
                            { "signup/code/confirm", 1 },
                        } },
                    } },
                    { "private", new Dictionary<string, object>() {
                        { "post", new Dictionary<string, object>() {
                            { "auth/w/order/submit", 1 },
                            { "auth/r/orders", 1 },
                            { "auth/r/orders/market", 1 },
                            { "auth/r/orders/markets", 1 },
                            { "auth/api_tokens/delete", 1 },
                            { "auth/api_tokens/create", 1 },
                            { "auth/api_tokens", 1 },
                            { "auth/signin_history/uniq", 1 },
                            { "auth/signin_history", 1 },
                            { "auth/disable_withdraw_confirmation", 1 },
                            { "auth/change_password", 1 },
                            { "auth/deposit_address", 1 },
                            { "auth/announcements/accept", 1 },
                            { "auth/announcements/unaccepted", 1 },
                            { "auth/otp/deactivate", 1 },
                            { "auth/otp/activate", 1 },
                            { "auth/otp/secret", 1 },
                            { "auth/r/order/market/:order_id/trades", 1 },
                            { "auth/r/orders/market/hist", 1 },
                            { "auth/r/orders/hist", 1 },
                            { "auth/r/orders/hist/markets", 1 },
                            { "auth/r/orders/details", 1 },
                            { "auth/assets-history", 1 },
                            { "auth/assets-history/withdraws", 1 },
                            { "auth/assets-history/deposits", 1 },
                            { "auth/r/wallets", 1 },
                            { "auth/markets/favorites", 1 },
                            { "auth/markets/favorites/list", 1 },
                            { "auth/me/update", 1 },
                            { "auth/me", 1 },
                            { "auth/fund_sources", 1 },
                            { "auth/fund_sources/list", 1 },
                            { "auth/withdraw/resend_confirmation", 1 },
                            { "auth/withdraw", 1 },
                            { "auth/withdraw/details", 1 },
                            { "auth/withdraw/info", 1 },
                            { "auth/payment_addresses", 1 },
                            { "auth/deposit/prerequest", 1 },
                            { "auth/deposit/exchange-rates", 1 },
                            { "auth/deposit", 1 },
                            { "auth/deposit/details", 1 },
                            { "auth/deposit/info", 1 },
                            { "auth/kuna_codes/count", 1 },
                            { "auth/kuna_codes/details", 1 },
                            { "auth/kuna_codes/edit", 1 },
                            { "auth/kuna_codes/send-pdf", 1 },
                            { "auth/kuna_codes", 1 },
                            { "auth/kuna_codes/redeemed-by-me", 1 },
                            { "auth/kuna_codes/issued-by-me", 1 },
                            { "auth/payment_requests/invoice", 1 },
                            { "auth/payment_requests/type", 1 },
                            { "auth/referral_program/weekly_earnings", 1 },
                            { "auth/referral_program/stats", 1 },
                            { "auth/merchant/payout_services", 1 },
                            { "auth/merchant/withdraw", 1 },
                            { "auth/merchant/payment_services", 1 },
                            { "auth/merchant/deposit", 1 },
                            { "auth/verification/auth_token", 1 },
                            { "auth/kunaid_purchase/create", 1 },
                            { "auth/devices/list", 1 },
                            { "auth/sessions/list", 1 },
                            { "auth/subscriptions/reactivate", 1 },
                            { "auth/subscriptions/cancel", 1 },
                            { "auth/subscriptions/prolong", 1 },
                            { "auth/subscriptions/create", 1 },
                            { "auth/subscriptions/list", 1 },
                            { "auth/kuna_ids/list", 1 },
                            { "order/cancel/multi", 1 },
                            { "order/cancel", 1 },
                        } },
                        { "put", new Dictionary<string, object>() {
                            { "auth/fund_sources/id", 1 },
                            { "auth/kuna_codes/redeem", 1 },
                        } },
                        { "delete", new Dictionary<string, object>() {
                            { "auth/markets/favorites", 1 },
                            { "auth/fund_sources", 1 },
                            { "auth/devices", 1 },
                            { "auth/devices/list", 1 },
                            { "auth/sessions/list", 1 },
                            { "auth/sessions", 1 },
                        } },
                    } },
                } },
                { "public", new Dictionary<string, object>() {
                    { "get", new List<object>() {"depth", "k_with_pending_trades", "k", "markets", "order_book", "order_book/{market}", "tickers", "tickers/{market}", "timestamp", "trades", "trades/{market}"} },
                } },
                { "private", new Dictionary<string, object>() {
                    { "get", new List<object>() {"members/me", "deposits", "deposit", "deposit_address", "orders", "order", "trades/my", "withdraws", "withdraw"} },
                    { "post", new List<object>() {"orders", "orders/multi", "orders/clear", "order/delete", "withdraw"} },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "tierBased", false },
                    { "percentage", true },
                    { "taker", this.parseNumber("0.0025") },
                    { "maker", this.parseNumber("0.0025") },
                } },
                { "funding", new Dictionary<string, object>() {
                    { "withdraw", new Dictionary<string, object>() {
                        { "UAH", "1%" },
                        { "BTC", 0.001 },
                        { "BCH", 0.001 },
                        { "ETH", 0.01 },
                        { "WAVES", 0.01 },
                        { "GOL", 0 },
                        { "GBG", 0 },
                    } },
                    { "deposit", new Dictionary<string, object>() {} },
                } },
            } },
            { "commonCurrencies", new Dictionary<string, object>() {
                { "PLA", "Plair" },
            } },
            { "precisionMode", TICK_SIZE },
            { "exceptions", new Dictionary<string, object>() {
                { "2002", typeof(InsufficientFunds) },
                { "2003", typeof(OrderNotFound) },
            } },
        });
    }

    public async override Task<object> fetchTime(object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchTime
        * @description fetches the current integer timestamp in milliseconds from the exchange server
        * @param {object} params extra parameters specific to the kuna api endpoint
        * @returns {int} the current integer timestamp in milliseconds from the exchange server
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetTimestamp(parameters);
        //
        //     1594911427
        //
        return multiply(response, 1000);
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchMarkets
        * @description retrieves data on all markets for kuna
        * @param {object} params extra parameters specific to the exchange api endpoint
        * @returns {[object]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object quotes = new List<object>() {"btc", "rub", "uah", "usd", "usdt", "usdc"};
        object markets = new List<object>() {};
        object response = await this.publicGetTickers(parameters);
        //
        //    {
        //        shibuah: {
        //            at: '1644463685',
        //            ticker: {
        //                buy: '0.000911',
        //                sell: '0.00092',
        //                low: '0.000872',
        //                high: '0.000963',
        //                last: '0.000911',
        //                vol: '1539278096.0',
        //                price: '1434244.211249'
        //            }
        //        }
        //    }
        //
        object ids = new List<string>(((Dictionary<string,object>)response).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(ids)); postFixIncrement(ref i))
        {
            object id = getValue(ids, i);
            for (object j = 0; isLessThan(j, getArrayLength(quotes)); postFixIncrement(ref j))
            {
                object quoteId = getValue(quotes, j);
                // usd gets matched before usdt in usdtusd USDT/USD
                // https://github.com/ccxt/ccxt/issues/9868
                object slicedId = ((string)id).Substring((int)1);
                object index = getIndexOf(slicedId, quoteId);
                object slice = ((string)slicedId).Substring((int)index);
                if (isTrue(isTrue((isGreaterThan(index, 0))) && isTrue((isEqual(slice, quoteId)))))
                {
                    // usd gets matched before usdt in usdtusd USDT/USD
                    // https://github.com/ccxt/ccxt/issues/9868
                    object baseId = add(getValue(id, 0), ((string)slicedId).Replace((string)quoteId, (string)""));
                    object bs = this.safeCurrencyCode(baseId);
                    object quote = this.safeCurrencyCode(quoteId);
                    ((List<object>)markets).Add(new Dictionary<string, object>() {
                        { "id", id },
                        { "symbol", add(add(bs, "/"), quote) },
                        { "base", bs },
                        { "quote", quote },
                        { "settle", null },
                        { "baseId", baseId },
                        { "quoteId", quoteId },
                        { "settleId", null },
                        { "type", "spot" },
                        { "spot", true },
                        { "margin", false },
                        { "swap", false },
                        { "future", false },
                        { "option", false },
                        { "active", null },
                        { "contract", false },
                        { "linear", null },
                        { "inverse", null },
                        { "contractSize", null },
                        { "expiry", null },
                        { "expiryDatetime", null },
                        { "strike", null },
                        { "optionType", null },
                        { "precision", new Dictionary<string, object>() {
                            { "amount", null },
                            { "price", null },
                        } },
                        { "limits", new Dictionary<string, object>() {
                            { "leverage", new Dictionary<string, object>() {
                                { "min", null },
                                { "max", null },
                            } },
                            { "amount", new Dictionary<string, object>() {
                                { "min", null },
                                { "max", null },
                            } },
                            { "price", new Dictionary<string, object>() {
                                { "min", null },
                                { "max", null },
                            } },
                            { "cost", new Dictionary<string, object>() {
                                { "min", null },
                                { "max", null },
                            } },
                        } },
                        { "info", null },
                    });
                }
            }
        }
        return markets;
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int|undefined} limit the maximum amount of order book entries to return
        * @param {object} params extra parameters specific to the kuna api endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((Dictionary<string, object>)request)["limit"] = limit; // default = 300
        }
        object orderbook = await this.publicGetDepth(this.extend(request, parameters));
        object timestamp = this.safeTimestamp(orderbook, "timestamp");
        return this.parseOrderBook(orderbook, getValue(market, "symbol"), timestamp);
    }

    public override object parseTicker(object ticker, object market = null)
    {
        object timestamp = this.safeTimestamp(ticker, "at");
        ticker = getValue(ticker, "ticker");
        object symbol = this.safeSymbol(null, market);
        object last = this.safeString(ticker, "last");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "high") },
            { "low", this.safeString(ticker, "low") },
            { "bid", this.safeString(ticker, "buy") },
            { "bidVolume", null },
            { "ask", this.safeString(ticker, "sell") },
            { "askVolume", null },
            { "vwap", null },
            { "open", this.safeString(ticker, "open") },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", null },
            { "average", null },
            { "baseVolume", this.safeString(ticker, "vol") },
            { "quoteVolume", null },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchTickers
        * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
        * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} params extra parameters specific to the kuna api endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object response = await this.publicGetTickers(parameters);
        object ids = new List<string>(((Dictionary<string,object>)response).Keys);
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(ids)); postFixIncrement(ref i))
        {
            object id = getValue(ids, i);
            object market = this.safeMarket(id);
            object symbol = getValue(market, "symbol");
            ((Dictionary<string, object>)result)[(string)symbol] = this.parseTicker(getValue(response, id), market);
        }
        return this.filterByArray(result, "symbol", symbols);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} params extra parameters specific to the kuna api endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
        };
        object response = await this.publicGetTickersMarket(this.extend(request, parameters));
        return this.parseTicker(response, market);
    }

    public async virtual Task<object> fetchL3OrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchL3OrderBook
        * @description fetches level 3 information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string} symbol unified market symbol
        * @param {int|undefined} limit max number of orders to return, default is undefined
        * @param {object} params extra parameters specific to the kuna api endpoint
        * @returns {object} an [order book structure]{@link https://docs.ccxt.com/#/?id=order-book-structure}
        */
        parameters ??= new Dictionary<string, object>();
        return await this.fetchOrderBook(symbol, limit, parameters);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
        * @param {int|undefined} limit the maximum amount of trades to fetch
        * @param {object} params extra parameters specific to the kuna api endpoint
        * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
        };
        object response = await this.publicGetTrades(this.extend(request, parameters));
        //
        //      [
        //          {
        //              "id":11353466,
        //              "price":"3000.16",
        //              "volume":"0.000397",
        //              "funds":"1.19106352",
        //              "market":"ethusdt",
        //              "created_at":"2022-04-12T18:32:36Z",
        //              "side":null,
        //              "trend":"sell"
        //          },
        //      ]
        //
        return this.parseTrades(response, market, since, limit);
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // fetchTrades (public)
        //
        //      {
        //          "id":11353466,
        //          "price":"3000.16",
        //          "volume":"0.000397",
        //          "funds":"1.19106352",
        //          "market":"ethusdt",
        //          "created_at":"2022-04-12T18:32:36Z",
        //          "side":null,
        //          "trend":"sell"
        //      }
        //
        // fetchMyTrades (private)
        //
        //      {
        //          "id":11353719,
        //          "price":"0.13566",
        //          "volume":"99.0",
        //          "funds":"13.43034",
        //          "market":"dogeusdt",
        //          "created_at":"2022-04-12T18:58:44Z",
        //          "side":"ask",
        //          "order_id":1665670371,
        //          "trend":"buy"
        //      }
        //
        object timestamp = this.parse8601(this.safeString(trade, "created_at"));
        object symbol = null;
        if (isTrue(market))
        {
            symbol = getValue(market, "symbol");
        }
        object side = this.safeString2(trade, "side", "trend");
        if (isTrue(!isEqual(side, null)))
        {
            object sideMap = new Dictionary<string, object>() {
                { "ask", "sell" },
                { "bid", "buy" },
            };
            side = this.safeString(sideMap, side, side);
        }
        object priceString = this.safeString(trade, "price");
        object amountString = this.safeString(trade, "volume");
        object costString = this.safeNumber(trade, "funds");
        object orderId = this.safeString(trade, "order_id");
        object id = this.safeString(trade, "id");
        return this.safeTrade(new Dictionary<string, object>() {
            { "id", id },
            { "info", trade },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", symbol },
            { "type", null },
            { "side", side },
            { "order", orderId },
            { "takerOrMaker", null },
            { "price", priceString },
            { "amount", amountString },
            { "cost", costString },
            { "fee", null },
        }, market);
    }

    public async override Task<object> fetchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchOHLCV
        * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe the length of time each candle represents
        * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
        * @param {int|undefined} limit the maximum amount of candles to fetch
        * @param {object} params extra parameters specific to the kuna api endpoint
        * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object trades = await this.fetchTrades(symbol, since, limit, parameters);
        object ohlcvc = this.buildOHLCVC(trades, timeframe, since, limit);
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(ohlcvc)); postFixIncrement(ref i))
        {
            object ohlcv = getValue(ohlcvc, i);
            ((List<object>)result).Add(new List<object>() {getValue(ohlcv, 0), getValue(ohlcv, 1), getValue(ohlcv, 2), getValue(ohlcv, 3), getValue(ohlcv, 4), getValue(ohlcv, 5)});
        }
        return result;
    }

    public virtual object parseBalance(object response)
    {
        object balances = this.safeValue(response, "accounts", new List<object>() {});
        object result = new Dictionary<string, object>() {
            { "info", balances },
        };
        for (object i = 0; isLessThan(i, getArrayLength(balances)); postFixIncrement(ref i))
        {
            object balance = getValue(balances, i);
            object currencyId = this.safeString(balance, "currency");
            object code = this.safeCurrencyCode(currencyId);
            object account = this.account();
            ((Dictionary<string, object>)account)["free"] = this.safeString(balance, "balance");
            ((Dictionary<string, object>)account)["used"] = this.safeString(balance, "locked");
            ((Dictionary<string, object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @param {object} params extra parameters specific to the kuna api endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetMembersMe(parameters);
        return this.parseBalance(response);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#createOrder
        * @description create a trade order
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} params extra parameters specific to the kuna api endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
            { "side", side },
            { "volume", ((object)amount).ToString() },
            { "ord_type", type },
        };
        if (isTrue(isEqual(type, "limit")))
        {
            ((Dictionary<string, object>)request)["price"] = ((object)price).ToString();
        }
        object response = await this.privatePostOrders(this.extend(request, parameters));
        return this.parseOrder(response, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#cancelOrder
        * @description cancels an open order
        * @param {string} id order id
        * @param {string|undefined} symbol not used by kuna cancelOrder ()
        * @param {object} params extra parameters specific to the kuna api endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "id", id },
        };
        object response = await this.privatePostOrderDelete(this.extend(request, parameters));
        object order = this.parseOrder(response);
        object status = getValue(order, "status");
        if (isTrue(isTrue(isEqual(status, "closed")) || isTrue(isEqual(status, "canceled"))))
        {
            throw new OrderNotFound ((string)add(add(this.id, " "), this.json(order))) ;
        }
        return order;
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "done", "closed" },
            { "wait", "open" },
            { "cancel", "canceled" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseOrder(object order, object market = null)
    {
        object marketId = this.safeString(order, "market");
        object symbol = this.safeSymbol(marketId, market);
        object timestamp = this.parse8601(this.safeString(order, "created_at"));
        object status = this.parseOrderStatus(this.safeString(order, "state"));
        object type = this.safeString(order, "type");
        object side = this.safeString(order, "side");
        object id = this.safeString(order, "id");
        return this.safeOrder(new Dictionary<string, object>() {
            { "id", id },
            { "clientOrderId", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "status", status },
            { "symbol", symbol },
            { "type", type },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", side },
            { "price", this.safeString(order, "price") },
            { "stopPrice", null },
            { "triggerPrice", null },
            { "amount", this.safeString(order, "volume") },
            { "filled", this.safeString(order, "executed_volume") },
            { "remaining", this.safeString(order, "remaining_volume") },
            { "trades", null },
            { "fee", null },
            { "info", order },
            { "cost", null },
            { "average", null },
        }, market);
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchOrder
        * @description fetches information on an order made by the user
        * @param {string|undefined} symbol not used by kuna fetchOrder
        * @param {object} params extra parameters specific to the kuna api endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "id", parseInt(id) },
        };
        object response = await this.privateGetOrder(this.extend(request, parameters));
        return this.parseOrder(response);
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @param {string} symbol unified market symbol
        * @param {int|undefined} since the earliest time in ms to fetch open orders for
        * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
        * @param {object} params extra parameters specific to the kuna api endpoint
        * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOpenOrders() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
        };
        object response = await this.privateGetOrders(this.extend(request, parameters));
        // todo emulation of fetchClosedOrders, fetchOrders, fetchOrder
        // with order cache + fetchOpenOrders
        // as in BTC-e, Liqui, Yobit, DSX, Tidex, WEX
        return this.parseOrders(response, market, since, limit);
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchMyTrades
        * @description fetch all trades made by the user
        * @param {string} symbol unified market symbol
        * @param {int|undefined} since the earliest time in ms to fetch trades for
        * @param {int|undefined} limit the maximum number of trades structures to retrieve
        * @param {object} params extra parameters specific to the kuna api endpoint
        * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchMyTrades() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
        };
        object response = await this.privateGetTradesMy(this.extend(request, parameters));
        //
        //      [
        //          {
        //              "id":11353719,
        //              "price":"0.13566",
        //              "volume":"99.0",
        //              "funds":"13.43034",
        //              "market":"dogeusdt",
        //              "created_at":"2022-04-12T18:58:44Z",
        //              "side":"ask",
        //              "order_id":1665670371,
        //              "trend":"buy"
        //          },
        //      ]
        //
        return this.parseTrades(response, market, since, limit);
    }

    public override object nonce()
    {
        return this.milliseconds();
    }

    public virtual object encodeParams(object parameters)
    {
        if (isTrue(((Dictionary<string,object>)parameters).ContainsKey(toStringOrNull("orders"))))
        {
            object orders = getValue(parameters, "orders");
            object query = this.urlencode(this.keysort(this.omit(parameters, "orders")));
            for (object i = 0; isLessThan(i, getArrayLength(orders)); postFixIncrement(ref i))
            {
                object order = getValue(orders, i);
                object keys = new List<string>(((Dictionary<string,object>)order).Keys);
                for (object k = 0; isLessThan(k, getArrayLength(keys)); postFixIncrement(ref k))
                {
                    object key = getValue(keys, k);
                    object value = getValue(order, key);
                    query = add(query, add(add(add("&orders%5B%5D%5B", key), "%5D="), ((object)value).ToString()));
                }
            }
            return query;
        }
        return this.urlencode(this.keysort(parameters));
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = null;
        if (isTrue((api.GetType().IsGenericType && api.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>)))))
        {
            var versionaccessVariable = api;
            var version = ((List<object>) versionaccessVariable)[0];
            var access = ((List<object>) versionaccessVariable)[1];
            url = add(add(add(add(getValue(getValue(this.urls, "api"), version), "/"), version), "/"), this.implodeParams(path, parameters));
            if (isTrue(isEqual(access, "public")))
            {
                if (isTrue(isEqual(method, "GET")))
                {
                    if (isTrue(getArrayLength(new List<string>(((Dictionary<string,object>)parameters).Keys))))
                    {
                        url = add(url, add("?", this.urlencode(parameters)));
                    }
                } else if (isTrue(isTrue((isEqual(method, "POST"))) || isTrue((isEqual(method, "PUT")))))
                {
                    headers = new Dictionary<string, object>() {
                        { "Content-Type", "application/json" },
                    };
                    body = this.json(parameters);
                }
            } else if (isTrue(isEqual(access, "private")))
            {
                throw new NotSupported ((string)add(this.id, " private v3 API is not supported yet")) ;
            }
        } else
        {
            object request = add(add(add("/api/", this.version), "/"), this.implodeParams(path, parameters));
            if (isTrue(((Dictionary<string,object>)this.urls).ContainsKey(toStringOrNull("extension"))))
            {
                request = add(request, getValue(this.urls, "extension"));
            }
            object query = this.omit(parameters, this.extractParams(path));
            url = add(getValue(getValue(this.urls, "api"), api), request);
            if (isTrue(isEqual(api, "public")))
            {
                if (isTrue(getArrayLength(new List<string>(((Dictionary<string,object>)query).Keys))))
                {
                    url = add(url, add("?", this.urlencode(query)));
                }
            } else
            {
                this.checkRequiredCredentials();
                object nonce = ((object)this.nonce()).ToString();
                object queryInner = this.encodeParams(this.extend(new Dictionary<string, object>() {
                    { "access_key", this.apiKey },
                    { "tonce", nonce },
                }, parameters));
                object auth = add(add(add(add(method, "|"), request), "|"), queryInner);
                object signed = this.hmac(this.encode(auth), this.encode(this.secret), sha256);
                object suffix = add(add(query, "&signature="), signed);
                if (isTrue(isEqual(method, "GET")))
                {
                    url = add(url, add("?", suffix));
                } else
                {
                    body = suffix;
                    headers = new Dictionary<string, object>() {
                        { "Content-Type", "application/x-www-form-urlencoded" },
                    };
                }
            }
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object code, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;
        }
        if (isTrue(isEqual(code, 400)))
        {
            object error = this.safeValue(response, "error");
            object errorCode = this.safeString(error, "code");
            object feedback = add(add(this.id, " "), this.json(response));
            this.throwExactlyMatchedException(this.exceptions, errorCode, feedback);
        }
        return null;
    }
}
