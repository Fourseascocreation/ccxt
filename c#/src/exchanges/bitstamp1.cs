using Main;
namespace Main;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

partial class bitstamp1 : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "bitstamp1" },
            { "name", "Bitstamp" },
            { "countries", new List<object>() {"GB"} },
            { "rateLimit", 1000 },
            { "version", "v1" },
            { "has", new Dictionary<string, object>() {
                { "CORS", true },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelOrder", true },
                { "createOrder", true },
                { "createReduceOnlyOrder", false },
                { "createStopLimitOrder", false },
                { "createStopMarketOrder", false },
                { "createStopOrder", false },
                { "fetchBalance", true },
                { "fetchBorrowRate", false },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchBorrowRates", false },
                { "fetchBorrowRatesPerSymbol", false },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchLeverage", false },
                { "fetchMarginMode", false },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", true },
                { "fetchOpenInterestHistory", false },
                { "fetchOrder", false },
                { "fetchOrderBook", true },
                { "fetchPosition", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTrades", true },
                { "reduceMargin", false },
                { "setLeverage", false },
                { "setMarginMode", false },
                { "setPositionMode", false },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "rest", "https://www.bitstamp.net/api" },
                } },
                { "www", "https://www.bitstamp.net" },
                { "doc", "https://www.bitstamp.net/api" },
            } },
            { "requiredCredentials", new Dictionary<string, object>() {
                { "apiKey", true },
                { "secret", true },
                { "uid", true },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new List<object>() {"ticker", "ticker_hour", "order_book", "transactions", "eur_usd"} },
                } },
                { "private", new Dictionary<string, object>() {
                    { "post", new List<object>() {"balance", "user_transactions", "open_orders", "order_status", "cancel_order", "cancel_all_orders", "buy", "sell", "bitcoin_deposit_address", "unconfirmed_btc", "ripple_withdrawal", "ripple_address", "withdrawal_requests", "bitcoin_withdrawal"} },
                } },
            } },
            { "precisionMode", TICK_SIZE },
            { "markets", new Dictionary<string, object>() {
                { "BTC/USD", new Dictionary<string, object>() {
                    { "id", "btcusd" },
                    { "symbol", "BTC/USD" },
                    { "base", "BTC" },
                    { "quote", "USD" },
                    { "baseId", "btc" },
                    { "quoteId", "usd" },
                    { "maker", 0.005 },
                    { "taker", 0.005 },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "BTC/EUR", new Dictionary<string, object>() {
                    { "id", "btceur" },
                    { "symbol", "BTC/EUR" },
                    { "base", "BTC" },
                    { "quote", "EUR" },
                    { "baseId", "btc" },
                    { "quoteId", "eur" },
                    { "maker", 0.005 },
                    { "taker", 0.005 },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "EUR/USD", new Dictionary<string, object>() {
                    { "id", "eurusd" },
                    { "symbol", "EUR/USD" },
                    { "base", "EUR" },
                    { "quote", "USD" },
                    { "baseId", "eur" },
                    { "quoteId", "usd" },
                    { "maker", 0.005 },
                    { "taker", 0.005 },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "XRP/USD", new Dictionary<string, object>() {
                    { "id", "xrpusd" },
                    { "symbol", "XRP/USD" },
                    { "base", "XRP" },
                    { "quote", "USD" },
                    { "baseId", "xrp" },
                    { "quoteId", "usd" },
                    { "maker", 0.005 },
                    { "taker", 0.005 },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "XRP/EUR", new Dictionary<string, object>() {
                    { "id", "xrpeur" },
                    { "symbol", "XRP/EUR" },
                    { "base", "XRP" },
                    { "quote", "EUR" },
                    { "baseId", "xrp" },
                    { "quoteId", "eur" },
                    { "maker", 0.005 },
                    { "taker", 0.005 },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "XRP/BTC", new Dictionary<string, object>() {
                    { "id", "xrpbtc" },
                    { "symbol", "XRP/BTC" },
                    { "base", "XRP" },
                    { "quote", "BTC" },
                    { "baseId", "xrp" },
                    { "quoteId", "btc" },
                    { "maker", 0.005 },
                    { "taker", 0.005 },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "LTC/USD", new Dictionary<string, object>() {
                    { "id", "ltcusd" },
                    { "symbol", "LTC/USD" },
                    { "base", "LTC" },
                    { "quote", "USD" },
                    { "baseId", "ltc" },
                    { "quoteId", "usd" },
                    { "maker", 0.005 },
                    { "taker", 0.005 },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "LTC/EUR", new Dictionary<string, object>() {
                    { "id", "ltceur" },
                    { "symbol", "LTC/EUR" },
                    { "base", "LTC" },
                    { "quote", "EUR" },
                    { "baseId", "ltc" },
                    { "quoteId", "eur" },
                    { "maker", 0.005 },
                    { "taker", 0.005 },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "LTC/BTC", new Dictionary<string, object>() {
                    { "id", "ltcbtc" },
                    { "symbol", "LTC/BTC" },
                    { "base", "LTC" },
                    { "quote", "BTC" },
                    { "baseId", "ltc" },
                    { "quoteId", "btc" },
                    { "maker", 0.005 },
                    { "taker", 0.005 },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "ETH/USD", new Dictionary<string, object>() {
                    { "id", "ethusd" },
                    { "symbol", "ETH/USD" },
                    { "base", "ETH" },
                    { "quote", "USD" },
                    { "baseId", "eth" },
                    { "quoteId", "usd" },
                    { "maker", 0.005 },
                    { "taker", 0.005 },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "ETH/EUR", new Dictionary<string, object>() {
                    { "id", "etheur" },
                    { "symbol", "ETH/EUR" },
                    { "base", "ETH" },
                    { "quote", "EUR" },
                    { "baseId", "eth" },
                    { "quoteId", "eur" },
                    { "maker", 0.005 },
                    { "taker", 0.005 },
                    { "type", "spot" },
                    { "spot", true },
                } },
                { "ETH/BTC", new Dictionary<string, object>() {
                    { "id", "ethbtc" },
                    { "symbol", "ETH/BTC" },
                    { "base", "ETH" },
                    { "quote", "BTC" },
                    { "baseId", "eth" },
                    { "quoteId", "btc" },
                    { "maker", 0.005 },
                    { "taker", 0.005 },
                    { "type", "spot" },
                    { "spot", true },
                } },
            } },
        });
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitstamp1#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int|undefined} limit the maximum amount of order book entries to return
        * @param {object} params extra parameters specific to the bitstamp1 api endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(!isEqual(symbol, "BTC/USD")))
        {
            throw new ExchangeError ((string)add(add(add(add(add(this.id, " "), this.version), " fetchOrderBook doesn\'t support "), symbol), ", use it for BTC/USD only")) ;
        }
        await this.loadMarkets();
        object orderbook = await this.publicGetOrderBook(parameters);
        object timestamp = this.safeTimestamp(orderbook, "timestamp");
        return this.parseOrderBook(orderbook, symbol, timestamp);
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        // {
        //     "volume": "2836.47827985",
        //     "last": "36544.93",
        //     "timestamp": "1643372072",
        //     "bid": "36535.79",
        //     "vwap":"36594.20",
        //     "high": "37534.15",
        //     "low": "35511.32",
        //     "ask": "36548.47",
        //     "open": 37179.62
        // }
        //
        object symbol = this.safeSymbol(null, market);
        object timestamp = this.safeTimestamp(ticker, "timestamp");
        object vwap = this.safeString(ticker, "vwap");
        object baseVolume = this.safeString(ticker, "volume");
        object quoteVolume = Precise.stringMul(baseVolume, vwap);
        object last = this.safeString(ticker, "last");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "high") },
            { "low", this.safeString(ticker, "low") },
            { "bid", this.safeString(ticker, "bid") },
            { "bidVolume", null },
            { "ask", this.safeString(ticker, "ask") },
            { "askVolume", null },
            { "vwap", vwap },
            { "open", this.safeString(ticker, "open") },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", null },
            { "average", null },
            { "baseVolume", baseVolume },
            { "quoteVolume", quoteVolume },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name bitstamp1#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} params extra parameters specific to the bitstamp1 api endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(!isEqual(symbol, "BTC/USD")))
        {
            throw new ExchangeError ((string)add(add(add(add(add(this.id, " "), this.version), " fetchTicker doesn\'t support "), symbol), ", use it for BTC/USD only")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object ticker = await this.publicGetTicker(parameters);
        //
        // {
        //     "volume": "2836.47827985",
        //     "last": "36544.93",
        //     "timestamp": "1643372072",
        //     "bid": "36535.79",
        //     "vwap":"36594.20",
        //     "high": "37534.15",
        //     "low": "35511.32",
        //     "ask": "36548.47",
        //     "open": 37179.62
        // }
        //
        return this.parseTicker(ticker, market);
    }

    public override object parseTrade(object trade, object market = null)
    {
        object timestamp = this.safeTimestamp2(trade, "date", "datetime");
        object side = ((bool) isTrue((isEqual(getValue(trade, "type"), 0)))) ? "buy" : "sell";
        object orderId = this.safeString(trade, "order_id");
        object id = this.safeString(trade, "tid");
        object price = this.safeString(trade, "price");
        object amount = this.safeString(trade, "amount");
        object marketId = this.safeString(trade, "currency_pair");
        market = this.safeMarket(marketId, market);
        return this.safeTrade(new Dictionary<string, object>() {
            { "id", id },
            { "info", trade },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", getValue(market, "symbol") },
            { "order", orderId },
            { "type", null },
            { "side", side },
            { "takerOrMaker", null },
            { "price", price },
            { "amount", amount },
            { "cost", null },
            { "fee", null },
        }, market);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitstamp1#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
        * @param {int|undefined} limit the maximum amount of trades to fetch
        * @param {object} params extra parameters specific to the bitstamp1 api endpoint
        * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(!isEqual(symbol, "BTC/USD")))
        {
            throw new BadSymbol ((string)add(add(add(add(add(this.id, " "), this.version), " fetchTrades doesn\'t support "), symbol), ", use it for BTC/USD only")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "time", "minute" },
        };
        object response = await this.publicGetTransactions(this.extend(request, parameters));
        return this.parseTrades(response, market, since, limit);
    }

    public virtual object parseBalance(object response)
    {
        object result = new Dictionary<string, object>() {
            { "info", response },
        };
        object codes = new List<string>(((Dictionary<string,object>)this.currencies).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(codes)); postFixIncrement(ref i))
        {
            object code = getValue(codes, i);
            object currency = this.currency(code);
            object currencyId = getValue(currency, "id");
            object account = this.account();
            ((Dictionary<string, object>)account)["free"] = this.safeString(response, add(currencyId, "_available"));
            ((Dictionary<string, object>)account)["used"] = this.safeString(response, add(currencyId, "_reserved"));
            ((Dictionary<string, object>)account)["total"] = this.safeString(response, add(currencyId, "_balance"));
            ((Dictionary<string, object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name bitstamp1#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @param {object} params extra parameters specific to the bitstamp1 api endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.privatePostBalance(parameters);
        return this.parseBalance(response);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name bitstamp1#createOrder
        * @description create a trade order
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} params extra parameters specific to the bitstamp1 api endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(!isEqual(type, "limit")))
        {
            throw new ExchangeError ((string)add(add(add(this.id, " "), this.version), " accepts limit orders only")) ;
        }
        if (isTrue(!isEqual(symbol, "BTC/USD")))
        {
            throw new ExchangeError ((string)add(this.id, " v1 supports BTC/USD orders only")) ;
        }
        await this.loadMarkets();
        object method = add("privatePost", this.capitalize(side));
        object request = new Dictionary<string, object>() {
            { "amount", amount },
            { "price", price },
        };
        object response = await this.callAsync(method, this.extend(request, parameters));
        object id = this.safeString(response, "id");
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", response },
            { "id", id },
        });
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name bitstamp1#cancelOrder
        * @description cancels an open order
        * @param {string} id order id
        * @param {string|undefined} symbol unified symbol of the market the order was made in
        * @param {object} params extra parameters specific to the bitstamp1 api endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        return await this.privatePostCancelOrder(new Dictionary<string, object>() {
    { "id", id },
});
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "In Queue", "open" },
            { "Open", "open" },
            { "Finished", "closed" },
            { "Canceled", "canceled" },
        };
        return this.safeString(statuses, status, status);
    }

    public async override Task<object> fetchOrderStatus(object id, object symbol = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "id", id },
        };
        object response = await this.privatePostOrderStatus(this.extend(request, parameters));
        return this.parseOrderStatus(response);
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitstamp1#fetchMyTrades
        * @description fetch all trades made by the user
        * @param {string|undefined} symbol unified market symbol
        * @param {int|undefined} since the earliest time in ms to fetch trades for
        * @param {int|undefined} limit the maximum number of trades structures to retrieve
        * @param {object} params extra parameters specific to the bitstamp1 api endpoint
        * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object response = await this.privatePostUserTransactions(parameters);
        return this.parseTrades(response, market, since, limit);
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = add(add(getValue(getValue(this.urls, "api"), "rest"), "/"), this.implodeParams(path, parameters));
        object query = this.omit(parameters, this.extractParams(path));
        if (isTrue(isEqual(api, "public")))
        {
            if (isTrue(getArrayLength(new List<string>(((Dictionary<string,object>)query).Keys))))
            {
                url = add(url, add("?", this.urlencode(query)));
            }
        } else
        {
            this.checkRequiredCredentials();
            object nonce = ((object)this.nonce()).ToString();
            object auth = add(add(nonce, this.uid), this.apiKey);
            object signature = this.hmac(this.encode(auth), this.encode(this.secret), sha256);
            query = this.extend(new Dictionary<string, object>() {
                { "key", this.apiKey },
                { "signature", ((string)signature).ToUpper() },
                { "nonce", nonce },
            }, query);
            body = this.urlencode(query);
            headers = new Dictionary<string, object>() {
                { "Content-Type", "application/x-www-form-urlencoded" },
            };
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object httpCode, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;
        }
        object status = this.safeString(response, "status");
        if (isTrue(isEqual(status, "error")))
        {
            throw new ExchangeError ((string)add(add(this.id, " "), this.json(response))) ;
        }
        return null;
    }
}
