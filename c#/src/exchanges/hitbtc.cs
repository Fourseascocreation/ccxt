using Main;
namespace Main;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

partial class hitbtc : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "hitbtc" },
            { "name", "HitBTC" },
            { "countries", new List<object>() {"HK"} },
            { "rateLimit", 3.333 },
            { "version", "2" },
            { "pro", true },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelOrder", true },
                { "createDepositAddress", true },
                { "createOrder", true },
                { "createReduceOnlyOrder", false },
                { "editOrder", true },
                { "fetchBalance", true },
                { "fetchBorrowRate", false },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchBorrowRates", false },
                { "fetchBorrowRatesPerSymbol", false },
                { "fetchClosedOrders", true },
                { "fetchCurrencies", true },
                { "fetchDepositAddress", true },
                { "fetchDeposits", false },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchLeverage", false },
                { "fetchLeverageTiers", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", true },
                { "fetchOHLCV", true },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrder", true },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchOrders", false },
                { "fetchOrderTrades", true },
                { "fetchPosition", false },
                { "fetchPositions", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTrades", true },
                { "fetchTradingFee", true },
                { "fetchTradingFees", false },
                { "fetchTransactions", true },
                { "fetchWithdrawals", false },
                { "reduceMargin", false },
                { "setLeverage", false },
                { "setMarginMode", false },
                { "setPositionMode", false },
                { "transfer", true },
                { "withdraw", true },
            } },
            { "timeframes", new Dictionary<string, object>() {
                { "1m", "M1" },
                { "3m", "M3" },
                { "5m", "M5" },
                { "15m", "M15" },
                { "30m", "M30" },
                { "1h", "H1" },
                { "4h", "H4" },
                { "1d", "D1" },
                { "1w", "D7" },
                { "1M", "1M" },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg" },
                { "test", new Dictionary<string, object>() {
                    { "public", "https://api.demo.hitbtc.com" },
                    { "private", "https://api.demo.hitbtc.com" },
                } },
                { "api", new Dictionary<string, object>() {
                    { "public", "https://api.hitbtc.com" },
                    { "private", "https://api.hitbtc.com" },
                } },
                { "www", "https://hitbtc.com" },
                { "referral", "https://hitbtc.com/?ref_id=5a5d39a65d466" },
                { "doc", new List<object>() {"https://api.hitbtc.com/v2"} },
                { "fees", new List<object>() {"https://hitbtc.com/fees-and-limits", "https://support.hitbtc.com/hc/en-us/articles/115005148605-Fees-and-limits"} },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "currency", 3 },
                        { "currency/{currency}", 3 },
                        { "symbol", 3 },
                        { "symbol/{symbol}", 3 },
                        { "ticker", 3 },
                        { "ticker/{symbol}", 3 },
                        { "trades", 3 },
                        { "trades/{symbol}", 3 },
                        { "orderbook", 3 },
                        { "orderbook/{symbol}", 3 },
                        { "candles", 3 },
                        { "candles/{symbol}", 3 },
                    } },
                } },
                { "private", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "trading/balance", 15.0015 },
                        { "order", 15.0015 },
                        { "order/{clientOrderId}", 15.0015 },
                        { "trading/fee/all", 15.0015 },
                        { "trading/fee/{symbol}", 15.0015 },
                        { "margin/account", 15.0015 },
                        { "margin/account/{symbol}", 15.0015 },
                        { "margin/position", 15.0015 },
                        { "margin/position/{symbol}", 15.0015 },
                        { "margin/order", 15.0015 },
                        { "margin/order/{clientOrderId}", 15.0015 },
                        { "history/order", 15.0015 },
                        { "history/trades", 15.0015 },
                        { "history/order/{orderId}/trades", 15.0015 },
                        { "account/balance", 15.0015 },
                        { "account/crypto/address/{currency}", 15.0015 },
                        { "account/crypto/addresses/{currency}", 15.0015 },
                        { "account/crypto/used-addresses/{currency}", 15.0015 },
                        { "account/crypto/estimate-withdraw", 15.0015 },
                        { "account/crypto/is-mine/{address}", 15.0015 },
                        { "account/transactions", 15.0015 },
                        { "account/transactions/{id}", 15.0015 },
                        { "sub-acc", 15.0015 },
                        { "sub-acc/acl", 15.0015 },
                        { "sub-acc/balance/{subAccountUserID}", 15.0015 },
                        { "sub-acc/deposit-address/{subAccountUserId}/{currency}", 15.0015 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "order", 1 },
                        { "margin/order", 1 },
                        { "account/crypto/address/{currency}", 1 },
                        { "account/crypto/withdraw", 1 },
                        { "account/crypto/transfer-convert", 1 },
                        { "account/transfer", 1 },
                        { "account/transfer/internal", 1 },
                        { "sub-acc/freeze", 1 },
                        { "sub-acc/activate", 1 },
                        { "sub-acc/transfer", 1 },
                    } },
                    { "put", new Dictionary<string, object>() {
                        { "order/{clientOrderId}", 1 },
                        { "margin/account/{symbol}", 1 },
                        { "margin/order/{clientOrderId}", 1 },
                        { "account/crypto/withdraw/{id}", 1 },
                        { "sub-acc/acl/{subAccountUserId}", 1 },
                    } },
                    { "delete", new Dictionary<string, object>() {
                        { "order", 1 },
                        { "order/{clientOrderId}", 1 },
                        { "margin/account", 1 },
                        { "margin/account/{symbol}", 1 },
                        { "margin/position", 1 },
                        { "margin/position/{symbol}", 1 },
                        { "margin/order", 1 },
                        { "margin/order/{clientOrderId}", 1 },
                        { "account/crypto/withdraw/{id}", 1 },
                    } },
                    { "patch", new Dictionary<string, object>() {
                        { "order/{clientOrderId}", 1 },
                    } },
                } },
            } },
            { "precisionMode", TICK_SIZE },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "tierBased", false },
                    { "percentage", true },
                    { "maker", this.parseNumber("0.001") },
                    { "taker", this.parseNumber("0.002") },
                } },
            } },
            { "options", new Dictionary<string, object>() {
                { "networks", new Dictionary<string, object>() {
                    { "ETH", "T20" },
                    { "ERC20", "T20" },
                    { "TRX", "TTRX" },
                    { "TRC20", "TTRX" },
                    { "OMNI", "" },
                } },
                { "defaultTimeInForce", "FOK" },
                { "accountsByType", new Dictionary<string, object>() {
                    { "funding", "bank" },
                    { "spot", "exchange" },
                } },
                { "fetchBalanceMethod", new Dictionary<string, object>() {
                    { "account", "account" },
                    { "bank", "account" },
                    { "main", "account" },
                    { "funding", "account" },
                    { "exchange", "trading" },
                    { "spot", "trading" },
                    { "trade", "trading" },
                    { "trading", "trading" },
                } },
            } },
            { "commonCurrencies", new Dictionary<string, object>() {
                { "AUTO", "Cube" },
                { "BCC", "BCC" },
                { "BDP", "BidiPass" },
                { "BET", "DAO.Casino" },
                { "BOX", "BOX Token" },
                { "CPT", "Cryptaur" },
                { "GET", "Themis" },
                { "GMT", "GMT Token" },
                { "HSR", "HC" },
                { "IQ", "IQ.Cash" },
                { "LNC", "LinkerCoin" },
                { "PLA", "PlayChip" },
                { "PNT", "Penta" },
                { "SBTC", "Super Bitcoin" },
                { "STEPN", "GMT" },
                { "STX", "STOX" },
                { "TV", "Tokenville" },
                { "USD", "USDT" },
                { "XMT", "MTL" },
                { "XPNT", "PNT" },
            } },
            { "exceptions", new Dictionary<string, object>() {
                { "504", typeof(RequestTimeout) },
                { "1002", typeof(AuthenticationError) },
                { "1003", typeof(PermissionDenied) },
                { "2010", typeof(InvalidOrder) },
                { "2001", typeof(BadSymbol) },
                { "2011", typeof(InvalidOrder) },
                { "2020", typeof(InvalidOrder) },
                { "20002", typeof(OrderNotFound) },
                { "20001", typeof(InsufficientFunds) },
                { "20010", typeof(BadSymbol) },
                { "20045", typeof(InvalidOrder) },
            } },
        });
    }

    public override object feeToPrecision(object symbol, object fee)
    {
        return this.decimalToPrecision(fee, TRUNCATE, 1e-8, TICK_SIZE);
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#fetchMarkets
        * @description retrieves data on all markets for hitbtc
        * @param {object} params extra parameters specific to the exchange api endpoint
        * @returns {[object]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetSymbol(parameters);
        //
        //     [
        //         {
        //             "id":"BCNBTC",
        //             "baseCurrency":"BCN",
        //             "quoteCurrency":"BTC",
        //             "quantityIncrement":"100",
        //             "tickSize":"0.00000000001",
        //             "takeLiquidityRate":"0.002",
        //             "provideLiquidityRate":"0.001",
        //             "feeCurrency":"BTC"
        //         }
        //     ]
        //
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object market = getValue(response, i);
            object id = this.safeString(market, "id");
            object baseId = this.safeString(market, "baseCurrency");
            object quoteId = this.safeString(market, "quoteCurrency");
            object bs = this.safeCurrencyCode(baseId);
            object quote = this.safeCurrencyCode(quoteId);
            // bequant fix
            object symbol = add(add(bs, "/"), quote);
            if (isTrue(isGreaterThanOrEqual(getIndexOf(id, "_"), 0)))
            {
                symbol = id;
            }
            object lotString = this.safeString(market, "quantityIncrement");
            object stepString = this.safeString(market, "tickSize");
            object lot = this.parseNumber(lotString);
            object step = this.parseNumber(stepString);
            object feeCurrencyId = this.safeString(market, "feeCurrency");
            ((List<object>)result).Add(this.extend(getValue(this.fees, "trading"), new Dictionary<string, object>() {
                { "id", id },
                { "symbol", symbol },
                { "base", bs },
                { "quote", quote },
                { "settle", null },
                { "baseId", baseId },
                { "quoteId", quoteId },
                { "settleId", null },
                { "type", "spot" },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "active", true },
                { "contract", false },
                { "linear", null },
                { "inverse", null },
                { "taker", this.safeNumber(market, "takeLiquidityRate") },
                { "maker", this.safeNumber(market, "provideLiquidityRate") },
                { "contractSize", null },
                { "expiry", null },
                { "expiryDatetime", null },
                { "strike", null },
                { "optionType", null },
                { "feeCurrency", this.safeCurrencyCode(feeCurrencyId) },
                { "precision", new Dictionary<string, object>() {
                    { "amount", lot },
                    { "price", step },
                } },
                { "limits", new Dictionary<string, object>() {
                    { "leverage", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "amount", new Dictionary<string, object>() {
                        { "min", lot },
                        { "max", null },
                    } },
                    { "price", new Dictionary<string, object>() {
                        { "min", step },
                        { "max", null },
                    } },
                    { "cost", new Dictionary<string, object>() {
                        { "min", this.parseNumber(Precise.stringMul(lotString, stepString)) },
                        { "max", null },
                    } },
                } },
                { "info", market },
            }));
        }
        return result;
    }

    public async override Task<object> transfer(object code, object amount, object fromAccount, object toAccount, object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#transfer
        * @description transfer currency internally between wallets on the same account
        * @param {string} code unified currency code
        * @param {float} amount amount to transfer
        * @param {string} fromAccount account to transfer from
        * @param {string} toAccount account to transfer to
        * @param {object} params extra parameters specific to the hitbtc api endpoint
        * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/#/?id=transfer-structure}
        */
        // account can be "exchange" or "bank", with aliases "main" or "trading" respectively
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object requestAmount = this.currencyToPrecision(code, amount);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
            { "amount", requestAmount },
        };
        object type = this.safeString(parameters, "type");
        if (isTrue(isEqual(type, null)))
        {
            object accountsByType = this.safeValue(this.options, "accountsByType", new Dictionary<string, object>() {});
            object fromId = this.safeString(accountsByType, fromAccount, fromAccount);
            object toId = this.safeString(accountsByType, toAccount, toAccount);
            if (isTrue(isEqual(fromId, toId)))
            {
                throw new ExchangeError ((string)add(this.id, " transfer() from and to cannot be the same account")) ;
            }
            type = add(add(fromId, "To"), this.capitalize(toId));
        }
        ((Dictionary<string, object>)request)["type"] = type;
        object response = await this.privatePostAccountTransfer(this.extend(request, parameters));
        //
        //     {
        //         'id': '2db6ebab-fb26-4537-9ef8-1a689472d236'
        //     }
        //
        return this.parseTransfer(response, currency);
    }

    public override object parseTransfer(object transfer, object currency = null)
    {
        //
        //     {
        //         'id': '2db6ebab-fb26-4537-9ef8-1a689472d236'
        //     }
        //
        object timestamp = this.milliseconds();
        return new Dictionary<string, object>() {
            { "id", this.safeString(transfer, "id") },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "currency", this.safeCurrencyCode(null, currency) },
            { "amount", null },
            { "fromAccount", null },
            { "toAccount", null },
            { "status", null },
            { "info", transfer },
        };
    }

    public async override Task<object> fetchCurrencies(object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#fetchCurrencies
        * @description fetches all available currencies on an exchange
        * @param {object} params extra parameters specific to the hitbtc api endpoint
        * @returns {object} an associative dictionary of currencies
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetCurrency(parameters);
        //
        //     [
        //         {
        //             "id":"XPNT",
        //             "fullName":"pToken",
        //             "crypto":true,
        //             "payinEnabled":true,
        //             "payinPaymentId":false,
        //             "payinConfirmations":9,
        //             "payoutEnabled":true,
        //             "payoutIsPaymentId":false,
        //             "transferEnabled":true,
        //             "delisted":false,
        //             "payoutFee":"26.510000000000",
        //             "precisionPayout":18,
        //             "precisionTransfer":8
        //         }
        //     ]
        //
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object currency = getValue(response, i);
            object id = this.safeString(currency, "id");
            // todo: will need to rethink the fees
            // to add support for multiple withdrawal/deposit methods and
            // differentiated fees for each particular method
            object precision = this.safeString(currency, "precisionTransfer", "8");
            object code = this.safeCurrencyCode(id);
            object payin = this.safeValue(currency, "payinEnabled");
            object payout = this.safeValue(currency, "payoutEnabled");
            object transfer = this.safeValue(currency, "transferEnabled");
            object active = isTrue(isTrue(payin) && isTrue(payout)) && isTrue(transfer);
            if (isTrue(((Dictionary<string,object>)currency).ContainsKey(toStringOrNull("disabled"))))
            {
                if (isTrue(getValue(currency, "disabled")))
                {
                    active = false;
                }
            }
            object type = "fiat";
            if (isTrue(isTrue((((Dictionary<string,object>)currency).ContainsKey(toStringOrNull("crypto")))) && isTrue(getValue(currency, "crypto"))))
            {
                type = "crypto";
            }
            object name = this.safeString(currency, "fullName");
            ((Dictionary<string, object>)result)[(string)code] = new Dictionary<string, object>() {
                { "id", id },
                { "code", code },
                { "type", type },
                { "payin", payin },
                { "payout", payout },
                { "transfer", transfer },
                { "info", currency },
                { "name", name },
                { "active", active },
                { "deposit", payin },
                { "withdraw", payout },
                { "fee", this.safeNumber(currency, "payoutFee") },
                { "precision", this.parseNumber(this.parsePrecision(precision)) },
                { "limits", new Dictionary<string, object>() {
                    { "amount", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "withdraw", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                } },
            };
        }
        return result;
    }

    public virtual object parseTradingFee(object fee, object market = null)
    {
        //
        //
        //     {
        //         takeLiquidityRate: '0.001',
        //         provideLiquidityRate: '-0.0001'
        //     }
        //
        return new Dictionary<string, object>() {
            { "info", fee },
            { "symbol", this.safeSymbol(null, market) },
            { "maker", this.safeNumber(fee, "provideLiquidityRate") },
            { "taker", this.safeNumber(fee, "takeLiquidityRate") },
            { "percentage", true },
            { "tierBased", true },
        };
    }

    public async override Task<object> fetchTradingFee(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#fetchTradingFee
        * @description fetch the trading fees for a market
        * @param {string} symbol unified market symbol
        * @param {object} params extra parameters specific to the hitbtc api endpoint
        * @returns {object} a [fee structure]{@link https://docs.ccxt.com/#/?id=fee-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = await this.privateGetTradingFeeSymbol(request);
        //
        //     {
        //         takeLiquidityRate: '0.001',
        //         provideLiquidityRate: '-0.0001'
        //     }
        //
        return this.parseTradingFee(response, market);
    }

    public virtual object parseBalance(object response)
    {
        object result = new Dictionary<string, object>() {
            { "info", response },
            { "timestamp", null },
            { "datetime", null },
        };
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object balance = getValue(response, i);
            object currencyId = this.safeString(balance, "currency");
            object code = this.safeCurrencyCode(currencyId);
            object account = this.account();
            ((Dictionary<string, object>)account)["free"] = this.safeString(balance, "available");
            ((Dictionary<string, object>)account)["used"] = this.safeString(balance, "reserved");
            ((Dictionary<string, object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @param {object} params extra parameters specific to the hitbtc api endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object type = this.safeString(parameters, "type", "trading");
        object fetchBalanceAccounts = this.safeValue(this.options, "fetchBalanceMethod", new Dictionary<string, object>() {});
        object typeId = this.safeString(fetchBalanceAccounts, type);
        if (isTrue(isEqual(typeId, null)))
        {
            throw new ExchangeError ((string)add(this.id, " fetchBalance() account type must be either main or trading")) ;
        }
        object method = add(add("privateGet", this.capitalize(typeId)), "Balance");
        object query = this.omit(parameters, "type");
        object response = await this.callAsync(method, query);
        //
        //     [
        //         {"currency":"SPI","available":"0","reserved":"0"},
        //         {"currency":"GRPH","available":"0","reserved":"0"},
        //         {"currency":"DGTX","available":"0","reserved":"0"},
        //     ]
        //
        return this.parseBalance(response);
    }

    public override object parseOHLCV(object ohlcv, object market = null)
    {
        //
        //     {
        //         "timestamp":"2015-08-20T19:01:00.000Z",
        //         "open":"0.006",
        //         "close":"0.006",
        //         "min":"0.006",
        //         "max":"0.006",
        //         "volume":"0.003",
        //         "volumeQuote":"0.000018"
        //     }
        //
        return new List<object> {this.parse8601(this.safeString(ohlcv, "timestamp")), this.safeNumber(ohlcv, "open"), this.safeNumber(ohlcv, "max"), this.safeNumber(ohlcv, "min"), this.safeNumber(ohlcv, "close"), this.safeNumber(ohlcv, "volume")};
    }

    public async override Task<object> fetchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#fetchOHLCV
        * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe the length of time each candle represents
        * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
        * @param {int|undefined} limit the maximum amount of candles to fetch
        * @param {object} params extra parameters specific to the hitbtc api endpoint
        * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "period", this.safeString(this.timeframes, timeframe, timeframe) },
        };
        if (isTrue(!isEqual(since, null)))
        {
            ((Dictionary<string, object>)request)["from"] = this.iso8601(since);
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((Dictionary<string, object>)request)["limit"] = limit;
        }
        object response = await this.publicGetCandlesSymbol(this.extend(request, parameters));
        //
        //     [
        //         {"timestamp":"2015-08-20T19:01:00.000Z","open":"0.006","close":"0.006","min":"0.006","max":"0.006","volume":"0.003","volumeQuote":"0.000018"},
        //         {"timestamp":"2015-08-20T19:03:00.000Z","open":"0.006","close":"0.006","min":"0.006","max":"0.006","volume":"0.013","volumeQuote":"0.000078"},
        //         {"timestamp":"2015-08-20T19:06:00.000Z","open":"0.0055","close":"0.005","min":"0.005","max":"0.0055","volume":"0.003","volumeQuote":"0.0000155"},
        //     ]
        //
        return this.parseOHLCVs(response, market, timeframe, since, limit);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int|undefined} limit the maximum amount of order book entries to return
        * @param {object} params extra parameters specific to the hitbtc api endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((Dictionary<string, object>)request)["limit"] = limit; // default = 100, 0 = unlimited
        }
        object response = await this.publicGetOrderbookSymbol(this.extend(request, parameters));
        return this.parseOrderBook(response, getValue(market, "symbol"), null, "bid", "ask", "price", "size");
    }

    public override object parseTicker(object ticker, object market = null)
    {
        object timestamp = this.parse8601(getValue(ticker, "timestamp"));
        object symbol = this.safeSymbol(null, market);
        object baseVolume = this.safeString(ticker, "volume");
        object quoteVolume = this.safeString(ticker, "volumeQuote");
        object open = this.safeString(ticker, "open");
        object last = this.safeString(ticker, "last");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "high") },
            { "low", this.safeString(ticker, "low") },
            { "bid", this.safeString(ticker, "bid") },
            { "bidVolume", null },
            { "ask", this.safeString(ticker, "ask") },
            { "askVolume", null },
            { "vwap", null },
            { "open", open },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", null },
            { "average", null },
            { "baseVolume", baseVolume },
            { "quoteVolume", quoteVolume },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#fetchTickers
        * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
        * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} params extra parameters specific to the hitbtc api endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object response = await this.publicGetTicker(parameters);
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object ticker = getValue(response, i);
            object marketId = this.safeString(ticker, "symbol");
            object market = this.safeMarket(marketId);
            object symbol = getValue(market, "symbol");
            ((Dictionary<string, object>)result)[(string)symbol] = this.parseTicker(ticker, market);
        }
        return this.filterByArray(result, "symbol", symbols);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} params extra parameters specific to the hitbtc api endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = await this.publicGetTickerSymbol(this.extend(request, parameters));
        if (isTrue(((Dictionary<string,object>)response).ContainsKey(toStringOrNull("message"))))
        {
            throw new ExchangeError ((string)add(add(this.id, " "), getValue(response, "message"))) ;
        }
        return this.parseTicker(response, market);
    }

    public override object parseTrade(object trade, object market = null)
    {
        // createMarketOrder
        //
        //  {       fee: "0.0004644",
        //           id:  386394956,
        //        price: "0.4644",
        //     quantity: "1",
        //    timestamp: "2018-10-25T16:41:44.780Z" }
        //
        // fetchTrades
        //
        // { id: 974786185,
        //   price: '0.032462',
        //   quantity: '0.3673',
        //   side: 'buy',
        //   timestamp: '2020-10-16T12:57:39.846Z' }
        //
        // fetchMyTrades
        //
        // { id: 277210397,
        //   clientOrderId: '6e102f3e7f3f4e04aeeb1cdc95592f1a',
        //   orderId: 28102855393,
        //   symbol: 'ETHBTC',
        //   side: 'sell',
        //   quantity: '0.002',
        //   price: '0.073365',
        //   fee: '0.000000147',
        //   timestamp: '2018-04-28T18:39:55.345Z' }
        //
        //  {
        //      "id":1568938909,
        //      "orderId":793293348428,
        //      "clientOrderId":"fbc5c5b753e8476cb14697458cb928ef",
        //      "symbol":"DOGEUSD",
        //      "side":"sell",
        //      "quantity":"100",
        //      "price":"0.03904191",
        //      "fee":"0.009760477500",
        //      "timestamp":"2022-01-25T15:15:41.353Z",
        //      "taker":true
        //  }
        //
        object timestamp = this.parse8601(getValue(trade, "timestamp"));
        object marketId = this.safeString(trade, "symbol");
        market = this.safeMarket(marketId, market);
        object symbol = getValue(market, "symbol");
        object fee = null;
        object feeCostString = this.safeString(trade, "fee");
        if (isTrue(!isEqual(feeCostString, null)))
        {
            object feeCurrencyCode = ((bool) isTrue(market)) ? getValue(market, "feeCurrency") : null;
            fee = new Dictionary<string, object>() {
                { "cost", feeCostString },
                { "currency", feeCurrencyCode },
            };
        }
        // we use clientOrderId as the order id with this exchange intentionally
        // because most of their endpoints will require clientOrderId
        // explained here: https://github.com/ccxt/ccxt/issues/5674
        object orderId = this.safeString(trade, "clientOrderId");
        object priceString = this.safeString(trade, "price");
        object amountString = this.safeString(trade, "quantity");
        object side = this.safeString(trade, "side");
        object id = this.safeString(trade, "id");
        return this.safeTrade(new Dictionary<string, object>() {
            { "info", trade },
            { "id", id },
            { "order", orderId },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", symbol },
            { "type", null },
            { "side", side },
            { "takerOrMaker", null },
            { "price", priceString },
            { "amount", amountString },
            { "cost", null },
            { "fee", fee },
        }, market);
    }

    public async override Task<object> fetchTransactions(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#fetchTransactions
        * @description fetch history of deposits and withdrawals
        * @see https://api.hitbtc.com/v2#get-transactions-history
        * @param {string|undefined} code unified currency code for the currency of the transactions, default is undefined
        * @param {int|undefined} since timestamp in ms of the earliest transaction, default is undefined
        * @param {int|undefined} limit max number of transactions to return, default is undefined
        * @param {object} params extra parameters specific to the hitbtc api endpoint
        * @returns {object} a list of [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = null;
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
            ((Dictionary<string, object>)request)["asset"] = getValue(currency, "id");
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((Dictionary<string, object>)request)["startTime"] = since;
        }
        object response = await this.privateGetAccountTransactions(this.extend(request, parameters));
        return this.parseTransactions(response, currency, since, limit);
    }

    public override object parseTransaction(object transaction, object currency = null)
    {
        //
        // transactions
        //
        //     {
        //         id: 'd53ee9df-89bf-4d09-886e-849f8be64647',
        //         index: 1044718371,
        //         type: 'payout', // payout, payin
        //         status: 'success',
        //         currency: 'ETH',
        //         amount: '4.522683200000000000000000',
        //         createdAt: '2018-06-07T00:43:32.426Z',
        //         updatedAt: '2018-06-07T00:45:36.447Z',
        //         hash: '0x973e5683dfdf80a1fb1e0b96e19085b6489221d2ddf864daa46903c5ec283a0f',
        //         address: '0xC5a59b21948C1d230c8C54f05590000Eb3e1252c',
        //         fee: '0.00958',
        //     },
        //     {
        //         id: 'e6c63331-467e-4922-9edc-019e75d20ba3',
        //         index: 1044714672,
        //         type: 'exchangeToBank', // exchangeToBank, bankToExchange, withdraw
        //         status: 'success',
        //         currency: 'ETH',
        //         amount: '4.532263200000000000',
        //         createdAt: '2018-06-07T00:42:39.543Z',
        //         updatedAt: '2018-06-07T00:42:39.683Z',
        //     },
        //
        // withdraw
        //
        //     {
        //         "id": "d2ce578f-647d-4fa0-b1aa-4a27e5ee597b"
        //     }
        //
        object id = this.safeString(transaction, "id");
        object timestamp = this.parse8601(this.safeString(transaction, "createdAt"));
        object updated = this.parse8601(this.safeString(transaction, "updatedAt"));
        object currencyId = this.safeString(transaction, "currency");
        object code = this.safeCurrencyCode(currencyId, currency);
        object status = this.parseTransactionStatus(this.safeString(transaction, "status"));
        object amount = this.safeNumber(transaction, "amount");
        object address = this.safeString(transaction, "address");
        object txid = this.safeString(transaction, "hash");
        object fee = new Dictionary<string, object>() {
            { "currency", null },
            { "cost", null },
            { "rate", null },
        };
        object feeCost = this.safeNumber(transaction, "fee");
        if (isTrue(!isEqual(feeCost, null)))
        {
            ((Dictionary<string, object>)fee)["cost"] = feeCost;
            ((Dictionary<string, object>)fee)["currency"] = code;
        }
        object type = this.parseTransactionType(this.safeString(transaction, "type"));
        return new Dictionary<string, object>() {
            { "info", transaction },
            { "id", id },
            { "txid", txid },
            { "type", type },
            { "currency", code },
            { "network", null },
            { "amount", amount },
            { "status", status },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "address", address },
            { "addressFrom", null },
            { "addressTo", null },
            { "tag", null },
            { "tagFrom", null },
            { "tagTo", null },
            { "updated", updated },
            { "comment", null },
            { "fee", fee },
        };
    }

    public virtual object parseTransactionStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "pending", "pending" },
            { "failed", "failed" },
            { "success", "ok" },
        };
        return this.safeString(statuses, status, status);
    }

    public virtual object parseTransactionType(object type)
    {
        object types = new Dictionary<string, object>() {
            { "payin", "deposit" },
            { "payout", "withdrawal" },
            { "withdraw", "withdrawal" },
        };
        return this.safeString(types, type, type);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
        * @param {int|undefined} limit the maximum amount of trades to fetch
        * @param {object} params extra parameters specific to the hitbtc api endpoint
        * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((Dictionary<string, object>)request)["limit"] = limit;
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((Dictionary<string, object>)request)["sort"] = "ASC";
            ((Dictionary<string, object>)request)["from"] = this.iso8601(since);
        }
        object response = await this.publicGetTradesSymbol(this.extend(request, parameters));
        return this.parseTrades(response, market, since, limit);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#createOrder
        * @description create a trade order
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} params extra parameters specific to the hitbtc api endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        // we use clientOrderId as the order id with this exchange intentionally
        // because most of their endpoints will require clientOrderId
        // explained here: https://github.com/ccxt/ccxt/issues/5674
        // their max accepted length is 32 characters
        object uuid = this.uuid();
        object parts = ((string)uuid).Split((string)"-").ToList<object>();
        object clientOrderId = String.Join("", parts);
        clientOrderId = ((string)clientOrderId).Substring((int)0, (int)32);
        amount = parseFloat(amount);
        object request = new Dictionary<string, object>() {
            { "clientOrderId", clientOrderId },
            { "symbol", getValue(market, "id") },
            { "side", side },
            { "quantity", this.amountToPrecision(symbol, amount) },
            { "type", type },
        };
        if (isTrue(isEqual(type, "limit")))
        {
            ((Dictionary<string, object>)request)["price"] = this.priceToPrecision(symbol, price);
        } else
        {
            ((Dictionary<string, object>)request)["timeInForce"] = getValue(this.options, "defaultTimeInForce");
        }
        object response = await this.privatePostOrder(this.extend(request, parameters));
        object order = this.parseOrder(response);
        if (isTrue(isEqual(getValue(order, "status"), "rejected")))
        {
            throw new InvalidOrder ((string)add(add(this.id, " order was rejected by the exchange "), this.json(order))) ;
        }
        return order;
    }

    public async override Task<object> editOrder(object id, object symbol, object type, object side, object amount = null, object price = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        // we use clientOrderId as the order id with this exchange intentionally
        // because most of their endpoints will require clientOrderId
        // explained here: https://github.com/ccxt/ccxt/issues/5674
        // their max accepted length is 32 characters
        object uuid = this.uuid();
        object parts = ((string)uuid).Split((string)"-").ToList<object>();
        object requestClientId = String.Join("", parts);
        requestClientId = ((string)requestClientId).Substring((int)0, (int)32);
        object request = new Dictionary<string, object>() {
            { "clientOrderId", id },
            { "requestClientId", requestClientId },
        };
        if (isTrue(!isEqual(amount, null)))
        {
            ((Dictionary<string, object>)request)["quantity"] = this.amountToPrecision(symbol, amount);
        }
        if (isTrue(!isEqual(price, null)))
        {
            ((Dictionary<string, object>)request)["price"] = this.priceToPrecision(symbol, price);
        }
        object response = await this.privatePatchOrderClientOrderId(this.extend(request, parameters));
        return this.parseOrder(response);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#cancelOrder
        * @description cancels an open order
        * @param {string} id order id
        * @param {string|undefined} symbol unified symbol of the market the order was made in
        * @param {object} params extra parameters specific to the hitbtc api endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        // we use clientOrderId as the order id with this exchange intentionally
        // because most of their endpoints will require clientOrderId
        // explained here: https://github.com/ccxt/ccxt/issues/5674
        object request = new Dictionary<string, object>() {
            { "clientOrderId", id },
        };
        object response = await this.privateDeleteOrderClientOrderId(this.extend(request, parameters));
        return this.parseOrder(response);
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "new", "open" },
            { "suspended", "open" },
            { "partiallyFilled", "open" },
            { "filled", "closed" },
            { "canceled", "canceled" },
            { "expired", "failed" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // createMarketOrder
        //
        //     {
        //         clientOrderId: "fe36aa5e190149bf9985fb673bbb2ea0",
        //         createdAt: "2018-10-25T16:41:44.780Z",
        //         cumQuantity: "1",
        //         id: "66799540063",
        //         quantity: "1",
        //         side: "sell",
        //         status: "filled",
        //         symbol: "XRPUSDT",
        //         timeInForce: "FOK",
        //         tradesReport: [
        //             {
        //                 fee: "0.0004644",
        //                 id:  386394956,
        //                 price: "0.4644",
        //                 quantity: "1",
        //                 timestamp: "2018-10-25T16:41:44.780Z"
        //             }
        //         ],
        //         type: "market",
        //         updatedAt: "2018-10-25T16:41:44.780Z"
        //     }
        //
        //     {
        //         "id": 119499457455,
        //         "clientOrderId": "87baab109d58401b9202fa0749cb8288",
        //         "symbol": "ETHUSD",
        //         "side": "buy",
        //         "status": "filled",
        //         "type": "market",
        //         "timeInForce": "FOK",
        //         "quantity": "0.0007",
        //         "price": "181.487",
        //         "avgPrice": "164.989",
        //         "cumQuantity": "0.0007",
        //         "createdAt": "2019-04-17T13:27:38.062Z",
        //         "updatedAt": "2019-04-17T13:27:38.062Z"
        //     }
        //
        object created = this.parse8601(this.safeString(order, "createdAt"));
        object updated = this.parse8601(this.safeString(order, "updatedAt"));
        object marketId = this.safeString(order, "symbol");
        market = this.safeMarket(marketId, market);
        object symbol = getValue(market, "symbol");
        object amount = this.safeString(order, "quantity");
        object filled = this.safeString(order, "cumQuantity");
        object status = this.parseOrderStatus(this.safeString(order, "status"));
        // we use clientOrderId as the order id with this exchange intentionally
        // because most of their endpoints will require clientOrderId
        // explained here: https://github.com/ccxt/ccxt/issues/5674
        object id = this.safeString(order, "clientOrderId");
        object clientOrderId = id;
        object price = this.safeString(order, "price");
        object type = this.safeString(order, "type");
        object side = this.safeString(order, "side");
        object trades = this.safeValue(order, "tradesReport");
        object fee = null;
        object average = this.safeString(order, "avgPrice");
        object timeInForce = this.safeString(order, "timeInForce");
        return this.safeOrder(new Dictionary<string, object>() {
            { "id", id },
            { "clientOrderId", clientOrderId },
            { "timestamp", created },
            { "datetime", this.iso8601(created) },
            { "lastTradeTimestamp", updated },
            { "status", status },
            { "symbol", symbol },
            { "type", type },
            { "timeInForce", timeInForce },
            { "side", side },
            { "price", price },
            { "stopPrice", null },
            { "triggerPrice", null },
            { "average", average },
            { "amount", amount },
            { "cost", null },
            { "filled", filled },
            { "remaining", null },
            { "fee", fee },
            { "trades", trades },
            { "info", order },
        }, market);
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#fetchOrder
        * @description fetches information on an order made by the user
        * @param {string|undefined} symbol not used by hitbtc fetchOrder
        * @param {object} params extra parameters specific to the hitbtc api endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        // we use clientOrderId as the order id with this exchange intentionally
        // because most of their endpoints will require clientOrderId
        // explained here: https://github.com/ccxt/ccxt/issues/5674
        object request = new Dictionary<string, object>() {
            { "clientOrderId", id },
        };
        object response = await this.privateGetHistoryOrder(this.extend(request, parameters));
        object numOrders = getArrayLength(response);
        if (isTrue(isGreaterThan(numOrders, 0)))
        {
            return this.parseOrder(getValue(response, 0));
        }
        throw new OrderNotFound ((string)add(add(add(this.id, " order "), id), " not found")) ;
    }

    public async virtual Task<object> fetchOpenOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#fetchOpenOrder
        * @description fetch an open order by it's id
        * @param {string} id order id
        * @param {string|undefined} symbol not used by hitbtc fetchOpenOrder ()
        * @param {object} params extra parameters specific to the hitbtc api endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        // we use clientOrderId as the order id with this exchange intentionally
        // because most of their endpoints will require clientOrderId
        // explained here: https://github.com/ccxt/ccxt/issues/5674
        object request = new Dictionary<string, object>() {
            { "clientOrderId", id },
        };
        object response = await this.privateGetOrderClientOrderId(this.extend(request, parameters));
        return this.parseOrder(response);
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @param {string|undefined} symbol unified market symbol
        * @param {int|undefined} since the earliest time in ms to fetch open orders for
        * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
        * @param {object} params extra parameters specific to the hitbtc api endpoint
        * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((Dictionary<string, object>)request)["symbol"] = getValue(market, "id");
        }
        object response = await this.privateGetOrder(this.extend(request, parameters));
        return this.parseOrders(response, market, since, limit);
    }

    public async override Task<object> fetchClosedOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#fetchClosedOrders
        * @description fetches information on multiple closed orders made by the user
        * @param {string|undefined} symbol unified market symbol of the market orders were made in
        * @param {int|undefined} since the earliest time in ms to fetch orders for
        * @param {int|undefined} limit the maximum number of  orde structures to retrieve
        * @param {object} params extra parameters specific to the hitbtc api endpoint
        * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((Dictionary<string, object>)request)["symbol"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((Dictionary<string, object>)request)["limit"] = limit;
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((Dictionary<string, object>)request)["from"] = this.iso8601(since);
        }
        object response = await this.privateGetHistoryOrder(this.extend(request, parameters));
        object parsedOrders = this.parseOrders(response, market);
        object orders = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(parsedOrders)); postFixIncrement(ref i))
        {
            object order = getValue(parsedOrders, i);
            object status = getValue(order, "status");
            if (isTrue(isTrue((isEqual(status, "closed"))) || isTrue((isEqual(status, "canceled")))))
            {
                ((List<object>)orders).Add(order);
            }
        }
        return ((object)this.filterBySinceLimit(orders, since, limit));
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#fetchMyTrades
        * @description fetch all trades made by the user
        * @param {string|undefined} symbol unified market symbol
        * @param {int|undefined} since the earliest time in ms to fetch trades for
        * @param {int|undefined} limit the maximum number of trades structures to retrieve
        * @param {object} params extra parameters specific to the hitbtc api endpoint
        * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((Dictionary<string, object>)request)["symbol"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((Dictionary<string, object>)request)["from"] = this.iso8601(since);
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((Dictionary<string, object>)request)["limit"] = limit;
        }
        object response = await this.privateGetHistoryTrades(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "id": 9535486,
        //             "clientOrderId": "f8dbaab336d44d5ba3ff578098a68454",
        //             "orderId": 816088377,
        //             "symbol": "ETHBTC",
        //             "side": "sell",
        //             "quantity": "0.061",
        //             "price": "0.045487",
        //             "fee": "0.000002775",
        //             "timestamp": "2017-05-17T12:32:57.848Z"
        //         },
        //         {
        //             "id": 9535437,
        //             "clientOrderId": "27b9bfc068b44194b1f453c7af511ed6",
        //             "orderId": 816088021,
        //             "symbol": "ETHBTC",
        //             "side": "buy",
        //             "quantity": "0.038",
        //             "price": "0.046000",
        //             "fee": "-0.000000174",
        //             "timestamp": "2017-05-17T12:30:57.848Z"
        //         }
        //     ]
        //
        return this.parseTrades(response, market, since, limit);
    }

    public async override Task<object> fetchOrderTrades(object id, object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#fetchOrderTrades
        * @description fetch all the trades made from a single order
        * @param {string} id order id
        * @param {string|undefined} symbol unified market symbol
        * @param {int|undefined} since the earliest time in ms to fetch trades for
        * @param {int|undefined} limit the maximum number of trades to retrieve
        * @param {object} params extra parameters specific to the hitbtc api endpoint
        * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        // The id needed here is the exchange's id, and not the clientOrderID,
        // which is the id that is stored in the unified order id
        // To get the exchange's id you need to grab it from order['info']['id']
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object request = new Dictionary<string, object>() {
            { "orderId", id },
        };
        object response = await this.privateGetHistoryOrderOrderIdTrades(this.extend(request, parameters));
        object numOrders = getArrayLength(response);
        if (isTrue(isGreaterThan(numOrders, 0)))
        {
            return this.parseTrades(response, market, since, limit);
        }
        throw new OrderNotFound ((string)add(add(add(add(add(this.id, " order "), id), " not found, "), this.id), ".fetchOrderTrades() requires an exchange-specific order id, you need to grab it from order[\"info\"][\"id\"]")) ;
    }

    public async override Task<object> createDepositAddress(object code, object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#createDepositAddress
        * @description create a currency deposit address
        * @param {string} code unified currency code of the currency for the deposit address
        * @param {object} params extra parameters specific to the hitbtc api endpoint
        * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
        };
        object response = await this.privatePostAccountCryptoAddressCurrency(this.extend(request, parameters));
        object address = this.safeString(response, "address");
        this.checkAddress(address);
        object tag = this.safeString(response, "paymentId");
        return new Dictionary<string, object>() {
            { "currency", currency },
            { "address", address },
            { "tag", tag },
            { "info", response },
        };
    }

    public async override Task<object> fetchDepositAddress(object code, object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#fetchDepositAddress
        * @description fetch the deposit address for a currency associated with this account
        * @param {string} code unified currency code
        * @param {object} params extra parameters specific to the hitbtc api endpoint
        * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
        };
        object network = this.safeString(parameters, "network");
        if (isTrue(!isEqual(network, null)))
        {
            parameters = this.omit(parameters, "network");
            object networks = this.safeValue(this.options, "networks");
            object endpart = this.safeString(networks, network, network);
            ((Dictionary<string, object>)request)["currency"] = add(((Dictionary<string, object>)request)["currency"], endpart);
        }
        object response = await this.privateGetAccountCryptoAddressCurrency(this.extend(request, parameters));
        object address = this.safeString(response, "address");
        this.checkAddress(address);
        object tag = this.safeString(response, "paymentId");
        return new Dictionary<string, object>() {
            { "currency", getValue(currency, "code") },
            { "address", address },
            { "tag", tag },
            { "network", null },
            { "info", response },
        };
    }

    public async virtual Task<object> convertCurrencyNetwork(object code, object amount, object fromNetwork, object toNetwork, object parameters)
    {
        await this.loadMarkets();
        object currency = this.currency(code);
        object networks = this.safeValue(this.options, "networks", new Dictionary<string, object>() {});
        fromNetwork = this.safeString(networks, fromNetwork, fromNetwork); // handle ETH>ERC20 alias
        toNetwork = this.safeString(networks, toNetwork, toNetwork); // handle ETH>ERC20 alias
        if (isTrue(isEqual(fromNetwork, toNetwork)))
        {
            throw new ExchangeError ((string)add(this.id, " convertCurrencyNetwork() fromNetwork cannot be the same as toNetwork")) ;
        }
        object request = new Dictionary<string, object>() {
            { "fromCurrency", add(getValue(currency, "id"), fromNetwork) },
            { "toCurrency", add(getValue(currency, "id"), toNetwork) },
            { "amount", parseFloat(this.currencyToPrecision(code, amount)) },
        };
        object response = await this.privatePostAccountCryptoTransferConvert(this.extend(request, parameters));
        return new Dictionary<string, object>() {
            { "info", response },
        };
    }

    public async override Task<object> withdraw(object code, object amount, object address, object tag = null, object parameters = null)
    {
        /**
        * @method
        * @name hitbtc#withdraw
        * @description make a withdrawal
        * @param {string} code unified currency code
        * @param {float} amount the amount to withdraw
        * @param {string} address the address to withdraw to
        * @param {string|undefined} tag
        * @param {object} params extra parameters specific to the hitbtc api endpoint
        * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        var tagparametersVariable = this.handleWithdrawTagAndParams(tag, parameters);
        tag = ((List<object>)tagparametersVariable)[0];
        parameters = ((List<object>)tagparametersVariable)[1];
        await this.loadMarkets();
        this.checkAddress(address);
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
            { "amount", parseFloat(amount) },
            { "address", address },
        };
        if (isTrue(tag))
        {
            ((Dictionary<string, object>)request)["paymentId"] = tag;
        }
        object networks = this.safeValue(this.options, "networks", new Dictionary<string, object>() {});
        object network = this.safeStringUpper(parameters, "network"); // this line allows the user to specify either ERC20 or ETH
        network = this.safeString(networks, network, network); // handle ERC20>ETH alias
        if (isTrue(!isEqual(network, null)))
        {
            ((Dictionary<string, object>)request)["currency"] = add(((Dictionary<string, object>)request)["currency"], network); // when network the currency need to be changed to currency + network
            parameters = this.omit(parameters, "network");
        }
        object response = await this.privatePostAccountCryptoWithdraw(this.extend(request, parameters));
        //
        //     {
        //         "id": "d2ce578f-647d-4fa0-b1aa-4a27e5ee597b"
        //     }
        //
        return this.parseTransaction(response, currency);
    }

    public override object nonce()
    {
        return this.milliseconds();
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = add(add("/api/", this.version), "/");
        object query = this.omit(parameters, this.extractParams(path));
        if (isTrue(isEqual(api, "public")))
        {
            url = add(url, add(add(api, "/"), this.implodeParams(path, parameters)));
            if (isTrue(getArrayLength(new List<string>(((Dictionary<string,object>)query).Keys))))
            {
                url = add(url, add("?", this.urlencode(query)));
            }
        } else
        {
            this.checkRequiredCredentials();
            url = add(url, this.implodeParams(path, parameters));
            if (isTrue(isEqual(method, "GET")))
            {
                if (isTrue(getArrayLength(new List<string>(((Dictionary<string,object>)query).Keys))))
                {
                    url = add(url, add("?", this.urlencode(query)));
                }
            } else if (isTrue(getArrayLength(new List<string>(((Dictionary<string,object>)query).Keys))))
            {
                body = this.json(query);
            }
            object payload = add(add(this.apiKey, ":"), this.secret);
            object auth = this.stringToBase64(payload);
            headers = new Dictionary<string, object>() {
                { "Authorization", add("Basic ", auth) },
                { "Content-Type", "application/json" },
            };
        }
        url = add(getValue(getValue(this.urls, "api"), api), url);
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object code, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;
        }
        if (isTrue(isGreaterThanOrEqual(code, 400)))
        {
            object feedback = add(add(this.id, " "), body);
            // {"code":504,"message":"Gateway Timeout","description":""}
            if (isTrue(isTrue((isEqual(code, 503))) || isTrue((isEqual(code, 504)))))
            {
                throw new ExchangeNotAvailable ((string)feedback) ;
            }
            // fallback to default error handler on rate limit errors
            // {"code":429,"message":"Too many requests","description":"Too many requests"}
            if (isTrue(isEqual(code, 429)))
            {
                return null;
            }
            // {"error":{"code":20002,"message":"Order not found","description":""}}
            if (isTrue(isEqual(getValue(body, 0), "{")))
            {
                if (isTrue(((Dictionary<string,object>)response).ContainsKey(toStringOrNull("error"))))
                {
                    object errorCode = this.safeString(getValue(response, "error"), "code");
                    this.throwExactlyMatchedException(this.exceptions, errorCode, feedback);
                    object message = this.safeString(getValue(response, "error"), "message");
                    if (isTrue(isEqual(message, "Duplicate clientOrderId")))
                    {
                        throw new InvalidOrder ((string)feedback) ;
                    }
                }
            }
            throw new ExchangeError ((string)feedback) ;
        }
        return null;
    }
}
