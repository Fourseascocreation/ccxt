using Main;
namespace Main;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

partial class lbank : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "lbank" },
            { "name", "LBank" },
            { "countries", new List<object>() {"CN"} },
            { "version", "v1" },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelOrder", true },
                { "createOrder", true },
                { "createReduceOnlyOrder", false },
                { "createStopLimitOrder", false },
                { "createStopMarketOrder", false },
                { "createStopOrder", false },
                { "fetchBalance", true },
                { "fetchBorrowRate", false },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchBorrowRates", false },
                { "fetchBorrowRatesPerSymbol", false },
                { "fetchClosedOrders", true },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchLeverage", false },
                { "fetchLeverageTiers", false },
                { "fetchMarginMode", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchOHLCV", true },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", false },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchOrders", true },
                { "fetchPosition", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTrades", true },
                { "fetchTradingFee", false },
                { "fetchTradingFees", false },
                { "reduceMargin", false },
                { "setLeverage", false },
                { "setMarginMode", false },
                { "setPositionMode", false },
                { "withdraw", true },
            } },
            { "timeframes", new Dictionary<string, object>() {
                { "1m", "minute1" },
                { "5m", "minute5" },
                { "15m", "minute15" },
                { "30m", "minute30" },
                { "1h", "hour1" },
                { "2h", "hour2" },
                { "4h", "hour4" },
                { "6h", "hour6" },
                { "8h", "hour8" },
                { "12h", "hour12" },
                { "1d", "day1" },
                { "1w", "week1" },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/1294454/38063602-9605e28a-3302-11e8-81be-64b1e53c4cfb.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "rest", "https://api.lbank.info" },
                } },
                { "www", "https://www.lbank.info" },
                { "doc", "https://github.com/LBank-exchange/lbank-official-api-docs" },
                { "fees", "https://www.lbank.info/fees.html" },
                { "referral", "https://www.lbank.info/invitevip?icode=7QCY" },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new List<object>() {"currencyPairs", "ticker", "depth", "trades", "kline", "accuracy"} },
                } },
                { "private", new Dictionary<string, object>() {
                    { "post", new List<object>() {"user_info", "create_order", "cancel_order", "orders_info", "orders_info_history", "withdraw", "withdrawCancel", "withdraws", "withdrawConfigs"} },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "maker", this.parseNumber("0.001") },
                    { "taker", this.parseNumber("0.001") },
                } },
                { "funding", new Dictionary<string, object>() {
                    { "withdraw", new Dictionary<string, object>() {} },
                } },
            } },
            { "commonCurrencies", new Dictionary<string, object>() {
                { "GMT", "GMT Token" },
                { "PNT", "Penta" },
                { "SHINJA", "SHINJA(1M)" },
                { "VET_ERC20", "VEN" },
            } },
            { "options", new Dictionary<string, object>() {
                { "cacheSecretAsPem", true },
            } },
            { "precisionMode", TICK_SIZE },
        });
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name lbank#fetchMarkets
        * @description retrieves data on all markets for lbank
        * @param {object} params extra parameters specific to the exchange api endpoint
        * @returns {[object]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetAccuracy(parameters);
        //
        //    [
        //        {
        //            "symbol": "btc_usdt",
        //            "quantityAccuracy": "4",
        //            "minTranQua": "0.0001",
        //            "priceAccuracy": "2"
        //        },
        //        ...
        //    ]
        //
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object market = getValue(response, i);
            object id = getValue(market, "symbol");
            object parts = ((string)id).Split((string)"_").ToList<object>();
            object baseId = null;
            object quoteId = null;
            object numParts = getArrayLength(parts);
            // lbank will return symbols like "vet_erc20_usdt"
            if (isTrue(isGreaterThan(numParts, 2)))
            {
                baseId = add(add(getValue(parts, 0), "_"), getValue(parts, 1));
                quoteId = getValue(parts, 2);
            } else
            {
                baseId = getValue(parts, 0);
                quoteId = getValue(parts, 1);
            }
            object bs = this.safeCurrencyCode(baseId);
            object quote = this.safeCurrencyCode(quoteId);
            ((List<object>)result).Add(new Dictionary<string, object>() {
                { "id", id },
                { "symbol", add(add(bs, "/"), quote) },
                { "base", bs },
                { "quote", quote },
                { "settle", null },
                { "baseId", baseId },
                { "quoteId", quoteId },
                { "settleId", null },
                { "type", "spot" },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "active", true },
                { "contract", false },
                { "linear", null },
                { "inverse", null },
                { "contractSize", null },
                { "expiry", null },
                { "expiryDatetime", null },
                { "strike", null },
                { "optionType", null },
                { "precision", new Dictionary<string, object>() {
                    { "amount", this.parseNumber(this.parsePrecision(this.safeString(market, "quantityAccuracy"))) },
                    { "price", this.parseNumber(this.parsePrecision(this.safeString(market, "priceAccuracy"))) },
                } },
                { "limits", new Dictionary<string, object>() {
                    { "leverage", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "amount", new Dictionary<string, object>() {
                        { "min", this.safeFloat(market, "minTranQua") },
                        { "max", null },
                    } },
                    { "price", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "cost", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                } },
                { "info", id },
            });
        }
        return result;
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        //     {
        //         "symbol":"btc_usdt",
        //         "ticker":{
        //             "high":43416.06,
        //             "vol":7031.7427,
        //             "low":41804.26,
        //             "change":1.33,
        //             "turnover":300302447.81,
        //             "latest":43220.4
        //         },
        //         "timestamp":1642201617747
        //     }
        //
        object marketId = this.safeString(ticker, "symbol");
        market = this.safeMarket(marketId, market, "_");
        object symbol = getValue(market, "symbol");
        object timestamp = this.safeInteger(ticker, "timestamp");
        object info = ticker;
        ticker = getValue(info, "ticker");
        object last = this.safeString(ticker, "latest");
        object percentage = this.safeString(ticker, "change");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "high") },
            { "low", this.safeString(ticker, "low") },
            { "bid", null },
            { "bidVolume", null },
            { "ask", null },
            { "askVolume", null },
            { "vwap", null },
            { "open", null },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", percentage },
            { "average", null },
            { "baseVolume", this.safeString(ticker, "vol") },
            { "quoteVolume", this.safeString(ticker, "turnover") },
            { "info", info },
        }, market);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name lbank#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} params extra parameters specific to the lbank api endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = await this.publicGetTicker(this.extend(request, parameters));
        // {
        //     "symbol":"btc_usdt",
        //     "ticker":{
        //         "high":43416.06,
        //         "vol":7031.7427,
        //         "low":41804.26,
        //         "change":1.33,
        //         "turnover":300302447.81,
        //         "latest":43220.4
        //         },
        //     "timestamp":1642201617747
        // }
        return this.parseTicker(response, market);
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name lbank#fetchTickers
        * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
        * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} params extra parameters specific to the lbank api endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object request = new Dictionary<string, object>() {
            { "symbol", "all" },
        };
        object response = await this.publicGetTicker(this.extend(request, parameters));
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object ticker = this.parseTicker(getValue(response, i));
            object symbol = getValue(ticker, "symbol");
            ((Dictionary<string, object>)result)[(string)symbol] = ticker;
        }
        return this.filterByArray(result, "symbol", symbols);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name lbank#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int|undefined} limit the maximum amount of order book entries to return
        * @param {object} params extra parameters specific to the lbank api endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        limit ??= 60;
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object size = 60;
        if (isTrue(!isEqual(limit, null)))
        {
            size = mathMin(limit, size);
        }
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "size", size },
        };
        object response = await this.publicGetDepth(this.extend(request, parameters));
        return this.parseOrderBook(response, getValue(market, "symbol"));
    }

    public override object parseTrade(object trade, object market = null)
    {
        market = this.safeMarket(null, market);
        object timestamp = this.safeInteger(trade, "date_ms");
        object priceString = this.safeString(trade, "price");
        object amountString = this.safeString(trade, "amount");
        object price = this.parseNumber(priceString);
        object amount = this.parseNumber(amountString);
        object cost = this.parseNumber(Precise.stringMul(priceString, amountString));
        object id = this.safeString(trade, "tid");
        object type = null;
        object side = this.safeString(trade, "type");
        // remove type additions from i.e. buy_maker, sell_maker, buy_ioc, sell_ioc, buy_fok, sell_fok
        object splited = ((string)side).Split((string)"_").ToList<object>();
        side = getValue(splited, 0);
        return new Dictionary<string, object>() {
            { "id", id },
            { "info", this.safeValue(trade, "info", trade) },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", getValue(market, "symbol") },
            { "order", null },
            { "type", type },
            { "side", side },
            { "takerOrMaker", null },
            { "price", price },
            { "amount", amount },
            { "cost", cost },
            { "fee", null },
        };
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name lbank#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
        * @param {int|undefined} limit the maximum amount of trades to fetch
        * @param {object} params extra parameters specific to the lbank api endpoint
        * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "size", 100 },
        };
        if (isTrue(!isEqual(since, null)))
        {
            ((Dictionary<string, object>)request)["time"] = parseInt(since);
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((Dictionary<string, object>)request)["size"] = limit;
        }
        object response = await this.publicGetTrades(this.extend(request, parameters));
        return this.parseTrades(response, market, since, limit);
    }

    public override object parseOHLCV(object ohlcv, object market = null)
    {
        //
        //     [
        //         1590969600,
        //         0.02451657,
        //         0.02452675,
        //         0.02443701,
        //         0.02447814,
        //         238.38210000
        //     ]
        //
        return new List<object> {this.safeTimestamp(ohlcv, 0), this.safeNumber(ohlcv, 1), this.safeNumber(ohlcv, 2), this.safeNumber(ohlcv, 3), this.safeNumber(ohlcv, 4), this.safeNumber(ohlcv, 5)};
    }

    public async override Task<object> fetchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name lbank#fetchOHLCV
        * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe the length of time each candle represents
        * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
        * @param {int|undefined} limit the maximum amount of candles to fetch
        * @param {object} params extra parameters specific to the lbank api endpoint
        * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "1m";
        limit ??= 1000;
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        if (isTrue(isEqual(limit, null)))
        {
            limit = 100; // it's defined in lbank2
        }
        if (isTrue(isEqual(since, null)))
        {
            object duration = this.parseTimeframe(timeframe);
            since = subtract(this.milliseconds(), multiply(multiply(duration, 1000), limit));
        }
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "type", this.safeString(this.timeframes, timeframe, timeframe) },
            { "size", limit },
            { "time", this.parseToInt(divide(since, 1000)) },
        };
        object response = await this.publicGetKline(this.extend(request, parameters));
        //
        //     [
        //         [1590969600,0.02451657,0.02452675,0.02443701,0.02447814,238.38210000],
        //         [1590969660,0.02447814,0.02449883,0.02443209,0.02445973,212.40270000],
        //         [1590969720,0.02445973,0.02452067,0.02445909,0.02446151,266.16920000],
        //     ]
        //
        return this.parseOHLCVs(response, market, timeframe, since, limit);
    }

    public virtual object parseBalance(object response)
    {
        object result = new Dictionary<string, object>() {
            { "info", response },
            { "timestamp", null },
            { "datetime", null },
        };
        object info = this.safeValue(response, "info", new Dictionary<string, object>() {});
        object free = this.safeValue(info, "free", new Dictionary<string, object>() {});
        object freeze = this.safeValue(info, "freeze", new Dictionary<string, object>() {});
        object asset = this.safeValue(info, "asset", new Dictionary<string, object>() {});
        object currencyIds = new List<string>(((Dictionary<string,object>)free).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(currencyIds)); postFixIncrement(ref i))
        {
            object currencyId = getValue(currencyIds, i);
            object code = this.safeCurrencyCode(currencyId);
            object account = this.account();
            ((Dictionary<string, object>)account)["free"] = this.safeString(free, currencyId);
            ((Dictionary<string, object>)account)["used"] = this.safeString(freeze, currencyId);
            ((Dictionary<string, object>)account)["total"] = this.safeString(asset, currencyId);
            ((Dictionary<string, object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name lbank#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @param {object} params extra parameters specific to the lbank api endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privatePostUserInfo(parameters);
        //
        //     {
        //         "result":"true",
        //         "info":{
        //             "freeze":{
        //                 "iog":"0.00000000",
        //                 "ssc":"0.00000000",
        //                 "eon":"0.00000000",
        //             },
        //             "asset":{
        //                 "iog":"0.00000000",
        //                 "ssc":"0.00000000",
        //                 "eon":"0.00000000",
        //             },
        //             "free":{
        //                 "iog":"0.00000000",
        //                 "ssc":"0.00000000",
        //                 "eon":"0.00000000",
        //             },
        //         }
        //     }
        //
        return this.parseBalance(response);
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "-1", "cancelled" },
            { "0", "open" },
            { "1", "open" },
            { "2", "closed" },
            { "4", "closed" },
        };
        return this.safeString(statuses, status);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        //     {
        //         "symbol"："eth_btc",
        //         "amount"：10.000000,
        //         "create_time"：1484289832081,
        //         "price"：5000.000000,
        //         "avg_price"：5277.301200,
        //         "type"："sell",
        //         "order_id"："ab704110-af0d-48fd-a083-c218f19a4a55",
        //         "deal_amount"：10.000000,
        //         "status"：2
        //     }
        //
        object marketId = this.safeString(order, "symbol");
        object symbol = this.safeSymbol(marketId, market, "_");
        object timestamp = this.safeInteger(order, "create_time");
        // Limit Order Request Returns: Order Price
        // Market Order Returns: cny amount of market order
        object price = this.safeString(order, "price");
        object amount = this.safeString(order, "amount");
        object filled = this.safeString(order, "deal_amount");
        object average = this.safeString(order, "avg_price");
        object status = this.parseOrderStatus(this.safeString(order, "status"));
        object id = this.safeString(order, "order_id");
        object type = this.safeString(order, "order_type");
        object side = this.safeString(order, "type");
        return this.safeOrder(new Dictionary<string, object>() {
            { "id", id },
            { "clientOrderId", null },
            { "datetime", this.iso8601(timestamp) },
            { "timestamp", timestamp },
            { "lastTradeTimestamp", null },
            { "status", status },
            { "symbol", symbol },
            { "type", type },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", side },
            { "price", price },
            { "stopPrice", null },
            { "triggerPrice", null },
            { "cost", null },
            { "amount", amount },
            { "filled", filled },
            { "remaining", null },
            { "trades", null },
            { "fee", null },
            { "info", this.safeValue(order, "info", order) },
            { "average", average },
        }, market);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name lbank#createOrder
        * @description create a trade order
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} params extra parameters specific to the lbank api endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object order = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "type", side },
            { "amount", amount },
        };
        if (isTrue(isEqual(type, "market")))
        {
            ((Dictionary<string, object>)order)["type"] = add(((Dictionary<string, object>)order)["type"], "_market");
        } else
        {
            ((Dictionary<string, object>)order)["price"] = price;
        }
        object response = await this.privatePostCreateOrder(this.extend(order, parameters));
        order = this.omit(order, "type");
        ((Dictionary<string, object>)order)["order_id"] = getValue(response, "order_id");
        ((Dictionary<string, object>)order)["type"] = side;
        ((Dictionary<string, object>)order)["order_type"] = type;
        ((Dictionary<string, object>)order)["create_time"] = this.milliseconds();
        ((Dictionary<string, object>)order)["info"] = response;
        return this.parseOrder(order, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name lbank#cancelOrder
        * @description cancels an open order
        * @param {string} id order id
        * @param {string|undefined} symbol unified symbol of the market the order was made in
        * @param {object} params extra parameters specific to the lbank api endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "order_id", id },
        };
        object response = await this.privatePostCancelOrder(this.extend(request, parameters));
        return response;
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name lbank#fetchOrder
        * @description fetches information on an order made by the user
        * @param {string|undefined} symbol unified symbol of the market the order was made in
        * @param {object} params extra parameters specific to the lbank api endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        // Id can be a list of ids delimited by a comma
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "order_id", id },
        };
        object response = await this.privatePostOrdersInfo(this.extend(request, parameters));
        object data = this.safeValue(response, "orders", new List<object>() {});
        object orders = this.parseOrders(data, market);
        object numOrders = getArrayLength(orders);
        if (isTrue(isEqual(numOrders, 1)))
        {
            return getValue(orders, 0);
        } else
        {
            return ((object)orders);
        }
    }

    public async override Task<object> fetchOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name lbank#fetchOrders
        * @description fetches information on multiple orders made by the user
        * @param {string|undefined} symbol unified market symbol of the market orders were made in
        * @param {int|undefined} since the earliest time in ms to fetch orders for
        * @param {int|undefined} limit the maximum number of  orde structures to retrieve
        * @param {object} params extra parameters specific to the lbank api endpoint
        * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        if (isTrue(isEqual(limit, null)))
        {
            limit = 100;
        }
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "current_page", 1 },
            { "page_length", limit },
        };
        object response = await this.privatePostOrdersInfoHistory(this.extend(request, parameters));
        object data = this.safeValue(response, "orders", new List<object>() {});
        return this.parseOrders(data, null, since, limit);
    }

    public async override Task<object> fetchClosedOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name lbank#fetchClosedOrders
        * @description fetches information on multiple closed orders made by the user
        * @param {string|undefined} symbol unified market symbol of the market orders were made in
        * @param {int|undefined} since the earliest time in ms to fetch orders for
        * @param {int|undefined} limit the maximum number of  orde structures to retrieve
        * @param {object} params extra parameters specific to the lbank api endpoint
        * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        if (isTrue(!isEqual(symbol, null)))
        {
            object market = this.market(symbol);
            symbol = getValue(market, "symbol");
        }
        object orders = await this.fetchOrders(symbol, since, limit, parameters);
        object closed = this.filterBy(orders, "status", "closed");
        object canceled = this.filterBy(orders, "status", "cancelled"); // cancelled orders may be partially filled
        object allOrders = this.arrayConcat(closed, canceled);
        return ((object)this.filterBySymbolSinceLimit(allOrders, symbol, since, limit));
    }

    public async override Task<object> withdraw(object code, object amount, object address, object tag = null, object parameters = null)
    {
        /**
        * @method
        * @name lbank#withdraw
        * @description make a withdrawal
        * @param {string} code unified currency code
        * @param {float} amount the amount to withdraw
        * @param {string} address the address to withdraw to
        * @param {string|undefined} tag
        * @param {object} params extra parameters specific to the lbank api endpoint
        * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
                var tagparametersVariable = this.handleWithdrawTagAndParams(tag, parameters);
        tag = ((List<object>)tagparametersVariable)[0];
        parameters = ((List<object>)tagparametersVariable)[1];
        // mark and fee are optional params, mark is a note and must be less than 255 characters
        this.checkAddress(address);
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "assetCode", getValue(currency, "id") },
            { "amount", amount },
            { "account", address },
        };
        if (isTrue(!isEqual(tag, null)))
        {
            ((Dictionary<string, object>)request)["memo"] = tag;
        }
        object response = this.privatePostWithdraw(this.extend(request, parameters));
        //
        //     {
        //         'result': 'true',
        //         'withdrawId': 90082,
        //         'fee':0.001
        //     }
        //
        return this.parseTransaction(response, currency);
    }

    public override object parseTransaction(object transaction, object currency = null)
    {
        //
        // withdraw
        //
        //     {
        //         'result': 'true',
        //         'withdrawId': 90082,
        //         'fee':0.001
        //     }
        //
        currency = this.safeCurrency(null, currency);
        return new Dictionary<string, object>() {
            { "id", this.safeString2(transaction, "id", "withdrawId") },
            { "txid", null },
            { "timestamp", null },
            { "datetime", null },
            { "network", null },
            { "addressFrom", null },
            { "address", null },
            { "addressTo", null },
            { "amount", null },
            { "type", null },
            { "currency", getValue(currency, "code") },
            { "status", null },
            { "updated", null },
            { "tagFrom", null },
            { "tag", null },
            { "tagTo", null },
            { "comment", null },
            { "fee", null },
            { "info", transaction },
        };
    }

    public virtual object convertSecretToPem(object secret)
    {
        object lineLength = 64;
        object secretLength = subtract(getArrayLength(secret), 0);
        object numLines = this.parseToInt(divide(secretLength, lineLength));
        numLines = this.sum(numLines, 1);
        object pem = "-----BEGIN PRIVATE KEY-----\n"; // eslint-disable-line
        for (object i = 0; isLessThan(i, numLines); postFixIncrement(ref i))
        {
            object start = multiply(i, lineLength);
            object end = this.sum(start, lineLength);
            pem = add(pem, add(((string)this.secret).Substring((int)start, (int)end), "\n")); // eslint-disable-line
        }
        return add(pem, "-----END PRIVATE KEY-----");
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object query = this.omit(parameters, this.extractParams(path));
        object url = add(add(add(add(getValue(getValue(this.urls, "api"), "rest"), "/"), this.version), "/"), this.implodeParams(path, parameters));
        // Every endpoint ends with ".do"
        url = add(url, ".do");
        if (isTrue(isEqual(api, "public")))
        {
            if (isTrue(getArrayLength(new List<string>(((Dictionary<string,object>)query).Keys))))
            {
                url = add(url, add("?", this.urlencode(query)));
            }
        } else
        {
            this.checkRequiredCredentials();
            object queryInner = this.keysort(this.extend(new Dictionary<string, object>() {
                { "api_key", this.apiKey },
            }, parameters));
            object queryString = this.rawencode(queryInner);
            object message = ((string)this.hash(this.encode(queryString), sha256)).ToUpper();
            object cacheSecretAsPem = this.safeValue(this.options, "cacheSecretAsPem", true);
            object pem = null;
            if (isTrue(cacheSecretAsPem))
            {
                pem = this.safeValue(this.options, "pem");
                if (isTrue(isEqual(pem, null)))
                {
                    pem = this.convertSecretToPem(this.secret);
                    ((Dictionary<string, object>)this.options)["pem"] = pem;
                }
            } else
            {
                pem = this.convertSecretToPem(this.secret);
            }
            ((Dictionary<string, object>)query)["sign"] = rsa(message, pem, sha256);
            body = this.urlencode(query);
            headers = new Dictionary<string, object>() {
                { "Content-Type", "application/x-www-form-urlencoded" },
            };
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object httpCode, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;
        }
        object success = this.safeString(response, "result");
        if (isTrue(isEqual(success, "false")))
        {
            object errorCode = this.safeString(response, "error_code");
            object message = this.safeString(new Dictionary<string, object>() {
                { "10000", "Internal error" },
                { "10001", "The required parameters can not be empty" },
                { "10002", "verification failed" },
                { "10003", "Illegal parameters" },
                { "10004", "User requests are too frequent" },
                { "10005", "Key does not exist" },
                { "10006", "user does not exist" },
                { "10007", "Invalid signature" },
                { "10008", "This currency pair is not supported" },
                { "10009", "Limit orders can not be missing orders and the number of orders" },
                { "10010", "Order price or order quantity must be greater than 0" },
                { "10011", "Market orders can not be missing the amount of the order" },
                { "10012", "market sell orders can not be missing orders" },
                { "10013", "is less than the minimum trading position 0.001" },
                { "10014", "Account number is not enough" },
                { "10015", "The order type is wrong" },
                { "10016", "Account balance is not enough" },
                { "10017", "Abnormal server" },
                { "10018", "order inquiry can not be more than 50 less than one" },
                { "10019", "withdrawal orders can not be more than 3 less than one" },
                { "10020", "less than the minimum amount of the transaction limit of 0.001" },
                { "10022", "Insufficient key authority" },
            }, errorCode, this.json(response));
            object ErrorClass = this.safeValue(new Dictionary<string, object>() {
                { "10002", typeof(AuthenticationError) },
                { "10004", typeof(DDoSProtection) },
                { "10005", typeof(AuthenticationError) },
                { "10006", typeof(AuthenticationError) },
                { "10007", typeof(AuthenticationError) },
                { "10009", typeof(InvalidOrder) },
                { "10010", typeof(InvalidOrder) },
                { "10011", typeof(InvalidOrder) },
                { "10012", typeof(InvalidOrder) },
                { "10013", typeof(InvalidOrder) },
                { "10014", typeof(InvalidOrder) },
                { "10015", typeof(InvalidOrder) },
                { "10016", typeof(InvalidOrder) },
                { "10022", typeof(AuthenticationError) },
            }, errorCode, typeof(ExchangeError));
            throwDynamicException((string)ErrorClass, message);return null;
        }
        return null;
    }
}
