using ccxt;
namespace Tests;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class testMainClass : BaseTest
{
    async static public Task testFetchPositions(Exchange exchange, object symbol)
    {
        object method = "fetchPositions";
        object now = exchange.milliseconds();
        // without symbol
        object positions = await exchange.fetchPositions();
        assert((positions.GetType().IsGenericType && positions.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))), add(add(add(add(exchange.id, " "), method), " must return an array, returned "), exchange.json(positions)));
        for (object i = 0; isLessThan(i, getArrayLength(positions)); postFixIncrement(ref i))
        {
            testPosition(exchange, method, getValue(positions, i), null, now);
        }
        testSharedMethods.assertTimestampOrder(exchange, method, null, positions);
        // with symbol
        object positionsForSymbol = await exchange.fetchPositions(new List<object>() {symbol});
        assert((positionsForSymbol.GetType().IsGenericType && positionsForSymbol.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))), add(add(add(add(exchange.id, " "), method), " must return an array, returned "), exchange.json(positionsForSymbol)));
        object positionsForSymbolLength = getArrayLength(positionsForSymbol);
        assert(isLessThanOrEqual(positionsForSymbolLength, 4), add(add(add(add(exchange.id, " "), method), " positions length for particular symbol should be less than 4, returned "), exchange.json(positionsForSymbol)));
        for (object i = 0; isLessThan(i, getArrayLength(positionsForSymbol)); postFixIncrement(ref i))
        {
            testPosition(exchange, method, getValue(positionsForSymbol, i), symbol, now);
        }
        testSharedMethods.assertTimestampOrder(exchange, method, symbol, positionsForSymbol);
    }

}