using ccxt;
namespace Tests;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class testMainClass : BaseTest
{
    async static public Task testFetchOHLCV(Exchange exchange, object symbol)
    {
        object method = "fetchOHLCV";
        object timeframeKeys = new List<object>(((Dictionary<string,object>)exchange.timeframes).Keys);
        assert(isGreaterThan(getArrayLength(timeframeKeys), 0), add(add(add(exchange.id, " "), method), " - no timeframes found"));
        // prefer 1m timeframe if available, otherwise return the first one
        object chosenTimeframeKey = "1m";
        if (!isTrue(exchange.inArray(chosenTimeframeKey, timeframeKeys)))
        {
            chosenTimeframeKey = getValue(timeframeKeys, 0);
        }
        object limit = 10;
        object duration = exchange.parseTimeframe(chosenTimeframeKey);
        object since = subtract(subtract(exchange.milliseconds(), multiply(multiply(duration, limit), 1000)), 1000);
        object ohlcvs = await exchange.fetchOHLCV(symbol, chosenTimeframeKey, since, limit);
        assert((ohlcvs.GetType().IsGenericType && ohlcvs.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))), add(add(add(add(exchange.id, " "), method), " must return an array, returned "), exchange.json(ohlcvs)));
        object now = exchange.milliseconds();
        for (object i = 0; isLessThan(i, getArrayLength(ohlcvs)); postFixIncrement(ref i))
        {
            testOHLCV(exchange, method, getValue(ohlcvs, i), symbol, now);
        }
    }

}