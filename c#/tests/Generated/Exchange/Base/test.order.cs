using ccxt;
namespace Tests;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class testMainClass : BaseTest
{
    public static void testOrder(Exchange exchange, object method, object entry, object symbol, object now)
    {
        object format = new Dictionary<string, object>() {
            { "info", new Dictionary<string, object>() {} },
            { "id", "123" },
            { "clientOrderId", "1234" },
            { "timestamp", 1649373600000 },
            { "datetime", "2022-04-07T23:20:00.000Z" },
            { "lastTradeTimestamp", 1649373610000 },
            { "symbol", "XYZ/USDT" },
            { "type", "limit" },
            { "timeInForce", "GTC" },
            { "postOnly", true },
            { "side", "sell" },
            { "price", exchange.parseNumber("1.23456") },
            { "stopPrice", exchange.parseNumber("1.1111") },
            { "amount", exchange.parseNumber("1.23") },
            { "cost", exchange.parseNumber("2.34") },
            { "average", exchange.parseNumber("1.234") },
            { "filled", exchange.parseNumber("1.23") },
            { "remaining", exchange.parseNumber("0.123") },
            { "status", "ok" },
            { "fee", new Dictionary<string, object>() {} },
            { "trades", new List<object>() {} },
        };
        object emptyNotAllowedFor = new List<object>() {"id"};
        // todo: skip some exchanges
        // const emptyNotAllowedFor = [ 'id', 'timestamp', 'symbol', 'type', 'side', 'price' ];
        testSharedMethods.assertStructure(exchange, method, entry, format, emptyNotAllowedFor);
        testSharedMethods.assertTimestamp(exchange, method, entry, now);
        //
        testSharedMethods.assertInArray(exchange, method, entry, "timeInForce", new List<object>() {"GTC", "GTK", "IOC", "FOK"});
        testSharedMethods.assertInArray(exchange, method, entry, "status", new List<object>() {"open", "closed", "canceled"});
        testSharedMethods.assertInArray(exchange, method, entry, "side", new List<object>() {"buy", "sell"});
        testSharedMethods.assertInArray(exchange, method, entry, "postOnly", new List<object>() {true, false});
        testSharedMethods.assertSymbol(exchange, method, entry, "symbol", symbol);
        testSharedMethods.assertGreater(exchange, method, entry, "price", "0");
        testSharedMethods.assertGreater(exchange, method, entry, "stopPrice", "0");
        testSharedMethods.assertGreater(exchange, method, entry, "cost", "0");
        testSharedMethods.assertGreater(exchange, method, entry, "average", "0");
        testSharedMethods.assertGreater(exchange, method, entry, "average", "0");
        testSharedMethods.assertGreaterOrEqual(exchange, method, entry, "filled", "0");
        testSharedMethods.assertGreaterOrEqual(exchange, method, entry, "remaining", "0");
        testSharedMethods.assertGreaterOrEqual(exchange, method, entry, "amount", "0");
        testSharedMethods.assertGreaterOrEqual(exchange, method, entry, "amount", exchange.safeString(entry, "remaining"));
        testSharedMethods.assertGreaterOrEqual(exchange, method, entry, "amount", exchange.safeString(entry, "filled"));
        if (isTrue(!isEqual(getValue(entry, "trades"), null)))
        {
            for (object i = 0; isLessThan(i, getArrayLength(getValue(entry, "trades"))); postFixIncrement(ref i))
            {
                testTrade(exchange, method, getValue(getValue(entry, "trades"), i), symbol, now);
            }
        }
        testSharedMethods.assertFee(exchange, method, getValue(entry, "fee"));
    }

}