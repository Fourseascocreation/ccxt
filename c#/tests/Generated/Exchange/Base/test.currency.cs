using ccxt;
namespace Tests;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class testMainClass : BaseTest
{
    public static void testCurrency(Exchange exchange, object method, object entry)
    {
        object format = new Dictionary<string, object>() {
            { "info", new Dictionary<string, object>() {} },
            { "id", "btc" },
            { "code", "BTC" },
            { "name", "Bitcoin" },
            { "withdraw", true },
            { "deposit", true },
            { "precision", exchange.parseNumber("0.0001") },
            { "fee", exchange.parseNumber("0.001") },
            { "limits", new Dictionary<string, object>() {
                { "withdraw", new Dictionary<string, object>() {
                    { "min", exchange.parseNumber("0.01") },
                    { "max", exchange.parseNumber("1000") },
                } },
                { "deposit", new Dictionary<string, object>() {
                    { "min", exchange.parseNumber("0.01") },
                    { "max", exchange.parseNumber("1000") },
                } },
            } },
        };
        object emptyNotAllowedFor = new List<object>() {"id", "code"};
        testSharedMethods.assertStructure(exchange, method, entry, format, emptyNotAllowedFor);
        testSharedMethods.assertCurrencyCode(exchange, method, entry, getValue(entry, "code"));
        //
        testSharedMethods.assertGreater(exchange, method, entry, "precision", "0");
        testSharedMethods.assertGreaterOrEqual(exchange, method, entry, "fee", "0");
        object limits = exchange.safeValue(entry, "limits", new Dictionary<string, object>() {});
        object withdrawLimits = exchange.safeValue(limits, "withdraw", new Dictionary<string, object>() {});
        object depositLimits = exchange.safeValue(limits, "deposit", new Dictionary<string, object>() {});
        testSharedMethods.assertGreaterOrEqual(exchange, method, withdrawLimits, "min", "0");
        testSharedMethods.assertGreaterOrEqual(exchange, method, withdrawLimits, "max", "0");
        testSharedMethods.assertGreaterOrEqual(exchange, method, depositLimits, "min", "0");
        testSharedMethods.assertGreaterOrEqual(exchange, method, depositLimits, "max", "0");
    }

}