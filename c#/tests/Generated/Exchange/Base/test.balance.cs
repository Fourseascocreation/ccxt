using ccxt;
namespace Tests;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class testMainClass : BaseTest
{
    public static void testBalance(Exchange exchange, object method, object entry)
    {
        object format = new Dictionary<string, object>() {
            { "free", new Dictionary<string, object>() {} },
            { "used", new Dictionary<string, object>() {} },
            { "total", new Dictionary<string, object>() {} },
            { "info", new Dictionary<string, object>() {} },
        };
        object emptyNotAllowedFor = new List<object>() {"free", "used", "total"};
        testSharedMethods.assertStructure(exchange, method, entry, format, emptyNotAllowedFor);
        object logText = testSharedMethods.logTemplate(exchange, method, entry);
        //
        object codes = new List<object>(((Dictionary<string,object>)getValue(entry, "total")).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(codes)); postFixIncrement(ref i))
        {
            object code = getValue(codes, i);
            testSharedMethods.assertCurrencyCode(exchange, method, entry, code);
            object total = exchange.safeString(getValue(entry, "total"), code);
            object free = exchange.safeString(getValue(entry, "free"), code);
            object used = exchange.safeString(getValue(entry, "used"), code);
            object totalDefined = !isEqual(total, null);
            object freeDefined = !isEqual(free, null);
            object usedDefined = !isEqual(used, null);
            if (isTrue(isTrue(isTrue(totalDefined) && isTrue(freeDefined)) && isTrue(usedDefined)))
            {
                object freeAndUsed = Precise.stringAdd(free, used);
                assert(Precise.stringEq(total, freeAndUsed), add("free and used do not sum to total", logText));
            } else
            {
                assert(isTrue(!isTrue(totalDefined) && isTrue(freeDefined)) && isTrue(usedDefined), add("value of \"total\" is missing from balance calculations", logText));
                assert(isTrue(isTrue(totalDefined) && !isTrue(freeDefined)) && isTrue(usedDefined), add("value of \"free\" is missing from balance calculations", logText));
                assert(isTrue(isTrue(totalDefined) && isTrue(freeDefined)) && !isTrue(usedDefined), add("value of \"used\" is missing from balance calculations", logText));
            }
        }
    }

}