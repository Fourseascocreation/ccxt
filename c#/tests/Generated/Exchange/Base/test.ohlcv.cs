using ccxt;
namespace Tests;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class testMainClass : BaseTest
{
    public static void testOHLCV(Exchange exchange, object method, object entry, object symbol, object now)
    {
        object format = new List<object>() {1638230400000, exchange.parseNumber("0.123"), exchange.parseNumber("0.125"), exchange.parseNumber("0.121"), exchange.parseNumber("0.122"), exchange.parseNumber("123.456")};
        object emptyNotAllowedFor = new List<object>() {0, 1, 2, 3, 4, 5};
        testSharedMethods.assertStructure(exchange, method, entry, format, emptyNotAllowedFor);
        testSharedMethods.assertTimestamp(exchange, method, entry, now, 0);
        object logText = testSharedMethods.logTemplate(exchange, method, entry);
        //
        object length = getArrayLength(entry);
        assert(isGreaterThanOrEqual(length, 6), add("ohlcv array length should be >= 6;", logText));
        object skippedExchanges = new List<object>() {};
        if (!isTrue(exchange.inArray(exchange.id, skippedExchanges)))
        {
            assert(isTrue(isTrue((isEqual(getValue(entry, 1), null))) || isTrue((isEqual(getValue(entry, 2), null)))) || isTrue((isLessThanOrEqual(getValue(entry, 1), getValue(entry, 2)))), add(add(add("open > high, ", exchange.safeString(entry, 1, "undefined")), " > "), exchange.safeString(entry, 2, "undefined"))); // open <= high
            assert(isTrue(isTrue((isEqual(getValue(entry, 3), null))) || isTrue((isEqual(getValue(entry, 2), null)))) || isTrue((isLessThanOrEqual(getValue(entry, 3), getValue(entry, 2)))), add(add(add("low > high, ", exchange.safeString(entry, 2, "undefined")), " > "), exchange.safeString(entry, 3, "undefined"))); // low <= high
            assert(isTrue(isTrue((isEqual(getValue(entry, 3), null))) || isTrue((isEqual(getValue(entry, 4), null)))) || isTrue((isLessThanOrEqual(getValue(entry, 3), getValue(entry, 4)))), add(add(add("low > close, ", exchange.safeString(entry, 3, "undefined")), " > "), exchange.safeString(entry, 4, "undefined"))); // low <= close
        }
        assert(isTrue((isEqual(symbol, null))) || isTrue((((symbol).GetType() == typeof(string)))), add(add(add("symbol ", symbol), " is incorrect"), logText));
    }

}