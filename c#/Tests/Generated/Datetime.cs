using Main;
namespace Tests;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public class DateTimeTests : BaseTest
{
    [Fact]
    public void TestDate()
    {
        var exchange = new Exchange(new Dictionary<string, object>() {
            { "id", "regirock" },
        });
        // ----------------------------------------------------------------------------
        Assert.True(isEqual(exchange.iso8601(514862627000), "1986-04-26T01:23:47.000Z"));
        Assert.True(isEqual(exchange.iso8601(514862627559), "1986-04-26T01:23:47.559Z"));
        Assert.True(isEqual(exchange.iso8601(514862627062), "1986-04-26T01:23:47.062Z"));
        Assert.True(isEqual(exchange.iso8601(0), "1970-01-01T00:00:00.000Z"));
        Assert.True(isEqual(exchange.iso8601(-1), null));
        Assert.True(isEqual(exchange.iso8601(), null));
        Assert.True(isEqual(exchange.iso8601(null), null));
        Assert.True(isEqual(exchange.iso8601(""), null));
        Assert.True(isEqual(exchange.iso8601("a"), null));
        Assert.True(isEqual(exchange.iso8601(new Dictionary<string, object>() {}), null));
        // ----------------------------------------------------------------------------
        Assert.True(isEqual(exchange.parse8601("1986-04-26T01:23:47.000Z"), 514862627000));
        Assert.True(isEqual(exchange.parse8601("1986-04-26T01:23:47.559Z"), 514862627559));
        Assert.True(isEqual(exchange.parse8601("1986-04-26T01:23:47.062Z"), 514862627062));
        Assert.True(isEqual(exchange.parse8601("1986-04-26T01:23:47.06Z"), 514862627060));
        Assert.True(isEqual(exchange.parse8601("1986-04-26T01:23:47.6Z"), 514862627600));
        Assert.True(isEqual(exchange.parse8601("1977-13-13T00:00:00.000Z"), null));
        Assert.True(isEqual(exchange.parse8601("1986-04-26T25:71:47.000Z"), null));
        Assert.True(isEqual(exchange.parse8601("3333"), null));
        Assert.True(isEqual(exchange.parse8601("Sr90"), null));
        Assert.True(isEqual(exchange.parse8601(""), null));
        Assert.True(isEqual(exchange.parse8601(), null));
        Assert.True(isEqual(exchange.parse8601(null), null));
        Assert.True(isEqual(exchange.parse8601(new Dictionary<string, object>() {}), null));
        Assert.True(isEqual(exchange.parse8601(33), null));
        // ----------------------------------------------------------------------------
        Assert.True(isEqual(exchange.parseDate("1986-04-26 00:00:00"), 514857600000));
        Assert.True(isEqual(exchange.parseDate("1986-04-26T01:23:47.000Z"), 514862627000));
        Assert.True(isEqual(exchange.parseDate("1986-13-13 00:00:00"), null));
        Assert.True(isEqual(exchange.roundTimeframe("5m", exchange.parse8601("2019-08-12 13:22:08"), ROUND_DOWN), exchange.parse8601("2019-08-12 13:20:00")));
        Assert.True(isEqual(exchange.roundTimeframe("10m", exchange.parse8601("2019-08-12 13:22:08"), ROUND_DOWN), exchange.parse8601("2019-08-12 13:20:00")));
        Assert.True(isEqual(exchange.roundTimeframe("30m", exchange.parse8601("2019-08-12 13:22:08"), ROUND_DOWN), exchange.parse8601("2019-08-12 13:00:00")));
        Assert.True(isEqual(exchange.roundTimeframe("1d", exchange.parse8601("2019-08-12 13:22:08"), ROUND_DOWN), exchange.parse8601("2019-08-12 00:00:00")));
        Assert.True(isEqual(exchange.roundTimeframe("5m", exchange.parse8601("2019-08-12 13:22:08"), ROUND_UP), exchange.parse8601("2019-08-12 13:25:00")));
        Assert.True(isEqual(exchange.roundTimeframe("10m", exchange.parse8601("2019-08-12 13:22:08"), ROUND_UP), exchange.parse8601("2019-08-12 13:30:00")));
        Assert.True(isEqual(exchange.roundTimeframe("30m", exchange.parse8601("2019-08-12 13:22:08"), ROUND_UP), exchange.parse8601("2019-08-12 13:30:00")));
        Assert.True(isEqual(exchange.roundTimeframe("1h", exchange.parse8601("2019-08-12 13:22:08"), ROUND_UP), exchange.parse8601("2019-08-12 14:00:00")));
        Assert.True(isEqual(exchange.roundTimeframe("1d", exchange.parse8601("2019-08-12 13:22:08"), ROUND_UP), exchange.parse8601("2019-08-13 00:00:00")));
    }
}