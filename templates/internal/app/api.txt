{{if (codeLang 0)}}
package {{.Info.ID}}

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code
import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	"github.com/ccxt/ccxt/go/internal/app/bitmex/models"
)

func handleBodyErr(body []byte, err error) error {
	var exErr models.Error
	if err2 := json.Unmarshal(body, &exErr); err2 == nil {
		return fmt.Errorf("%s: %s", exErr.Error.Name, exErr.Error.Message)
	}
	var any interface{}
	_ = json.Unmarshal(body, &any)
	if exErr, ok := any.(models.Error); ok {
		return fmt.Errorf("%s: %s", exErr.Error.Name, exErr.Error.Message)
	}
	return fmt.Errorf("Error with decoding: %+v", any)
}

func (c *Exchange) apiRequest(method string, reqURL string, params *url.Values, body bytes.Buffer) ([]byte, error) {
	baseURL, err := url.Parse(reqURL)
	if err != nil {
		return nil, err
	}
	baseURL.RawQuery = params.Encode()
	var req *http.Request
	if len(body.Bytes()) > 0 {
			req, err = http.NewRequest(method, baseURL.String(), &body)
			if err != nil {
					return nil, err
			}
			req.Header.Add("Content-Type", http.DetectContentType(body.Bytes()))
	} else {
			req, err = http.NewRequest(method, baseURL.String(), nil)
			if err != nil {
					return nil, err
			}
	}
	req.Header.Add("Accept", "application/json")
	c.SignRequest(req, method, baseURL, body.Bytes())
	res, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()
	resBody, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return nil, err
	}
	if res.StatusCode >= 300 {
		err = fmt.Errorf("HTTP Response %d: %s", res.StatusCode, http.StatusText(res.StatusCode))
		return nil, handleBodyErr(resBody, err)
	}
	return resBody, nil
}

func (c *Exchange) parseEndpoint(endpoint string) string {
	baseURL := c.Info.URLs.WWW
	if c.Config.Test {
		baseURL = c.Info.URLs.Test
	}
	return baseURL + c.Info.URLs.API + endpoint
}
{{else if (codeLang 1)}}// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

import querystring from 'querystring';
import * as models from './models';
import * as ccxt from '../../../pkg/ccxt/models';
import Exchange from '../../../pkg/ccxt/exchange';

export default class ExchangeAPI extends Exchange {
  info: ccxt.ExchangeInfo;
  config: ccxt.ExchangeConfig;
  constructor(config: ccxt.ExchangeConfig) {
    super();
    if (!config.hasOwnProperty('timeout') || config.timeout === 0) {
      config.timeout = 10 * 1000;
    }
    this.config = config;
    const infoFile =
      '/Users/stefan/Github/ccxt/templates/internal/app/bitmex/bitmex.json';
    this.info = require(infoFile);
  }
  async apiRequest(
    method: string,
    reqURL: string,
    params: Object,
    data: Object
  ): Promise<any> {
    const url = `${reqURL}?${querystring.stringify(params)}`;
    try {
      const res = await this.client({
        method,
        url,
        data,
      });
      return res;
    } catch (e) {
      throw e;
    }
  }
  parseEndpoint(endpoint: string): string {
    let baseUrl = this.info.urls.www;
    if (this.config.test) {
      baseUrl = this.info.urls.test;
    }
    return baseUrl + this.info.urls.api + endpoint;
  }
{{end}}
{{range $api, $dataModel := .Info.API.Public.Get}}
{{apiFunc "PublicGet" $api $dataModel}}
{{end}}
{{range $api, $dataModel := .Info.API.Public.Post}}
{{apiFunc "PublicPost" $api $dataModel}}
{{end}}
{{range $api, $dataModel := .Info.API.Public.Put}}
{{apiFunc "PublicPut" $api $dataModel}}
{{end}}
{{range $api, $dataModel := .Info.API.Public.Delete}}
{{apiFunc "PublicDelete" $api $dataModel}}
{{end}}
{{range $api, $dataModel := .Info.API.Private.Get}}
{{apiFunc "PrivateGet" $api $dataModel}}
{{end}}
{{range $api, $dataModel := .Info.API.Private.Post}}
{{apiFunc "PrivatePost" $api $dataModel}}
{{end}}
{{range $api, $dataModel := .Info.API.Private.Put}}
{{apiFunc "PrivatePut" $api $dataModel}}
{{end}}
{{range $api, $dataModel := .Info.API.Private.Delete}}
{{apiFunc "PrivateDelete" $api $dataModel}}
{{end}}
{{if (codeLang 1)}}}{{end}}